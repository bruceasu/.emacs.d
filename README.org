# -*- coding: utf-8
#+OPTIONS: ^:{}
#+TITLE: SUK 嘅 EMACS 配置
#+STARTUP: showeverything
#+PROPERTY: header-args:emacs-lisp+   :tangle yes :results silent :exports code :eval never-export
#+FILETAGS: :emacs:
#+LANGUAGE: zh-CN
#+DATE: {{{time(%Y 年%0m 月%d 日)}}}
#+AUTHOR: Suk
#+EMAIL:  bruceasu@gmail.com

* About
:PROPERTIES:
:CUSTOM_ID: babel-init
:END:
<<babel-init>>

呢个係我个人嘅配置。其实好长，但部分原因系我有时会将博客文章留返喺度做
注释，仲有因为我有好多细节嘅自定义，可能我自己都唔记得晒。 如果你啱啱
接触 Emacs Lisp，你可能唔想直接复制粘贴咁多代码块。相反，你可以复制啲
小部分（记住每次复制时要确保括号成对）放入你嘅 ~*scratch*~ buffer 或者其
他 ~emacs-lisp-mode~ 嘅 buffer 入面。用 ~M-x eval-buffer~ 来执行啲代码，睇
下 Emacs 嘅表现你钟唔钟意。你可以参考 [[https://www.gnu.org/software/emacs/manual/html_mono/eintr.html][An Introduction to Programming
in Emacs Lisp]] 来了解更多 Emacs Lisp 嘅资料。如果想睇手册，你可以用
~C-h i~ (~info~)，然后选择 “Emacs Lisp Intro”。

我安装咗好多软件包。当你见到 ~use-package~ 同某个包名，你可以用 ~M-x
package-install~ 来安装嗰个包。

如果你喺睇 Org 文件。你可以将源代码块（即系 ~begin_src~ 入面嘅内容）打开
喺独立嘅 buffer。只需要将光标移入代码块，然后按 ~C-c '~
(~org-edit-special~)。咁样会开一个新嘅 buffer 用 =emacs-lisp-mode= ，你可
以用 =M-x eval-buffer= 来加载修改。想深入了解函数点样运作，可以用 =M-x
edebug-defun= 来调试个函数，然后调用佢。你可以喺 [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html][Emacs Lisp]] 手册了解更:END:
<<starting-up>>

#+begin_src emacs-lisp :tangle early-init.el :eval never-export
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.8)

  (setq frame-inhibit-implied-resize t)
  (setq inhibit-startup-message t)

  ;; In Emacs 27+, package initialization occurs before `user-init-file' is
  ;; loaded, but after `early-init-file'.
  ;; we must prevent Emacs from doing it early!
  (setq package-enable-at-startup nil)
  ;; Do not allow loading from the package cache (same reason).
  (setq package-quickstart nil)
  ;; `use-package' is builtin since 29.
  ;; It must be set before loading `use-package'.
  (setq use-package-enable-imenu-support t)


  ;; System default coding
  (set-language-environment 'utf-8)
  ;; Cleaner GUI
  ;;  (menu-bar-mode -1) ; keep the menu is better.
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (toggle-frame-maximized)
   ;; kill buffer without my confirmation
  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
  (setq find-file-visit-truename t)
  (provide 'early-init)
  ;;(global-unset-key (kbd "C-SPC"))
#+end_src

** 呢个係我嘅 init.el :
:PROPERTIES:
:CUSTOM_ID: init
:END:
<<init>>

#+BEGIN_SRC emacs-lisp :tangle init.el :eval never-export
   (provide 'init)

   ;; 定义一尐目录，方便日后迁移。user-emacs-directory 通常係 ~/.emacs.d
   ;; windows 下, ~/ 通常係 $EMACS_INSTALL_DIR, 或者 EMACS 测定嘅 `HOME`
   ;; 变量。
   (defvar suk-emacs-root-dir      (file-truename user-emacs-directory))
   (defvar suk-emacs-config-dir    (expand-file-name "etc" suk-emacs-root-dir))
   (defvar suk-emacs-extension-dir (expand-file-name "extensions" suk-emacs-root-dir))
   (defvar suk-emacs-share-dir     (expand-file-name "share" suk-emacs-root-dir))
   (defvar suk-emacs-themes-dir    (expand-file-name "themes" suk-emacs-share-dir))
   (defvar suk-emacs-var-dir       (expand-file-name "var" suk-emacs-root-dir))
   (defvar suk-emacs-tmp-dir       (expand-file-name "tmp" suk-emacs-var-dir))
   (defvar suk-emacs-backup-dir    (expand-file-name "backup" suk-emacs-tmp-dir))

   ;; OS 嘅 HOME 目录。
   (defvar user-home-dir (getenv "HOME"))

   (if (eq system-type 'windows-nt)
       (defvar user-home-dir (getenv "USERPROFILE")))
   ;; blink search
   (setq blink-search-db-path (expand-file-name "blink-search.db" suk-emacs-tmp-dir))

   ;; History
   (setq savehist-file (concat suk-emacs-var-dir "/history"))
   ;; Amx
   (setq amx-save-file (concat suk-emacs-var-dir "/amx-items"))
   ;; Auto save
   (setq auto-save-list-file-prefix (concat suk-emacs-var-dir "/auto-save-list/.saves-"))
   ;; Eshell
   (setq eshell-directory-name (concat suk-emacs-var-dir "/eschell"))
   (setq eshell-history-file-name (concat eshell-directory-name "/history"))
   ;; projectitle-bookmarks
   (setq projectile-known-projects-file (concat suk-emacs-var-dir "/projectile-bookmarks.eld"))
   (setq backup-directory-alist `(("" . ,suk-emacs-tmp-dir)))
   ;; Bookmark
   (setq bookmark-default-file (concat suk-emacs-var-dir "/emacs.bmk"))
   ;; Diary
   (setq diary-file (concat user-home-dir "/diary"))
   ;; server 无效
   (require 'server)
   ;;(setq server-socket-dir suk-emacs-var-dir)

   ;; Clear to avoid analyzing files when loading remote files.
   (setq file-name-handler-alist nil)
   ;; Don't pass case-insensitive to `auto-mode-alist'
   (setq auto-mode-case-fold nil)

#+END_SRC

*** 加载目录函数：递归  Emacs 同埋插件嘅设定目录到 `load-path`
:PROPERTIES:
:CUSTOM_ID: load-path-settings
:END:
<<load-path-settings>>

#+BEGIN_SRC emacs-lisp :tangle init.el  :eval never-export
  ;; Ignore `cl` expiration warnings
  (setq byte-compile-warnings '(cl-function))

  ;; original version
  ;;(defun add-subdirs-to-load-path (dir)
  ;;  "Recursive add directories to `load-path'."
  ;;  (let ((default-directory (file-name-as-directory dir)))
  ;;     (add-to-list 'load-path dir)
  ;;     (normal-top-level-add-subdirs-to-load-path)))

  ;; 王勇的版本 https://manateelazycat.github.io/emacs/2022/03/02/emacs-load-directory-recursively.html
  (require 'cl-lib)
  (defun add-subdirs-to-load-path (search-dir isFirst)
    (interactive)
    (when isFirst
      ;; The original version did not add the first search-dir itself to
      ;; the `load path`. The recursive search-dir was added before the
      ;; recursion.
      (add-to-list 'load-path search-dir))
    (let* ((dir (file-name-as-directory search-dir)))
      (dolist (subdir
               ;; goleui bat bityiu ge mukluk, taising Emacs kaidung cudou.
               (cl-remove-if
                #'(lambda (subdir)
                    (or
                     ;; m hai mangin
                     (not (file-directory-p (concat dir subdir)))
                     ;; yiceui haamin ge mukluk
                     (member subdir '("." ".." ; Linux/Uniux haitung ge  dongcin mukluk tungmaai fu mukluk
                                      "dist" "node_modules" "__pycache__" ; takding ge yüyin seunggwaan ge mukluk
                                      "RCS" "CVS" "rcs" "cvs" ".git" ".github")))) ; baanbun hungjai mukluk
                (directory-files dir)))
        (let ((subdir-path (concat dir (file-name-as-directory subdir))))
          ;; mukluk bauhaam  .el .so .dll ge mangin di louging sinji gaa dou `load-path` binleung
          (when (cl-some #'(lambda (subdir-file)
                             (and (file-regular-p (concat subdir-path subdir-file))
                                  ;; .so .dll 文件指非Elisp语言编写的Emacs动态库
                                  (member (file-name-extension subdir-file) '("el" "so" "dll"))))
                         (directory-files subdir-path))

            ;; jüyi: add-to-list ge daisaam go caamsou bitseuiwai t, timgaa dou meibou,
            ;; kokbou gwongdou yausin
            (add-to-list 'load-path subdir-path t))

          ;; geieuuk daigwai sausok ji mukluk.
          (add-subdirs-to-load-path subdir-path nil)))))

  ;; gaazoi tsiding ge mukluk.
  (add-subdirs-to-load-path suk-emacs-config-dir t)
  (add-subdirs-to-load-path suk-emacs-extension-dir t)
  (add-subdirs-to-load-path suk-emacs-themes-dir t)


  ;; (add-to-list 'load-path "/usr/local/share/emacs/site-lisp")
  ;; (add-to-list 'load-path "~/vendor/org-mode/lisp")
  ;; (add-to-list 'load-path "~/vendor/org-mode/contrib/lisp")
  ;; (setq custom-file "~/.config/emacs/custom-settings.el")
  ;; (setq use-package-always-ensure t)
  ;; (load custom-file t)
#+END_SRC

*** 设置 GC
:PROPERTIES:
:CUSTOM_ID: gc-settings
:END:
<<gc-settings>>

#+begin_src emacs-lisp :tangle init.el :eavl never-export

  (setq gc-cons-threshold most-positive-fixnum)
  (setq gc-cons-percentage 0.8)
  ;; Reset the GC setting
  (add-hook 'emacs-startup-hook
            (lambda ()
               ;; makying zik wai 0.8MB
               ;;(setq gc-cons-threshold 80000000)
               (message "Emacs ready in %s with %d garbage collections."
                        (format "%.2f seconds"
                                (float-time
                                 (time-subtract after-init-time before-init-time)))
                        gcs-done)
               (add-hook 'focus-out-hook 'garbage-collect)))

    ;; @see https://www.reddit.com/r/emacs/comments/55ork0/is_emacs_251_noticeably_slower_than_245_on_windows/
    ;; Emacs 25 does gc too frequently
    ;; (setq garbage-collection-messages t) ; for debug
    (defun my-cleanup-gc ()
      "Clean up gc."
      (setq gc-cons-threshold  67108864) ; 64M
      (setq gc-cons-percentage 0.1) ; original value
      (garbage-collect))
    (run-with-idle-timer 4 nil #'my-cleanup-gc)


#+end_src

*** 常量定义
:PROPERTIES:
:CUSTOM_ID: const
:END:
<<const>>

#+begin_src emacs-lisp :tangle init.el :eval never-export
  (defconst sys/win32p
    (eq system-type 'windows-nt)
    "Are we running on a WinTel system?")

  (defconst sys/linuxp
    (eq system-type 'gnu/linux)
    "Are we running on a GNU/Linux system?")

  (defconst sys/macp
    (eq system-type 'darwin)
    "Are we running on a Mac system?")

  (defconst sys/mac-x-p
    (and (display-graphic-p) sys/macp)
    "Are we running under X on a Mac system?")

  (defconst sys/linux-x-p
    (and (display-graphic-p) sys/linuxp)
    "Are we running under X on a GNU/Linux system?")

  (defconst sys/cygwinp
    (eq system-type 'cygwin)
    "Are we running on a Cygwin system?")

  (defconst sys/rootp
    (string-equal "root" (getenv "USER"))
    "Are you using ROOT user?")

  (defconst emacs/>=25p
    (>= emacs-major-version 25)
    "Emacs is 25 or above.")

  (defconst emacs/>=26p
    (>= emacs-major-version 26)
    "Emacs is 26 or above.")

  (defconst emacs/>=27p
    (>= emacs-major-version 27)
    "Emacs is 27 or above.")

  (defconst emacs/>=28p
    (>= emacs-major-version 28)
    "Emacs is 28 or above.")

  (defconst emacs/>=29p
    (>= emacs-major-version 29)
    "Emacs is 29 or above.")

  (defconst emacs/>=30p
    (>= emacs-major-version 30)
    "Emacs is 30 or above.")
#+end_src

*** Emacs Package 初始化
:PROPERTIES:
:CUSTOM_ID: setup-package
:END:
<<setup-package>>

#+begin_src emacs-lisp :tangle init.el :eval never-export
  ;; This sets up the load path so that we can override it
  (setq warning-suppress-log-types '((package reinitialization)))
  ;; 指定ELPA目录
  (setq package-user-dir (expand-file-name "elpa" "~/.local/share"))
  (add-subdirs-to-load-path package-user-dir t)

  ;; HACK: DO NOT copy package-selected-packages to init/custom file forcibly.
  ;; https://github.com/jwiegley/use-package/issues/383#issuecomment-247801751
  (defun my-save-selected-packages (&optional value)
    "Set `package-selected-packages' to VALUE but don't save to `custom-file'."
    (when value
      (setq package-selected-packages value)))

  (advice-add 'package--save-selected-packages :override #'my-save-selected-packages)

  (require 'package)
  ;; gnu：
  ;; http://elpa.gnu.org/packages/
  ;; https://elpa.emacs-china.org/gnu/ http://1.15.88.122/gnu/
  ;; https://mirrors.163.com/elpa/gnu/
  ;; https://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/
  ;; melpa:
  ;; http://melpa.org/packages/
  ;; https://www.mirrorservice.org/sites/melpa.org/packages/
  ;; https://elpa.emacs-china.org/melpa/ http://1.15.88.122/melpa/
  ;; https://mirrors.163.com/elpa/melpa/
  ;; https://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/

  ;;(setq package-archives '(("melpa" . "http://melpa.org/packages/")
  ;;                         ("gnu" . "http://elpa.gnu.org/packages/")
  ;;                         ("nongnu" . "https://elpa.nongnu.org/nongnu/"))

  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))
  ;; (add-to-list 'package-archives
  ;;              '("melpa-stable" . "https://stable.melpa.org/packages/"))
  (add-to-list 'package-archives
               '("org" . "https://orgmode.org/elpa/"))
  (add-to-list 'package-archives
               '("gnu" . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives
               '("nongnu" . "https://elpa.nongnu.org/nongnu/"))

  ;; Un-comment below line if you follow "Install stable version in easiest way"
  (setq package-archives '(("myelpa" . "~/myelpa/")))

  (setq package-check-signature nil) ; 个别时候会出现签名校验失败

  ;; Initialize packages
  ;; (unless (bound-and-true-p package--initialized) ; To avoid warnings in 27
  ;;   (setq package-enable-at-startup nil)          ; To prevent initializing twice
  ;;   (package-initialize))

  (unless (bound-and-true-p package--initialized)
    (package-initialize))

  ;; Setup `use-package'
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  ;; Should set before loading `use-package'
  ;; make use-package default behavior better
  ;; with `use-package-always-ensure' you won't need ":ensure t" all the time
  ;; with `use-package-always-defer' you won't need ":defer t" all the time
  (setq use-package-always-ensure t
        use-package-always-defer t
        use-package-enable-imenu-support t
        use-package-expand-minimally t)

  (require 'use-package)


      ;;;###autoload
  (defun my-ensure (feature)
    "Make sure FEATURE is required."
    (unless (featurep feature)
      (condition-case nil
          (require feature)
        (error nil))))

  ;; On-demand installation of packages
  (defun require-package (&rest packages)
    "Ensure PACKAGES are installed.
   If a package is not installed, it will be installed automatically."
    (dolist (package packages)
      (unless (package-installed-p package)
        (package-install package)))
    (use-package package)
    )

  ;; Compatibility
  (use-package compat :demand t)
#+end_src

*** 加载特定嘅设定文件
:PROPERTIES:
:CUSTOM_ID: load-file-settings
:END:
<<load-file-settings>>

=suk.el= 係由 =M-x org-babel-tangle= (=C-c C-v t=) 命令生成嘅。

*关于 Org 更新嘅贴士:* 我鍾意從已檢出的源代碼運行 Org Mode，而唔係用
package.el。我會將 Lisp 目錄加入我嘅 =load-path= ，同時我都會喺第一次
=use-package org= 呼叫中使用 =:load-path= 選項嚟設置加載路徑。其中一個可能
係有效嘅，另一個可能係多餘嘅，但可能係一種「皮帶加吊帶」嘅做法。由於我
通過 =org-babel-tangle= 生成 =suk.el= ，所以我嘅 Emacs 配置可以喺唔需要先
加載 Org 嘅情況下加載 =suk.el= 。
#+begin_src emacs-lisp :tangle init.el :eval never-export
  (load-file (expand-file-name "suk.el" suk-emacs-root-dir))

  (unless (server-running-p) (server-start))

  (run-with-idle-timer
   1
   nil
   #'(lambda()
     (require 'load-abbrev)
     ))
  ;; chmod +x
  ;; ref. http://th.nao.ac.jp/MEMBER/zenitani/elisp-j.html#chmod
  (add-hook 'after-save-hook'executable-make-buffer-file-executable-if-script-p)
  (autoload 'calendar "init-calendar" "Config Chinese calendar " t)
  ;; Hanlde minified code
     (if emacs/>=27p (add-hook 'after-init-hook #'global-so-long-mode))
  (when sys/linuxp
    (load-file (expand-file-name "linux.el" suk-emacs-root-dir)))
  (when sys/win32p
     (load-file (expand-file-name "windows.el" suk-emacs-root-dir)))
   (when sys/macp
       (load-file (expand-file-name "mac.el" suk-emacs-root-dir)))
#+END_SRC

** 调试贴士
如果啲嘢壞咗，我可以用：

- ~check-parens~ 嚟搵唔啱嘅括號
- package: *bug-hunter* 將我嘅配置分成兩半
- ~trace-function-background~ 將資訊列印到緩衝區
- ~profiler-start~ 嚟搵多啲有關慢函數嘅資訊
* 我嘅設定
** 個人信息
:PROPERTIES:
:CUSTOM_ID: setup-personal-info
:END:
<<setup-personal-info>>

#+begin_src emacs-lisp :tangle suk.el :eval never-export
  (setq user-full-name "Suk")
  (setq user-mail-address "bruceasu@gmail.com")
#+end_src
** 載入自訂設定
:PROPERTIES:
:CUSTOM_ID: setup-custom
:END:
<<setup-custom>>

#+begin_src emacs-lisp :tangle suk.el :eval never-export
  ;; set const
  (defconst custom-template-file
    (expand-file-name "custom-template.el" user-emacs-directory)
    "Custom template file of Suk's Emacs.")

  (defconst suk-homepage
    "https://github.com/bruceasu/.emacs.d"
    "The Github page of this Emacs config.")


  (defgroup suk nil
    "suk Emacs customizations."
    :group 'convenience
    :link '(url-link :tag "Homepage" "https://github.com/bruceasu/.emacs.d"))

  (defcustom suk-icon t
    "Display icons or not."
    :group 'suk
    :type 'boolean)

  (defcustom org-roam-directory (expand-file-name "RoamNotes" user-home-dir)
    "The org roam directory."
    :group 'suk
    :type 'string)

  (defcustom org-files-directory (expand-file-name "org" user-home-dir)
    "The org roam directory."
    :group 'suk
    :type 'string)

  (defcustom my-org-inline-css-file "~/.emacs.d/share/my-org-style-min.css"
    "The org css style file."
    :group 'suk
    :type 'string)



  (defcustom suk-prettify-symbols-alist
    '(("lambda" . ?λ)
      ("<-"     . ?←)
      ("->"     . ?→)
      ("->>"    . ?↠)
      ("=>"     . ?⇒)
      ("map"    . ?↦)
      ("/="     . ?≠)
      ("!="     . ?≠)
      ("=="     . ?≡)
      ("<="     . ?≤)
      (">="     . ?≥)
      ("=<<"    . (?= (Br . Bl) ?≪))
      (">>="    . (?≫ (Br . Bl) ?=))
      ("<=<"    . ?↢)
      (">=>"    . ?↣)
      ("&&"     . ?∧)
      ("||"     . ?∨)
      ("not"    . ?¬))
    "A list of symbol prettifications. Nil to use font supports ligatures."
    :group 'suk
    :type '(alist :key-type string :value-type (choice character sexp)))

  (defcustom suk-prettify-org-symbols-alist
    '(("[ ]"            . ?)
      ("[-]"            . ?)
      ("[X]"            . ?)

      ;; (":PROPERTIES:"   . ?)
      ;; (":ID:"           . ?🪪)
      ;; (":END:"          . ?🔚)

      ;; ("#+ARCHIVE:"     . ?📦)
      ;; ("#+AUTHOR:"      . ?👤)
      ;; ("#+CREATOR:"     . ?💁)
      ;; ("#+DATE:"        . ?📆)
      ;; ("#+DESCRIPTION:" . ?⸙)
      ;; ("#+EMAIL:"       . ?📧)
      ;; ("#+HEADERS"      . ?☰)
      ;; ("#+OPTIONS:"     . ?⚙)
      ;; ("#+SETUPFILE:"   . ?⚒)
      ("#+TAGS:"        . ?🏷)
      ("#+TITLE:"       . ?📓)

      ("#+BEGIN_SRC"    . ?✎)
      ("#+END_SRC"      . ?□)
      ("#+BEGIN_QUOTE"  . ?«)
      ("#+END_QUOTE"    . ?»)
      ("#+RESULTS:"     . ?💻)
      )
    "A list of symbol prettifications for `org-mode'."
    :group 'suk
    :type '(alist :key-type string :value-type (choice character sexp)))


  ;; Load `custom-file'
  ;; If it doesn't exist, copy from the template, then load it.
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

  (let ((custom-template-file
         (expand-file-name "custom-template.el" user-emacs-directory)))
    (if (and (file-exists-p custom-template-file)
             (not (file-exists-p custom-file)))
        (copy-file custom-template-file custom-file)))

  (if (file-exists-p custom-file)
      (load custom-file))

  ;; Load `custom-post.el'
  ;; Put personal configurations to override defaults here.
  (add-hook 'after-init-hook
            (lambda ()
              (let ((file
                     (expand-file-name "custom-post.el" user-emacs-directory)))
                (if (file-exists-p file)
                    (load file)))))
#+end_src

* Editor setting
:PROPERTIES:
:CUSTOM_ID: setup-editor
:END:
<<setup-editor>>

** 基本設定
:PROPERTIES:
:CUSTOM_ID: setup-basic
:END:
<<setup-basic>>

#+begin_src emacs-lisp :tangle suk.el :eval never-export
  ;; basic settings
  (setq-default
   major-mode 'text-mode ; 默认使用text模式
   cursor-type 'bar      ; 设置光标样式
   tab-width 4           ; tab 的宽度为 4 空格
   indent-tabs-mode nil  ; 永久使用空格縮排，唔好用 TAB 只係用空格代替
                         ; TAB，使用 C-q TAB 來輸入 TAB 字符
   )
  (tooltip-mode -1)                          ;不要显示任何 tooltips
  (delete-selection-mode 1)                  ; 选中文本后输入会覆盖
  (size-indication-mode 1)
  (server-mode 1)
  (global-hl-line-mode 1)                    ;高亮当前行
  (put 'narrow-to-region 'disabled nil)      ;开启变窄区域
  (auto-compression-mode 1)                  ;打开压缩文件时自动解压缩
  (show-paren-mode t)                        ;显示括号匹配
  ;;(blink-cursor-mode -1)
  (setq inhibit-startup-message t)           ; 关闭启动欢迎界面
  ;; (setq initial-scratch-message nil)      ; 清空 *scratch* 缓冲区信息
  (setq inhibit-startup-echo-area-message t) ; 关闭启动时回显区的提示信息


  (setq read-process-output-max #x10000)  ; 64kb.  Increase how much is read from processes in a single chunk (default is 4kb)
  (setq vc-follow-symlinks t)
  (setq font-lock-maximum-decoration t)

  (setq adaptive-fill-regexp "[ t]+|[ t]*([0-9]+.|*+)[ t]*")
  (setq adaptive-fill-first-line-regexp "^* *$")
  (setq set-mark-command-repeat-pop t) ; Repeating C-SPC after popping mark pops it again
  (setq sentence-end "\\([。！？￥%×（）—]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*") ; 测定句子结束识别同埋标点，不用在 `fill` 时，再句号后插入 2 个空行。
  (setq sentence-end-double-space nil)
  (add-hook 'after-change-major-mode-hook (lambda ()(modify-syntax-entry ?_ "w"))) ;; 让 `_` 被视为单词嘅组成部分
  (add-hook 'after-change-major-mode-hook (lambda () (modify-syntax-entry ?- "w"))) ;; `-` 符号同样
  (setq suggest-key-bindings 1)             ;当使用 M-x COMMAND 后，过 1 秒钟显示该 COMMAND 绑定的键。
  (setq browse-kill-ring-quit-action        ;设置退出动作
        (quote save-and-restore))           ;保存还原窗口设置
  (setq max-lisp-eval-depth 40000)          ;lisp最大执行深度
  (setq max-specpdl-size 10000)             ;最大容量
  (setq kill-ring-max 1024)                 ;用一个很大的 kill ring. 这样防止我不小心删掉重要的东西
  (setq mark-ring-max 1024)                 ;设置的mark ring容量
  (setq eval-expression-print-length nil)   ;设置执行表达式的长度没有限制
  (setq eval-expression-print-level nil)    ;设置执行表达式的深度没有限制
  (setq read-quoted-char-radix 16)          ;设置 引用字符 的基数
  (setq global-mark-ring-max 1024)          ;设置最大的全局标记容量
  (setq isearch-allow-scroll t)             ;isearch搜索时是可以滚动屏幕的
  (setq enable-recursive-minibuffers t)     ;minibuffer 递归调用命令
  (setq history-delete-duplicates t)        ;删除minibuffer的重复历史
  (setq minibuffer-message-timeout 2)       ;显示消息超时的时间
  (setq auto-revert-mode 1)                 ;自动更新buffer
  (setq show-paren-style 'parentheses)      ;括号匹配显示但不是烦人的跳到另一个括号。
  ;;(setq blink-matching-paren nil)           ;当插入右括号时不显示匹配的左括号
  (setq message-log-max t)                  ;设置message记录全部消息, 而不用截去
  (setq require-final-newline nil)          ;不自动添加换行符到末尾, 有些情况会出现错误
  (setq ediff-window-setup-function
        (quote ediff-setup-windows-plain))  ;比较窗口设置在同一个frame里
  (setq x-stretch-cursor t)                 ;光标在 TAB 字符上会显示为一个大方块
  (setq print-escape-newlines t)            ;显示字符窗中的换行符为 \n
  (setq tramp-default-method "ssh")         ;设置传送文件默认的方法
  (setq void-text-area-pointer nil)         ;禁止显示鼠标指针
  (setq auto-window-vscroll nil)            ;关闭自动调节行高
  (setq mouse-yank-at-point nil)            ;让光标无法离开视线
  (setq kill-whole-line t)                  ; C-k deletes the end of line
  (setq delete-by-moving-to-trash t)        ; Deleting files go to OS's trash folder
  (setq track-eol t)                        ; Keep cursor at end of lines. Require line-move-visual is nil.
  (setq line-move-visual nil)
  (setq save-interprogram-paste-before-kill t) ; Save clipboard contents into kill-ring before replace them
  ;;(setq auto-save-default nil)            ; Disable auto save
  (setq echo-keystrokes 0.1)                ;加快快捷键提示的速度

  ;; Hanlde minified code
  (if emacs/>=27p
      (add-hook 'after-init-hook #'global-so-long-mode))

  ;; 如果有两个重名buffer, 则再前面加上路径区别
  (require 'uniquify)
  (with-eval-after-load 'uniquify
    ;; (setq uniquify-buffer-name-style 'forward)
    (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
    )
  ;; Misc
  (if (boundp 'use-short-answers)
      (setq use-short-answers t)
    (fset 'yes-or-no-p 'y-or-n-p))


#+end_src
** 備份設定
:PROPERTIES:
:CUSTOM_ID: setup-backup
:END:
<<setup-backup>>

#+begin_src emacs-lisp :tangle suk.el :eval never-export
  ;; backup settings
  (setq make-backup-files t)
  (setq version-control t)     ; 允许多次备份
  (setq kept-old-versions 2)   ; 保留最早的2个备份文件
  (setq kept-new-version 100)  ; 保留最近的100个备份文件
  (setq delete-old-versions t) ; 自动删除旧的备份文件
#+end_src
** 歴史
:PROPERTIES:
:CUSTOM_ID: setup-history
:END:
<<setup-history>>

#+begin_src emacs-lisp :tangle suk.el
  ;;saveplace
  (setq save-place-file (expand-file-name "saveplace" suk-emacs-var-dir)) ; "~/.emacs.d/var/saveplace"
  (save-place-mode 1)
  ;;If emacs is slow to exit after enabling saveplace, you may be
  ;;running afoul of save-place-forget-unreadable-files. On exit,
  ;;it checks that every loaded file is readable before saving its
  ;;buffer position - potentially very slow if you use NFS.
  (setq save-place-forget-unreadable-files nil)

  (use-package saveplace
    :ensure nil
    :hook (after-init . save-place-mode))

  (setq enable-recursive-minibuffers t ; Allow commands in minibuffers
        history-length 1000
        savehist-additional-variables '(mark-ring
                                        global-mark-ring
                                        search-ring
                                        regexp-search-ring
                                        extended-command-history)
        savehist-autosave-interval 300
        savehist-file (expand-file-name "history" suk-emacs-var-dir) ; "~/.emacs.d/var/history"
        )
  (savehist-mode 1)
#+end_src
** 編碼設定
:PROPERTIES:
:CUSTOM_ID: setup-charset
:END:
<<setup-charset>>
#+begin_src emacs-lisp :tangle suk.el
  ;; Set UTF-8 as the default coding system
  (prefer-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)            ;缓存文件编码
  (setq default-file-name-coding-system 'utf-8)              ;文件名编码
  (setq default-keyboard-coding-system 'utf-8)               ;键盘输入编码
  (setq default-process-coding-system '(utf-8 . utf-8))      ;进程输出输入编码
  (setq default-sendmail-coding-system 'utf-8)               ;发送邮件编码
  (setq default-terminal-coding-system 'utf-8)               ;终端编码


  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8)

  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)

  (setq buffer-file-coding-system 'utf-8)
  (setq session-save-file-coding-system 'utf-8)

  (set-language-environment "UTF-8")

  ;; 重要提示:写在最后一行的，实际上最优先使用; 最前面一行，反而放到最后才识别。
  ;; utf-16le-with-signature 相当于 Windows 下的 Unicode 编码，这里也可写成
  ;; utf-16 (utf-16 ham:  utf-16le, utf-16be, utf-16le-with-signature dang)
  ;; Unicode
  ;; (prefer-coding-system 'utf-16le-with-signature)
  ;; (prefer-coding-system 'utf-16)
  ;; (prefer-coding-system 'utf-8-dos)
  (prefer-coding-system 'utf-8)
#+end_src
** 通用函数
:PROPERTIES:
:CUSTOM_ID: setup-common-functions
:END:
<<setup-coommon-functions>>

#+begin_src emacs-lisp :tangle suk.el :eval never-export
  ;; -*- coding: utf-8; lexical-binding: t; -*-
  (defun suk/wait-for-modules (callback &rest modules)
    "Wait for MODULES to be loaded and then call CALLBACK."
    (let ((all-loaded nil))
      (dolist (module modules)
        (with-eval-after-load module
          (setq all-loaded t)))
      (if all-loaded
          (funcall callback)
        (add-hook 'after-load-functions
                  (lambda ()
                    (when (cl-every #'featurep modules)
                      (funcall callback)))))))

  ;;;###autoload
  (defun run-cmd-and-replace-region (cmd)
    "Run CMD in shell on selected region or current buffer.
  Then replace the region or buffer with cli output."
    (let* ((orig-point (point))
           (b (if (region-active-p) (region-beginning) (point-min)))
           (e (if (region-active-p) (region-end) (point-max))))
      (shell-command-on-region b e cmd nil t)
      (goto-char orig-point)))


  ;;;###autoload
  (defun my-buffer-str ()
    (buffer-substring-no-properties (point-min) (point-max)))

  ;; 使用示例
  ;;(wait-for-modules
  ;; 'my-callback-function
  ;; 'module1
  ;; 'module2
  ;; 'module3)

  (defmacro suk/timer (&rest body)
    "Measure the time of code BODY running."
    `(let ((time (current-time)))
       ,@body
       (float-time (time-since time))))

  ;;;###autoload
  (defun icons-displayable-p ()
    "Return non-nil if icons are displayable."
    (and suk-icon
         (or (featurep 'nerd-icons)
             (require 'nerd-icons nil t))))
  ;;;###autoload
  (defun suk-treesit-available-p ()
    "Check whether tree-sitter is available.
  Native tree-sitter is introduced since 29.1."
    (and (fboundp 'treesit-available-p)
         (treesit-available-p)))
  ;;;###autoload
  (defun too-long-file-p ()
    "Check whether the file is too long."
    (or (> (buffer-size) 100000)
        (and (fboundp 'buffer-line-statistics)
             (> (car (buffer-line-statistics)) 10000))))

  ;; {{ copied from http://ergoemacs.org/emacs/elisp_read_file_content.html
  ;;;###autoload
  (defun my-get-string-from-file (file)
    "Return FILE's content."
    (with-temp-buffer
      (insert-file-contents file)
      (buffer-string)))
  
  ;;;###autoload
  (defun my-read-lines (file)
    "Return a list of lines of FILE."
    (split-string (my-get-string-from-file file) "\n" t))
  ;; }}

  ;;;###autoload
  (defun path-in-directory-p (file directory)
    "FILE is in DIRECTORY."
    (let* ((pattern (concat "^" (file-name-as-directory directory))))
      (if (string-match pattern file) file)))


  ;;;###autoload
  (defun my-send-string-to-cli-stdin (string program)
    "Send STRING to cli PROGRAM's stdin."
    (with-temp-buffer
      (insert string)
      (call-process-region (point-min) (point-max) program)))

  ;;;###autoload
  (defun my-write-string-to-file (string file)
    "Write STRING to FILE."
    (with-temp-buffer
      (insert string)
      (write-region (point-min) (point-max) file)))

  ;;;###autoload
  (defun my-async-shell-command (command)
    "Execute string COMMAND asynchronously."
    (let* ((proc (start-process "Shell"
                                nil
                                shell-file-name
                                shell-command-switch command)))
      (set-process-sentinel proc `(lambda (process signal)
                                    (let* ((status (process-status process)))
                                      (when (memq status '(exit signal))
                                        (unless (string= (substring signal 0 -1) "finished")
                                          (message "Failed to run \"%s\"." ,command))))))))

  (defvar my-disable-idle-timer (daemonp)
    "Function passed to `my-run-with-idle-timer' is run immediately.")
  (defun my-run-with-idle-timer (seconds func)
    "After SECONDS, run function FUNC once."
    (cond
     (my-disable-idle-timer
      (funcall func))
     (t
      (run-with-idle-timer seconds nil func))))

#+end_src

** Lazy Load
:PROPERTIES:
:CUSTOM_ID: setup-lazy-load
:END:
<<setup-lazy-load>>

- 全局 lazy-load-global-keys
- 模式 lazy-load-local-keys

支持最后一个参数传递前缀按键，

如果 Emacs 默认已经加载咗某个插件，而唔需要喺运行时动态加载，都可以使
用 lazy-load-set-keys

好多全局按键默认已经被 Emacs 占用咗，必须先卸载先可以重新绑定啲全局按
键，例如 Ctrl + x，下面呢段代码就系用 lazy-load-unset-keys 卸载默认绑
定嘅全局按键。

#+begin_example
 ;;; --- 卸载按键
 (lazy-load-unset-keys ;全局按键的卸载
  '("C-z" "C-x"  "s-W" "s-z" "M-h" "C-\\" "s-c" "s-x" "s-v"))

 ;; Mac平台下交换 Option 和 Command 键。

  (when (featurep 'cocoa)
    (setq mac-option-modifier 'super)
    (setq mac-command-modifier 'meta))

#+end_example

#+begin_src emacs-lisp :tangle etc/init-key.el
  (require 'lazy-load)
  (provide 'init-key)
  ;;; ### Unset key ###
  ;;; --- 卸载按键
  (lazy-load-unset-keys                   ;全局按键的卸载
   ;; '("C-z"  "s-W" "s-z" "M-h" "C-\\" "s-c" "s-x" "s-v"))
   '("C-z" ))

#+end_src
Add to suk.el
#+begin_src emacs-lisp :tangle suk.el
  (require 'init-key)
#+end_src

** how to set keys
*** Bindkeys examples
#+begin_src emacs-elisp :tangle achrives-and-examples.el
global-set-key examples:
(global-set-key (kbd "C-x C-\\") 'next-line)
(global-set-key [?\C-x ?\C-\\] 'next-line)
(global-set-key [(control ?x) (control ?\\)] 'next-line)

(define-prefix-command 'my-leader) ;设定leader
(define-key keymap "keystrok" 'command-name)   ;将快捷键绑定到 leader按键后，即和键位图绑定。
(global-set-key "keystroke" 'command-name) ; 定义全局快捷键
(local-set-key  "keystroke" 'command-name) ; 定义局部快捷键
;;注意：keystroke中的Control 和 Alternative使用\C, \M表示。
;;如果是kbd函数，可以使用C和M表示

;; 方式一：
(define-prefix-command 'SPC-map)
(global-set-key (kbd "SPC") 'SPC-map)
(global-set-key (kbd "SPC f") 'find-file)

;; 方式二：
(define-prefix-command 'SPC-map)
(global-set-key (kbd "SPC") #'SPC-map)
(define-key SPC-map (kbd "f") #'find-file)


;; 演示了如何定义一个新的按键前缀. 这里定义了M-c作为按键前缀.
(define-prefix-command 'comma-map)
(global-set-key (kbd ",") 'comma-map)
(global-set-key [(meta c)] 'meta-c-map)
;; 演示了如何在一个模式下(这里是isearch模式), 定义快捷键.
;; 退出isearch-mode, 所有按键失效.
(add-hook
  'isearch-mode-hook
  '(lambda ()
    ;; 搜索下一个结果
    (define-key isearch-mode-map [(meta n)] 'isearch-repeat-forward)
    ;; 搜索前一个结果
    (define-key isearch-mode-map [(meta p)] 'isearch-repeat-backward)
    ;; 替换
    (define-key isearch-mode-map [(control r)] 'isearch-query-replace)
    ;; 正则替换
    (define-key isearch-mode-map [(meta 5)] 'isearch-query-replace-regexp)
    (define-key isearch-mode-map [(meta f)] 'isearch-yank-word-or-char)
    ;; 剪切板作为搜索内容
    (define-key isearch-mode-map [(meta y)] 'isearch-yank-kill)
    ;; 将光标到行尾作为搜索内容
    (define-key isearch-mode-map [(meta k)] 'isearch-yank-line)
    (define-key isearch-mode-map [(hyper l)] 'isearch-yank-char)
    ;; 向左或向右(选择/取消)单个字符作为搜索内容
    (define-key isearch-mode-map [(hyper j)] 'isearch-delete-char)
    ;; 显示occur视图
    (define-key isearch-mode-map [(meta o)] 'isearch-occur)
    ;; 单词搜索
    (define-key isearch-mode-map [(meta w)] 'isearch-forward-word)
    (define-key isearch-mode-map [(meta s)] 'isearch-repeat-forward)
    ))

#+END_SRC
*** Global keys
#+begin_src emacs-lisp :tangle suk.el
  ;; 一啲方便嘅函数
  (global-set-key (kbd "C-x M-a") 'align-regexp)  ;; 快捷键 C-x M-a 用于对齐正则表达式
  (global-set-key (kbd "C-(") 'backward-sexp)     ;; 快捷键 C-( 用于向后跳跃到上一个 sexp
  (global-set-key (kbd "C-)") 'forward-sexp)      ;; 快捷键 C-) 用于向前跳跃到下一个 sexp
  (global-set-key (kbd "C-x t T") 'suk/toggle-transparency)  ;; 快捷键 C-x t T 用于切换透明度
  (global-set-key (kbd "C-x t p") 'suk/toggle-toggle-proxy)  ;; 快捷键 C-x t p 用于切换代理
  (global-set-key (kbd "C-x t f") 'global-flycheck-mode)     ;; 快捷键 C-x t f 用于开启全局语法检查
  (global-set-key (kbd "C-x R") 'recentf-open)   ;; 快捷键 C-x R 用于打开最近文件
  (global-set-key (kbd "C-<f11>") 'toggle-frame-fullscreen)  ;; 快捷键 C-<f11> 用于切换全屏模式
  (keymap-set global-map "M-s-<return>" 'toggle-frame-fullscreen)  ;; 快捷键 M-S-<return> 也用于切换全屏模式
  (keymap-set global-map "RET" 'newline-and-indent)  ;; 回车键 RET 用于创建新行并对齐
  (keymap-set global-map "S-<return>" 'comment-indent-new-line)  ;; Shift + 回车键用于取消对齐创建的新行

#+end_src
*** Set keys
直接定义全局快捷键：
:  (global-set-key (kbd "C-c n d") #'denote)

自己定义 keymap 其实很简单的，使用 defvar-keymap ，可以从上面的配置中
抽取 C-c n 作为一个 prefix key ，定义如下：
#+begin_src emacs-lisp :tangle suk-unload.el
  (defvar-keymap hsk/notetaking-map
  :doc "My notetaking keymap"
  "d" #'denote
  "t" #'denote-keywords-add
  "T" #'denote-keywords-remove)
#+end_src

然后就可以用：
: (global-set-key (kbd "C-c n") hsk/notetaking-map)

来将上面定义的 keymap 绑定到 C-c n 上。不过从 emacs-29 开始，更推荐用
keymap-set ，上面的代码可以改成：
: (keymap-set global-map "C-c n" hsk/notetaking-map)

省去了 (kbd ...) 这一层，比较方便。

比起原先每个快捷键单独定义，使用 keymap 好处是便于管理，比如之后我想更
换快捷键前缀，从 C-c n 换成 C-c C-n ，只要改一处 keymap-set 就可以了。

另一个优点是可以嵌套定义，比如我想要将 org-journal 相关的操作也挂到
hsk/notetaking-map 下面，可以先定义一个 hsk/org-journal-map：
#+BEGIN_EXAMPLE
  (defvar-keymap hsk/org-journal-map
  :doc "My org-journal keymap"
  "n" #'org-journal-new-entry
  "s" #'org-journal-search
  "o" #'org-journal-open-current-journal-file)
#+END_EXAMPLE


然后将它嵌套进另一个 map 下面：
#+BEGIN_EXAMPLE
  (defvar-keymap hsk/notetaking-map
  :doc "My notetaking keymap"
  ;;...
  "j" hsk/org-journal-map)
#+END_EXAMPLE

这样 org-journal-new-entry 就映射到 C-c n j n 上了，非常优雅。


: (let ((my-keymap (make-sparse-keymap))) ; 创建一个空的 keymap
:  (keymap-set my-keymap "C-c f" 'find-file)) ; 设置 C-c f 来执行 'find-file 命令
: (keymap-local-set "C-p" ctl-x-map)


*** bind-keys
是由 use-package 宏提供的一个功能，允许在一个声明中绑定多个
键。虽然bind-keys 可以独立于 use-package 使用，但它通常与 use-package
结合使用，以提供更清晰和模块化的键绑定配置。
#+begin_src emacs-lisp :tangle suk.el
  (use-package bind-key)
  ;;(bind-key "C-c x" #'some-function some-package-mode-map)
  ;;(bind-key "C-c y" #'another-function)

  ;; Toggle fullscreen <F11> also bind to fullscreen
  (bind-keys ("C-<f11>" . toggle-frame-fullscreen)
             ("C-S-f" . toggle-frame-fullscreen) ; Compatible with macOS
             ("M-S-<return>" . toggle-frame-fullscreen) ; Compatible with Windos
             )
#+end_src

** Move cursor

#+begin_src emacs-lisp :tangle suk.el
     ;;; ### goto-line-preview ###
     (lazy-load-global-keys
      '(
        ("M-g p" . goto-line-preview))
      "goto-line-preview")

     ;;; ### Ace jump ###
     (lazy-load-global-keys
      '(
        ("C-c w" . ace-jump-word-mode)
        ("C-c c" . ace-jump-char-mode)
        ("C-c l" . ace-jump-line-mode)
        )
      "ace-jump-mode"
      "C-z"
      )

     ;; Jump to Chinese characters
     (run-with-idle-timer
      1
      nil
      #'(lambda()     
          (use-package ace-pinyin
            :diminish
            :hook (after-init . ace-pinyin-global-mode))
          (require 'goto-chg)
          ))


#+end_src
** Move text
#+begin_src emacs-lisp :tangle etc/init-key.el
  ;; ### move text ###
  (lazy-load-global-keys
   '(
     ("M-S-n" . move-text-down) ;把光标所在的整行文字(或标记)下移一行
     ("M-S-p" . move-text-up)   ;把光标所在的整行文字(或标记)上移一行
     ("M-<DOWN>" . move-text-down)    ;把光标所在的整行文字(或标记)下移一行
     ("M-<UP>"   . move-text-up)    ;把光标所在的整行文字(或标记)上移一行
     )
   "move-text")
#+end_src

** Open new line
#+begin_src emacs-lisp :tangle etc/init-key.el
  ;;; ### open new line ###
  (lazy-load-global-keys
   '(
     ("C-o" . open-newline-above) ;在上面一行新建一行
     ("C-l" . open-newline-below) ;在下面一行新建一行
     )
   "open-newline")
#+end_src
** Duplicate line
#+begin_src emacs-lisp :tangle etc/init-key.el
  ;; ### duplicate-line ###
  (lazy-load-global-keys
   '(
     ("C-S-o" . duplicate-line-or-region-above) ;向上复制当前行或区域
     ("C-S-l" . duplicate-line-or-region-below) ;向下复制当前行或区域
     ("C-S-s-o" . duplicate-line-above-comment) ;复制当前行到上一行, 并注释当前行
     ("C-S-s-l" . duplicate-line-below-comment) ;复制当前行到下一行, 并注释当前行
     ("C-:" . comment-or-uncomment-region+)     ;注释当前行

     )
   "duplicate-line")
#+end_src
** Delete block
#+begin_src emacs-lisp :tangle etc/init-key.el
  ;;; ### Delete block ###
  ;;; --- 快速删除光标左右的内容
  (lazy-load-global-keys
   '(
     ("M-," . delete-block-backward)
     ("M-." . delete-block-forward))
   "delete-block")
#+end_src
** Hungry delete
#+begin_src emacs-lisp :tangle suk-unload.el
  ;; hungry-delete
  (run-with-idle-timer
   2 nil
   #'(lambda()
       (require-package 'hungry-delete)
       (require 'hungry-delete)
       (with-eval-after-load 'hungry-delete
         (setq hungry-delete-chars-to-skip " \t\f\v"
               hungry-delete-except-modes
               '(help-mode
                 minibuffer-mode
                 minibuffer-inactive-mode
                 calc-mode))
         ;; Delete
         (global-set-key (kbd "C-c <backspace>") #'hungry-delete-backward)
         (global-set-key (kbd "C-c <delete>") #'hungry-delete-forward)
         )))
#+end_src
** Word styles
#+begin_src emacs-lisp :tangle etc/init-key.el
  ;; ### String Inflection ###
  ;; --- 单词语法风格快速转换
  (lazy-load-global-keys
   '(
     ("C-c C-u" . string-inflection-hydra/body)
     )
   "init-string-inflection")
#+end_src
** Thing edit
#+begin_src emacs-lisp :tangle etc/init-key.el
  ;;; ### Thing-edit ###
  ;;; --- 增强式编辑当前光标的对象
  (lazy-load-global-keys
   '(
     ("C-c w" . thing-copy-word)
     ("C-c s" . thing-copy-symbol)
     ("C-c m" . thing-copy-email)
     ("C-c f" . thing-copy-filename)
     ("C-c u" . thing-copy-url)
     ("C-c x" . thing-copy-sexp)
     ("C-c g" . thing-copy-page)
     ("C-c t" . thing-copy-sentence)
     ("C-c o" . thing-copy-witespace)
     ("C-c i" . thing-copy-list)
     ("C-c c" . thing-copy-comment)
     ("C-c h" . thing-copy-defun)
     ("C-c p" . thing-copy-parentheses)
     ("C-c l" . thing-copy-line)
     ("C-c a" . thing-copy-to-line-begining)
     ("C-c e" . thing-copy-to-line-end)
     ("C-c W" . thing-cut-word)
     ("C-c S" . thing-cut-symbol)
     ("C-c M" . thing-cut-email)
     ("C-c F" . thing-cut-filename)
     ("C-c G" . thing-cut-page)
     ("C-c T" . thing-cut-sentence)
     ("C-c O" . thing-cut-whitespace)
     ("C-c I" . thing-cut-list)
     ("C-c C" . thing-cut-comment)
     ("C-c H" . thing-cut-defun)
     ("C-c P" . thing-cut-parentheses)
     ("C-c L" . thing-cut-line)
     ("C-c A" . thing-cut-to-line-beginning)
     ("C-c E" . thing-cut-to-line-end)
     )
   "thing-edit"
   "C-z"
   )
#+end_src

** Buffer Edit
#+begin_src emacs-lisp :tangle etc/init-key.el
  ;; ### Buffer Edit ###
  ;; --- 缓存编辑
    (lazy-load-set-keys
     '(
       ("C-x C-x" . exchange-point-and-mark)   ;交换当前点和标记点
       ("M-o" . backward-delete-char-untabify) ;向前删除字符
       ("C-M-S-h" . mark-paragraph)            ;选中段落
       ("M-SPC" . just-one-space)              ;只有一个空格在光标处
       ))
#+end_src
** Basic Toolkit
#+begin_src emacs-lisp :tangle etc/init-key.el
  ;;; ### basic-toolkit ###
  (lazy-load-global-keys
   '(
     ("M-s-n" . comment-part-move-down)   ;向下移动注释
     ("M-s-p" . comment-part-move-up)     ;向上移动注释
     ("C-s-n" . comment-dwim-next-line)   ;移动到上一行并注释
     ("C-s-p" . comment-dwim-prev-line)   ;移动到下一行并注释
     ("M-2" . indent-buffer)              ;自动格式化当前Buffer
     ("M-z" . upcase-char)                ;Upcase char handly with capitalize-word
     ;;("C-x u" . mark-line)              ;选中整行
     ("s-k" . kill-and-join-forward)      ;在缩进的行之间删除
     ("M-G" . goto-column)                ;到指定列
     ("C->" . remember-init)              ;记忆初始函数
     ("C-<" . remember-jump)              ;记忆跳转函数
     ("M-s-," . point-stack-pop)          ;buffer索引跳转
     ("M-s-." . point-stack-push)         ;buffer索引标记
     ("s-g" . goto-percent) ;跳转到当前Buffer的文本百分比, 单位为字符
     ("M-I" . backward-indent)            ;向后移动4个字符
                                          ;   ("s-J" . scroll-up-one-line)         ;向上滚动一行
                                          ;   ("s-K" . scroll-down-one-line)       ;向下滚动一行
     ("<f2>" . refresh-file)              ;自动刷新文件
     ("s-f" . find-file-root)             ;用root打开文件
     ("s-r" . find-file-smb)              ;访问sambao
     ("C-S-j" . join-lines)               ;连接下行
     ("M-j"   . join-line)                ;连接上行
     ("M-c" . endless/capitalize)
     ("M-l" . endless/downcase)
     ("M-u" . endless/upcase)
     )
   "basic-toolkit")
#+end_src
** Insert translated name
#+begin_src emacs-lisp :tangle suk-unload.el
  ;;; ### Insert translated name ###
  ;; youdao / google
  (setq insert-translated-name-translate-engine "google")
  (lazy-load-global-keys
   '(
     ("," . insert-translated-name-insert-with-underline)
     ("." . insert-translated-name-insert-with-camel)
     ("/" . insert-translated-name-insert)
     )
   "insert-translated-name"
   "C-z"
   )
#+end_src
** Sudo
#+begin_src emacs-lisp :tangle suk.el
  ;;; ### sudo ###
  (when sys/linuxp
    (lazy-load-global-keys
     '(("C-z C-s" . suk/sudo/body))
     "my-sudo"
     ))
#+end_src
** 有啲人钟意VI嘅绑定
#+begin_src emacs-lisp :tangle suk.el
  ;; vi like key binds
  ;; (require-package 'evil)
  ;; (require-package 'evil-escape)
  ;; (require-package 'evil-exchange)
  ;; (require-package 'evil-find-char-pinyin)
  ;; (require-package 'evil-mark-replace)
  ;; (require-package 'evil-matchit)
  ;; (require-package 'evil-nerd-commenter)
  ;; (require-package 'evil-surround)
  ;; (require-package 'evil-visualstar)
#+end_src
** Description Keys
=F1 + {f/k/d/i/k}= 或者  =C-h {f/k/d/i}= 可以打开相关帮助
Use ~C-c C-h~ to open the description menu 

#+begin_src emacs-lisp :tangle suk.el

;;;###autoload
(with-eval-after-load 'hydra
  (defhydra my-hydra-describe (:color blue :hint nil)
    "
Describe Something: (q to quit)
_a_ all help for everything screen
_b_ bindings
_c_ char
_C_ coding system
_f_ function
_i_ input method
_k_ key briefly
_K_ key
_l_ language environment
_m_ major mode
_M_ minor mode
_n_ current coding system briefly
_N_ current coding system full
_o_ lighter indicator
_O_ lighter symbol
_p_ package
_P_ text properties
_s_ symbol
_t_ theme
_v_ variable
_w_ where is something defined
"
	("b" describe-bindings)
	("C" describe-categories)
	("c" describe-char)
	("C" describe-coding-system)
	("f" describe-function)
	("i" describe-input-method)
	("K" describe-key)
	("k" describe-key-briefly)
	("l" describe-language-environment)
	("M" describe-minor-mode)
	("m" describe-mode)
	("N" describe-current-coding-system)
	("n" describe-current-coding-system-briefly)
	("o" describe-minor-mode-from-indicator)
	("O" describe-minor-mode-from-symbol)
	("p" describe-package)
	("P" describe-text-properties)
	("q" nil)
	("a" help)
	("s" describe-symbol)
	("t" describe-theme)
	("v" describe-variable)
	("w" where-is))
  (global-set-key (kbd "C-c C-h") 'my-hydra-describe/body))
#+end_src
** CRUX
一啲方便嘅函数。使用
: (use-package crux)
或者
: (package-install crux)
来安装依赖。

我已经使用咗其他一啲类似功能嘅函数，咁就冇必要再使用呢个工具包啦。

Add shortcuts.
#+begin_src emacs-lisp :tangle suk-unload.el
  ;; (use-package crux)
  (lazy-load-global-keys
   '(
     ;;文件操作:
     ;;("C-c r" . crux-rename-file) ; 重命名当前文件或目录。
     ("C-c k" . crux-rename-file-and-buffer)
     ;;("C-c r" . crux-recentf-find-file)
     ("C-c D"  . crux-delete-file-and-buffer) ;  删除当前文件并关闭相关缓冲区。
     ;; 行/区域操作:
     ;;crux-move-beginning-of-line: 将光标移动到行的开头。
     ;;crux-move-end-of-line: 将光标移动到行的末尾。
     ;;crux-top-join-line: 将当前行与上一行合并。

     ("C-S-k" . crux-kill-whole-line) ;; 剪切整行。
     ;;("C-J" .crux-kill-and-join-forward) ;;除当前行尾的空白字符，并与下一行合并。
     ;;复制/剪切/粘贴操作:
     ;;("C-l" . crux-smart-copy-line-above); 在当前行上方复制当前行。
     ;;("C-o" . crux-smart-copy-line-below);  在当前行下方复制当前行。
     ;;   缩进操作:

     ("C-c TAB" . crux-indent-defun) ;; 对当前函数或代码块重新缩进。
     ;; crux-cleanup-buffer-or-region ;; 清理缓冲区中选定区域或整个缓冲区中的尾随空格和空行。
     ;; 查找/替换操作:
     ;; crux-find-user-init-file ;; 快速打开 Emacs 用户配置文件。
     ;; crux-view-url ;; 在浏览器中查看当前 URL。
     ;; 其他实用功能:

     ("C-c ;" . crux-kill-other-buffers) ;;关闭所有除当前缓冲区外的其他缓冲区。
     ("C-M-k" . crux-kill-line-backwards) ;;向后删除整行内容（包括行尾换行符）。
     ;; crux-reopen-as-root-mode: 以 root 身份重新打开当前文件。

     )
   "crux"
   )

#+end_src
** Rectangle
- =C-x r k=  Kill the text of the region-rectangle, saving its contents as the last killed rectangle (kill-rectangle).
- =C-x r M-w= Save the text of the region-rectangle as the last killed rectangle (copy-rectangle-as-kill).
- =C-x r d= Delete the text of the region-rectangle (delete-rectangle).
- =C-x r y= Yank the last killed rectangle with its upper left corner at point (yank-rectangle).
- =C-x r o= Insert blank space to fill the space of the region-rectangle (open-rectangle). This pushes the previous contents of the region-rectangle to the right.
- =C-x r N= Insert line numbers along the left edge of the region-rectangle (rectangle-number-lines). This pushes the previous contents of the region-rectangle to the right.
- =C-x r c= Clear the region-rectangle by replacing all of its contents with spaces (clear-rectangle).
- =M-x delete-whitespace-rectangle= Delete whitespace in each of the lines on the specified rectangle, starting from the left edge column of the rectangle.
- =C-x r t string <RET>=  Replace rectangle contents with string on each line (string-rectangle).
-  =M-x string-insert-rectangle <RET> string <RET>= Insert string on each line of the rectangle.
-  =C-x <SPC>= Toggle Rectangle Mark mode (rectangle-mark-mode). When
  this mode is active, the region-rectangle is highlighted and can be
  shrunk/grown, and the standard kill and yank commands operate on it.
  The rectangle operations fall into two classes: commands to erase or
  insert rectangles, and comm

** Expand region
#+begin_src emacs-lisp :tangle suk.el
    ;; expand-region
    (run-with-idle-timer
     2 nil
     #'(lambda()
         (use-package expand-region ; I prefer stable version
            :load-path "~/.emacs.d/extensions/expand-region"
         )
         (with-eval-after-load 'expand-region
            (defun treesit-mark-bigger-node ()
               "Use tree-sitter to mark regions."
               (let* ((root (treesit-buffer-root-node))
                      (node (treesit-node-descendant-for-range root (region-beginning) (region-end)))
                      (node-start (treesit-node-start node))
                      (node-end (treesit-node-end node)))
                 ;; Node fits the region exactly. Try its parent node instead.
                 (when (and (= (region-beginning) node-start) (= (region-end) node-end))
                   (when-let ((node (treesit-node-parent node)))
                     (setq node-start (treesit-node-start node)
                           node-end (treesit-node-end node))))
                 (set-mark node-end)
                 (goto-char node-start)))
            )))

#+end_src
Add shortcut.
#+begin_src emacs-lisp :tangle etc/init-key.el
 (lazy-load-global-keys
        '(("M-=" . er/expand-region)
          ("M--" . er/contract-region)
          )
        "expand-region")
#+end_src
** Undo
#+begin_src emacs-lisp :tangle suk.el
  ;; Treat undo history as a tree, ^x u
  (run-with-idle-timer
   2 nil
   #'(lambda()
         (if emacs/>=28p
             (progn
               ;; vundo :load-path "~/.emacs.d/extensions/vundo"
               (with-eval-after-load 'vundo
                 (setq vundo-glyph-alist vundo-unicode-symbols)))
           (progn
             ;; use undo-tree
             ;; (unless emacs/>=28p
             ;;   (require-package 'undo-tree))
             (setq undo-tree-visualizer-timestamps t
                   undo-tree-visualizer-diff t
                   undo-tree-enable-undo-in-region nil
                   undo-tree-auto-save-history nil)
             ;; HACK: keep the diff window
             (with-no-warnings
               (make-variable-buffer-local 'undo-tree-visualizer-diff)
               (setq-default undo-tree-visualizer-diff t))
             (with-eval-after-load 'undo-tree
               (add-hook 'after-init-hook #'global-undo-tree-mode))
             ))
         ))
#+end_src
Add shortcuts.
#+begin_src emacs-lisp :tangle etc/init-key.el
  (if emacs/>=28p
      (lazy-load-global-keys
       '(("C-x u" . vundo)
         ("C-/" . vundo)
         )
       "vundo")
    (lazy-load-global-keys
     '(("C-x u" . undo-trees)
       ("C-/"   . undo-tree-undo)
       ("C-?  " . undo-tree-redo)
       )
     "undo-tree")
    )
#+end_src
** Yank
#+begin_src emacs-lisp :tangle suk.el
  ;;; ### Advice ###
  ;;; --- 各种emacs行为建议
  ;; 在特定地模式下粘贴时自动缩进
  (defadvice yank (after indent-region activate)
    "To make yank content indent automatically."
    (if (member major-mode
                '(emacs-lisp-mode
                  java-mode
                  web-mode
                  c-mode
                  c++-mode
                  js-mode
                  latex-mode
                  plain-tex-mode))
        (indent-region (region-beginning) (region-end) nil)))
#+end_src
** Spell
#+begin_src emacs-lisp :tangle suk.el
  (require-package 'flyspell)
  (require-package 'langtool)
  ;; my own patched version is better an open-source grammar, spelling,
  ;; and style checker, directly into Emacs. LanguageTool supports
  ;; multiple languages, including English, Spanish, French, German, and
  ;; many others, making it a versatile tool for checking the quality of
  ;; your writing.
#+end_src
** Macros
#+begin_src emacs-lisp :tangle suk-unload.el
  ;; kèitá bongding
  ;; f3 start macro(kmacro-start-macro-or-insert-counter),
  ;; f4 done macro or run marcro (kmacro-end-or-call-macro).
  ;; C-x ( start macro (kmacro-start-macro),
  ;; C-x ) end done marco,
  ;; C-x e run marco(kmacro-end-macro)
  ;; 先定义一个宏
  ;; 然后 name-last-kbd-macro
  ;; 然后 insert-kbd-macro
  ;; 等到如下类似的配置
  ;; (fset 'delete-empty-lines (kbd "M-x flush-lines RET ^\s-*$ RET"))
  ;;
  ;;; ### Keyboard Macro ###
  ;;; --- 键盘宏
  (lazy-load-global-keys
   '(
     ("M-s-s" . kmacro-start-macro-or-insert-counter) ;开始键盘宏或插入 F3
     ("M-s-d" . kmacro-end-or-call-macro)    ;结束键盘宏或调用 F4
     ("M-s-c" . kmacro-delete-ring-head)     ;删除当前的键盘宏
     ("M-s-w" . kmacro-cycle-ring-next)      ;下一个键盘宏
     ("M-s-e" . kmacro-cycle-ring-previous)  ;上一个键盘宏
     ("M-s-a" . kmacro-edit-macro)           ;编辑键盘宏
     ("M-s-v" . name-last-kbd-macro)         ;命令当前键盘宏
     ("M-s-f" . insert-kbd-macro)            ;插入键盘宏
     ("M-s-q" . apply-macro-to-region-lines) ;应用键盘宏到选择的区域
     )
   "macros+")
#+end_src
** Misc packages
#+begin_src emacs-lisp :tangle suk.el
  (run-with-idle-timer
   2 nil
   #'(lambda()
       (require-package 'paredit) ;; useful for lisp
       (require-package 'tagedit) ;; useful for html
       (require-package 'cliphist)
       (require-package 'iedit)
       (require-package 'wgrep) ;; eidt the grep / rg result then apply to the origin buffer. Cancel is supportted.
       ;;(require-package 'textile-mode)
       ;;(require-package 'vimrc-mode)
       ;;(require-package 'qrencode)
       (use-package writeroom-mode)

       ))

#+end_src
** Misc
#+begin_src emacs-lisp :tangle suk.el
  (global-set-key  (kbd "C-S-SPC") 'set-mark-command)

  (define-prefix-command 'leader-key)
  (global-set-key (kbd "M-s-SPC") 'leader-key)
  (global-set-key (kbd "C-c C-j") #'yas-expand)
  ;;; ### Toolkit ###
  ;;; --- 工具函数
  (lazy-load-set-keys
   '(
     ("C-," . bury-buffer)                ;隐藏当前buffer
     ("C-." . unbury-buffer)              ;反隐藏当前buffer
     ("s-[" . eval-expression)            ;执行表达式
     ("s-1" . sort-lines)                 ;排序
     ("s-2" . hanconvert-region)          ;转换简体或繁体中文
     ("s-3" . uniquify-all-lines-buffer)  ;删除重复的行
     ("s-<f12>" . calendar)
     ("C-<f12>" . lazycat-theme-toggle)
     ;;([c-t] . transpose-chars)
     ([S-f5] . toggle-truncate-lines)
     ("C-x M-a" . align-regexp)
     )
   )

  ;; C-c TAB indent-region
  ;; C-u C-c TAB => (un)indent-region

  ;;(global-set-key (kbd "C-(") 'backward-sexp)
  ;;(global-set-key (kbd "C-)") 'forward-sexp)
  ;;(global-set-key (kbd "C-x t T") 'suk/toggle-transparency)
  ;;(global-set-key (kbd "C-x t p") 'suk/toggle-toggle-proxy)
  ;;(global-set-key (kbd "C-x t f") 'global-flycheck-mode)
  ;;(global-set-key (kbd "C-x R") 'recentf)
  ;; M-x global-set-key RET 交互式的绑定你的键。
  ;; C-x Esc Esc 调出上一条“复杂命令”

  ;;Emacs 自动排版
  ;;很简单：C-x h C-M-\
  ;;其中C-x h 是全选
  ;;C-M-\ 是排版

  ;; C-x C-q set/unset readonly
  ;; 大小写转换： M-u, M-l, M-c

  ;; M-x align-regexp 可以方便的对齐一些文字
#+end_src


* User Interface
:PROPERTIES:
:CUSTOM_ID: setup-ui
:END:
<<setup-ui>>

#+begin_src emacs-lisp :tangle install.el
  ;; UI
  (require-package 'doom-themes)
  (require-package 'doom-modeline)
  (require-package 'hide-mode-line)
  (require-package 'minions)
  (require-package 'centaur-tabs)
  (require-package 'all-the-icons)
  (require-package 'nerd-icons)
  (require-package 'page-break-lines)
  (require-package 'hl-line)
  (require-package 'beacon)
  (require-package 'hydra)
  (require-package 'pretty-hydra)
  (require-package 'ivy-hydra)
#+end_src
** Theme
:PROPERTIES:
:CUSTOM_ID: setup-theme
:END:
<<setup-theme>>

#+begin_src emacs-lisp :tangle suk.el
  ;;(require 'lazycat-theme)
  ;;(lazycat-theme-load-dark)
  (use-package doom-themes
    :ensure t
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    ;; 加载一个主题，DOOM One 是 DOOM Emacs 的默认主题，非常美观
    :init
    (load-theme 'doom-one t)
    )

 
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :init
    (setq doom-modeline-icon suk-icon
          doom-modeline-minor-modes t)
    :config
    (column-number-mode 1)
    :custom
    (doom-modeline-height 30)
    (doom-modeline-window-width-limit nil)
    (doom-modeline-buffer-file-name-style 'truncate-with-project)
    (doom-modeline-icon t)
    (doom-modeline-time t)
    (doom-modeline-vcs-max-leghth 50)
    ;; Windows下记得加上
    (if sys/win32p (setq inhibit-compacting-font-caches t))
    )

  (use-package hide-mode-line
    :hook (((treemacs-mode
             eshell-mode shell-mode
             term-mode vterm-mode
             embark-collect-mode
             lsp-ui-imenu-mode
             pdf-annot-list-mode) . turn-on-hide-mode-line-mode)
           (dired-mode . (lambda()
                           (and (bound-and-true-p hide-mode-line-mode)
                                (turn-off-hide-mode-line-mode))))))

  ;; A minor-mode menu for mode-line
  (use-package minions
    :hook (doom-modeline-mode . minions-mode))

#+end_src
** Font
:PROPERTIES:
:CUSTOM_ID: setup-fonts
:END:
<<setup-fonts>>

#+begin_src emacs-lisp :tangle suk.el
    ;; 字体
    (lazy-load-set-keys
     '(
       ("C--" . text-scale-decrease)        ;减小字体大小
       ("C-=" . text-scale-increase)        ;增加字体大小
       ("C-x C-0" . text-scale-adjust)
       ))


    (defun font-installed-p (font-name)
      "Check if font with FONT-NAME is available."
      (find-font (font-spec :name font-name)))


  ;; Use fixed pitch where it's sensible
  ;;  (use-package mixed-pitch :diminish)
  (require 'load-set-font)
#+end_src
** Tabs
:PROPERTIES:
:CUSTOM_ID: setup-tabs
:END:
<<setup-tabs>>

#+begin_src emacs-lisp :tangle suk.el
  (when (display-graphic-p)
    (use-package centaur-tabs
      :demand
      :init
      ;; Set the style to rounded with icons
      (setq centaur-tabs-style "bar")
      (setq centaur-tabs-set-icons t)
      :config
      (centaur-tabs-mode t)
      :bind
      ("C-<prior>" . centaur-tabs-backward)  ;; Ctrl PgUp
      ("C-<next>"  . centaur-tabs-forward))  ;; Ctrl PgDn
  )
#+end_src
** Icons
:PROPERTIES:
:CUSTOM_ID: setup-icons
:END:
<<setup-icons>>

#+begin_src emacs-lisp :tangle suk.el
  (when (display-graphic-p)
     ;; Icons
    (use-package nerd-icons
      :config
      (when (and (display-graphic-p)
                 (not (font-installed-p nerd-icons-font-family)))
        (nerd-icons-install-fonts t)))

    ;; 图标支持
    (use-package all-the-icons
      ;; :ensure t
      :load-path "~/.emacs.d/extensions/all-the-icons"
      :if (display-graphic-p))
    )
#+end_src
** Display ugly ^L page breaks as tidy horizontal lines
:PROPERTIES:
:CUSTOM_ID: setup-break-lines
:END:
<<setup-break-lines>>

#+begin_src emacs-lisp :tangle suk-unload.el
  (run-with-idle-timer
   10
   nil
   #'(lambda()
       ;; Display ugly ^L page breaks as tidy horizontal lines
       (use-package page-break-lines
         :diminish
         :hook (after-init . global-page-break-lines-mode))
       ))
#+end_src

** Highlight
#+begin_src emacs-lisp :tangle suk.el
  (run-with-idle-timer
   9
   nil
   #'(lambda()
       ;;(require-package 'highlight-symbol)
       ;; Highlight the current line
       (use-package hl-line
         :ensure nil
         :hook ((after-init . global-hl-line-mode)
                ((dashboard-mode eshell-mode shell-mode term-mode vterm-mode) .
                 (lambda () (setq-local global-hl-line-mode nil)))))



       (use-package rainbow-mode
         :diminish
         :hook ((prog-mode html-mode) . rainbow-mode)
         )

       ))
#+end_src
** 切换buffer焦点时高亮动画
#+begin_src emacs-lisp :tangle suk-unload.el
  (run-with-idle-timer
   1
   nil
   #'(lambda()
       ;; 切换buffer焦点时高亮动画
       (require-package 'beacon)
       (use-package beacon
         :ensure t
         :hook (after-init . beacon-mode))))
#+end_src
** hydra
:PROPERTIES:
:CUSTOM_ID: setup-hydra
:END:
<<setup-hydra>>
*** Setup hydra
#+begin_src emacs-lisp :tangle suk.el
  ;; setup hydra
  (use-package hydra
    :hook (emacs-lisp-mode . hydra-add-imenu)
    :config
    (with-eval-after-load 'posframe
      (setq hydra-hint-display-type 'posframe)
      (defun hydra-set-posframe-show-params ()
        "Set hydra-posframe style."
        (setq hydra-posframe-show-params
              `(
                :left-fringe 8
                :right-fringe 8
                :internal-border-width 2
                :internal-border-color ,(face-background 'posframe-border nil t)
                :background-color ,(face-background 'tooltip nil t)
                :foreground-color ,(face-foreground 'tooltip nil t)
                :lines-truncate t
                )))
      (hydra-set-posframe-show-params)
      (add-hook 'after-load-theme-hook #'hydra-set-posframe-show-params t))
    )

#+end_src
*** Setup pretty-hydra
#+begin_src emacs-lisp :tangle suk.el
  (use-package pretty-hydra
    :requires hydra
    :custom (pretty-hydra-default-title-body-format-spec " %s%s")
    :bind ("<f6>" . toggles-hydra/body)
    :hook (emacs-lisp-mode . (lambda ()
                               (add-to-list
                                'imenu-generic-expression
                                '("Hydras" "^.*(\\(pretty-hydra-define\\) \\([a-zA-Z-]+\\)" 2))))
    :init
    (cl-defun pretty-hydra-title (title &optional icon-type icon-name &key face height v-adjust)
      "Add an icon in the hydra title."
      (let ((face (or face `(:inherit highlight :reverse-video t)))
            (height (or height 1.2))
            (v-adjust (or v-adjust 0.0)))
        (concat
         (when (and (icons-displayable-p) icon-type icon-name)
           (let ((f (intern (format "nerd-icons-%s" icon-type))))
             (when (fboundp f)
               (concat (apply f (list icon-name :face face :height height :v-adjust v-adjust)) " "))))
         (propertize title 'face face))))

    ;; Global toggles
    (with-no-warnings
      (pretty-hydra-define+ toggles-hydra (:title (pretty-hydra-title "Toggles" 'faicon "nf-fa-toggle_on") :color amaranth :quit-key ("q" "C-g"))
        ("Basic"
         (("n" (cond ((fboundp 'display-line-numbers-mode)
                      (display-line-numbers-mode (if display-line-numbers-mode -1 1)))
                     ((fboundp 'gblobal-linum-mode)
                      (global-linum-mode (if global-linum-mode -1 1))))
           "line number"
           :toggle (or (bound-and-true-p display-line-numbers-mode)
                       (bound-and-true-p global-linum-mode)))
          ("i" global-aggressive-indent-mode "aggressive indent" :toggle t)
          ("d" global-hungry-delete-mode "hungry delete" :toggle t)
          ("e" electric-pair-mode "electric pair" :toggle t)
          ("c" flyspell-mode "spell check" :toggle t)
          ("s" prettify-symbols-mode "pretty symbol" :toggle t)
          ("l" global-page-break-lines-mode "page break lines" :toggle t)
          ("B" display-battery-mode "battery" :toggle t)
          ("T" display-time-mode "time" :toggle t)
          ("a" abbrev-mode "abrev" :toggle t)
          ("F" auto-fill-mode "auto fill" :toggle t)
          ("m" doom-modeline-mode "modern mode-line" :toggle t)
          ("t" toggle-truncate-lines "truncate lines" :toggle t)
          ("u" toggle-company-ispell "Company Ispell" :toggle t))
         "Highlight"
         (("h l" global-hl-line-mode "line" :toggle t)
          ("h p" show-paren-mode "paren" :toggle t)
          ("h s" symbol-overlay-mode "symbol" :toggle t)
          ("h r" rainbow-mode "rainbow" :toggle t)
          ("h w" (setq-default show-trailing-whitespace (not show-trailing-whitespace))
           "whitespace" :toggle show-trailing-whitespace)
          ("h d" rainbow-delimiters-mode "delimiter" :toggle t)
          ("h i" highlight-indent-guides-mode "indent" :toggle t)
          ("h t" global-hl-todo-mode "todo" :toggle t))
         "Program"
         (("f" flymake-mode "flymake" :toggle t)
          ("O" hs-minor-mode "hideshow" :toggle t)
          ("U" subword-mode "subword" :toggle t)
          ("w" whitespace-mode "whitespace" :toggle t)
          ("W" which-function-mode "which function" :toggle t)
          ("E" toggle-debug-on-error "debug on error" :toggle (default-value 'debug-on-error))
          ("Q" toggle-debug-on-quit "debug on quit" :toggle (default-value 'debug-on-quit))
          ("v" global-diff-hl-mode "gutter" :toggle t)
          ("V" diff-hql-flydiff-mode "live gutter" :toggle t)
          ("M" diff-hl-margin-mode "margin gutter" :toggle t)
          ("D" diff-hl-dired-mode "dired gutter" :toggle t))
         ))))


#+end_src
*** Setup ivy-hydra
#+begin_src emacs-lisp :tangle suk.el

    ;; @see https://github.com/abo-abo/hydra
    ;; color could: red, blue, amaranth, pink, teal
  (use-package ivy-hydra
    :after (hydra ivy))
#+end_src
** Setup vertico
:PROPERTIES:
:CUSTOM_ID: setup-vertico
:END:
<<setup-vertico>>

#+begin_src emacs-lisp :tangle suk.el
  (when (display-graphic-p)
    (use-package vertico
      :bind (:map vertico-map
                  ("RET" . vertico-directory-enter)
                  ("DEL" . vertico-directory-delete-char)
                  ("M-DEL" . vertico-directory-delete-word))
      :hook ((after-init . vertico-mode)
             (rfn-eshadow-update-overlay . vertico-directory-tidy))
      )
     (use-package vertico-posframe
        :ensure t
        :after (posframe vertico)
        :hook (vertico-mode . vertico-posframe-mode)
        :init (setq vertico-posframe-parameters '((left-fringe  . 8) (right-fringe . 8)))
        )
    )
#+end_src
** Setup posframe
#+begin_src emacs-lisp :tangle suk.el
     (when (display-graphic-p)
       (use-package posframe
          :hook (after-load-theme . posframe-delete-all)
          :init
          (defface posframe-border `((t (:inherit region)))
            "Face used by the `posframe' border."
            :group 'posframe)
          (defvar posframe-border-width 2
            "Default posframe border width.")
          )
     )
#+end_src
** Misc
#+begin_src emacs-lisp :tangle suk.el
  ;; Optimization
  (setq idle-update-delay 1.0)
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  ;; (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  ;; (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

  ;; GUI Environment
  (when (display-graphic-p)
    ;; Don't use GTK+ tooltip
    (when (boundp 'x-gtk-use-system-tooltips)
      (setq x-gtk-use-system-tooltips nil))
    ;; scroll-bar
    (set-scroll-bar-mode 'right)
    ;; 隐藏垂直滚动条。
    ;;(modify-all-frames-parameters '((vertical-scroll-bars)))
    )
#+end_src
* Buffer
** Use ibuffer.
#+begin_src emacs-lisp :tangle suk.el

  (use-package ibuffer
    :ensure nil
    :bind ("C-x C-b" . ibuffer)
    :init (setq ibuffer-filter-group-name-face '(:inherit (font-lock-string-face bold))))
  ;;(global-set-key (kbd "C-x C-b") 'ibuffer)

  (with-eval-after-load 'ibuffer
    ;; Display icons for buffers
    (when (display-graphic-p)
      (use-package nerd-icons-ibuffer
        :hook (ibuffer-mode . nerd-icons-ibuffer-mode)
        :init (setq nerd-icons-ibuffer-icon suk-icon)))
    )
#+end_src
** Persistent the scratch buffer
I want to persist the scratch buffer, so I can  test continuely.
#+begin_src emacs-lisp :tangle suk.el
  ;; Persistent the scratch buffer
  (run-with-idle-timer
   10 nil
   #'(lambda()
       (use-package persistent-scratch
         :diminish
         :bind (:map persistent-scratch-mode-map
                     ([remap kill-buffer] . (lambda (&rest _)
                                              (interactive)
                                              (user-error "Scratch buffer cannot be killed")))
                     ([remap revert-buffer] . persistent-scratch-restore)
                     ([remap revert-this-buffer] . persistent-scratch-restore))
         :hook ((after-init . persistent-scratch-autosave-mode)iu
                (lisp-interaction-mode . persistent-scratch-mode))
         :init
         ;; 创建 var 文件夹
         (make-directory (expand-file-name "var" user-emacs-directory) t)

         (setq persistent-scratch-backup-file-name-format "%Y-%m-%d"
               persistent-scratch-backup-directory (expand-file-name "var/persistent-scratch" user-emacs-directory)
               persistent-scratch-save-file (expand-file-name "var/.persistent-scratch" user-emacs-directory))
         (persistent-scratch-setup-default)

         )))

#+end_src
*** Buffer shortcuts.
#+begin_src emacs-lisp :tangle etc/init-key.el
   (lazy-load-global-keys
   '(
     ("C-c b"  . my-hydra-buffers/body)
     ("M-<f7>" . suk-read-mode)
     ("<f7>"   . olivetti-mode)
     ("C-;"    . suk/close-current-buffer) ;关闭当前buffer
     )
   "buffer-extension")

  ;; (lazy-load-global-keys
  ;;  '(
  ;;     ("<f7>" . olivetti-mode)
  ;;   )
  ;;  "olivetti")

  ;; default keys: C-x LEFT/RIGHT C-, C-.

#+end_src
*** Buffer Move
#+begin_src emacs-lisp :tangle etc/init-key.el

  ;; --- 缓存移动
  (lazy-load-set-keys
   '(
     ;;("C-z i" . beginning-of-buffer)      ;缓存开始 M-<
     ;;("C-z k" . end-of-buffer)            ;缓存结尾 M->
     ("C-M-f" . forward-paragraph)        ;下一个段落
     ("C-M-b" . backward-paragraph)       ;上一个段落
     ("C-M-y" . backward-up-list)         ;向左跳出 LIST
     ("C-M-o" . up-list)                  ;向右跳出 LIST
     ("C-M-u" . backward-down-list)       ;向左跳进 LIST
     ("C-M-i" . down-list)                ;向右跳进 LIST
     ("C-M-a" . beginning-of-defun)       ;函数开头
     ("C-M-e" . end-of-defun)             ;函数末尾
     ))
#+end_src
*** Buffer autorevert
#+begin_src emacs-lisp :tangle suk.el
  ;; Automatically reload files was modified by external program
  (run-with-idle-timer
   1 nil
   #'(lambda()
       (require-package 'autorevert)
       (use-package autorevert
         :ensure nil
         :diminish
         :defer 2
         :hook (after-init . global-auto-revert-mode))))
#+end_src
*** Auto Save
#+begin_src emacs-lisp :tangle suk.el
  (require 'auto-save)
  (auto-save-enable)
  (setq auto-save-silent t)
  ;;(setq auto-save-delete-trailing-whitespace t)
#+end_src
*** vdiff
#+begin_src emacs-lisp :tangle suk.el
  ;; ### vdiff ###
  (lazy-load-global-keys
   '(
     ("M-s-u" . vdiff-buffers))
   "vdiff")
#+end_src
** Move buffer to window
#+begin_src emacs-lisp :tangle etc/init-key.el
  (lazy-load-global-keys
   '(
     ("<C-S-up>" . buf-move-up)   
     ("<C-S-down>" . buf-move-down)
     ("<C-S-left>" . buf-move-left)  
     ("<C-S-right>" . buf-move-right)   
     )
   "buffer-move")
#+end_src
* Navigate
#+begin_src emacs-lisp :tangle install.el
   (require-package 'windmove)
#+end_src
#+begin_src emacs-lisp :tangle suk.el
  ;; Toggle two most recent buffers
  (fset 'quick-switch-buffer [?\C-x ?b return])
  (global-set-key (kbd "s-b") 'quick-switch-buffer)
#+end_src
** Move cursor to window
#+begin_src emacs-lisp :tangle suk.el
  ;; Directional window-selection routines
  (lazy-load-global-keys
   '(
     ("<M-up>"    .  windmove-up)   
     ("<M-down>"  .  windmove-down)
     ("<M-left>"  .  windmove-left)
     ("<M-right>" .  windmove-right)
     )
   "windmove")
#+end_src
* Window
#+begin_src emacs-lisp :tangle install.el
 
  (require-package 'transwin)
  (require-package 'buffer-move)
  (require-package 'winner)
  (require-package 'ace-window)
  (require-package 'popper)
#+end_src
** Transwin
#+begin_src emacs-lisp :tangle suk.el
  ;; Frame transparence
  (lazy-load-global-keys
   '(
     ("C-M-9" . transwin-inc)
     ("C-M-8" . transwin-dec)
     ("C-M-7" . transwin-toggle)
     )
   "transwin"
  )

  (with-eval-after-load 'transwin
    (setq transwin-parameter-alpha 'alpha-background))

#+end_src
** Winner
#+begin_src emacs-lisp :tangle suk.el
  ;; Restore old window configurations
  (use-package winner
    :ensure nil
    :commands (winner-undo winner-redo) ;; C-c <Left>/C-c <Right>
    :hook (after-init . winner-mode)
    :init (setq winner-boring-buffers '("*Completions*"
                                        "*Compile-Log*"
                                        "*inferior-lisp*"
                                        "*Fuzzy Completions*"
                                        "*Apropos*"
                                        "*Help*"
                                        "*cvs*"
                                        "*Buffer List*"
                                        "*Ibuffer*"
                                        "*esh command on file*"))
    )
#+end_src
** Ace-window
#+begin_src emacs-lisp :tangle suk.el
      ;; Quickly switch windows
      (use-package ace-window
        :pretty-hydra
        ((:title (pretty-hydra-title "Window Management" 'faicon "nf-fa-th")
                 :foreign-keys warn :quit-key ("q" "C-g"))
         ("Actions"
          (("TAB" other-window "switch")
           ("x" ace-delete-window "delete")
           ("X" ace-delete-other-windows "delete other" :exit t)
           ("s" ace-swap-window "swap")
           ("a" ace-select-window "select" :exit t)
           ("m" toggle-frame-maximized "maximize" :exit t)
           ("u" toggle-frame-fullscreen "fullscreen" :exit t))
          "Movement"
          (("i" windmove-up "move ↑")
           ("k" windmove-down "move ↓")
           ("j" windmove-left "move ←")
           ("l" windmove-right "move →")
           ("f" follow-mode "follow"))
          "Resize"
          (("<left>" shrink-window-horizontally "shrink H")
           ("<right>" enlarge-window-horizontally "enlarge H")
           ("<up>" shrink-window "shrink V")
           ("<down>" enlarge-window "enlarge V")
           ("n" balance-windows "balance"))
          "Split"
          (("r" split-window-right "horizontally")
           ("R" split-window-horizontally-instead "horizontally instead")
           ("v" split-window-below "vertically")
           ("V" split-window-vertically-instead "vertically instead")
           ("t" toggle-window-split "toggle")
           ("o" delete-other-windows "only this")
           )
          "Zoom"
          (("+" text-scale-increase "in")
           ("=" text-scale-increase "in")
           ("-" text-scale-decrease "out")
           ("0" (text-scale-increase 0) "reset"))
          "Misc"
          (("o" set-frame-font "frame font")
           ("f" make-frame-command "new frame")
           ("d" delete-frame "delete frame")
           ("z" winner-undo "winner undo")
           ("Z" winner-redo "winner redo"))
          ))
        :bind (([remap other-window] . ace-window)
               ("C-c w" . ace-window-hydra/body))
        :hook (emacs-startup . ace-window-display-mode)
        :config
        (defun toggle-window-split ()
          (interactive)
          (if (= (count-windows) 2)
              (let* ((this-win-buffer (window-buffer))
                     (next-win-buffer (window-buffer (next-window)))
                     (this-win-edges (window-edges (selected-window)))
                     (next-win-edges (window-edges (next-window)))
                     (this-win-2nd (not (and (<= (car this-win-edges)
                                                 (car next-win-edges))
                                             (<= (cadr this-win-edges)
                                                 (cadr next-win-edges)))))
                     (splitter
                      (if (= (car this-win-edges)
                             (car (window-edges (next-window))))
                          'split-window-horizontally
                        'split-window-vertically)))
                (delete-other-windows)
                (let ((first-win (selected-window)))
                  (funcall splitter)
                  (if this-win-2nd (other-window 1))
                  (set-window-buffer (selected-window) this-win-buffer)
                  (set-window-buffer (next-window) next-win-buffer)
                  (select-window first-win)
                  (if this-win-2nd (other-window 1))))
            (user-error "`toggle-window-split' only supports two windows")))

        ;; Bind hydra to dispatch list
        (add-to-list 'aw-dispatch-alist '(?w ace-window-hydra/body) t)

        ;; Select widnow via `M-1'...`M-9'
        (defun aw--select-window (number)
          "Slecet the specified window."
          (when (numberp number)
            (let ((found nil))
              (dolist (win (aw-window-list))
                (when (and (window-live-p win)
                           (eq number
                               (string-to-number
                                (window-parameter win 'ace-window-path))))
                  (setq found t)
                  (aw-switch-to-window win)))
              (unless found
                (message "No specified window: %d" number)))))
        (dotimes (n 9)
          (bind-key (format "M-%d" (1+ n))
                    (lambda ()
                      (interactive)
                      (aw--select-window (1+ n))))))

#+end_src
** Enforce rules for popups
#+begin_src emacs-lisp :tangle suk.el
  ;; Enforce rules for popups
  (use-package popper
    :custom
    (popper-group-function #'popper-group-by-directory)
    (popper-echo-dispatch-actions t)
    :bind (:map popper-mode-map
                ("C-h z"       . popper-toggle)
                ("C-<tab>"     . popper-cycle)
                ("C-M-<tab>"   . popper-toggle-type))
    :hook (emacs-startup . popper-echo-mode)
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*$"
            "Output\\*$" "\\*Pp Eval Output\\*$"
            "^\\*eldoc.*\\*$"
            "\\*Compile-Log\\*$"
            "\\*Completions\\*$"
            "\\*Warnings\\*$"
            "\\*Async Shell Command\\*$"
            "\\*Apropos\\*$"
            "\\*Backtrace\\*$"
            "\\*Calendar\\*$"
            "\\*Fd\\*$" "\\*Find\\*$" "\\*Finder\\*$"
            "\\*Kill Ring\\*$"
            "\\*Embark \\(Collect\\|Live\\):.*\\*$"

            bookmark-bmenu-mode
            comint-mode
            compilation-mode
            help-mode helpful-mode
            tabulated-list-mode
            Buffer-menu-mode

            flymake-diagnostics-buffer-mode
            flycheck-error-list-mode flycheck-verify-mode

            gnus-article-mode devdocs-mode
            grep-mode occur-mode rg-mode deadgrep-mode ag-mode pt-mode
            youdao-dictionary-mode osx-dictionary-mode fanyi-mode

            "^\\*Process List\\*$" process-menu-mode
            list-environment-mode cargo-process-mode

            "^\\*.*eshell.*\\*.*$"
            "^\\*.*shell.*\\*.*$"
            "^\\*.*terminal.*\\*.*$"
            "^\\*.*vterm[inal]*.*\\*.*$"

            "\\*DAP Templates\\*$" dap-server-log-mode
            "\\*ELP Profiling Restuls\\*" profiler-report-mode
            "\\*Paradox Report\\*$" "\\*package update results\\*$" "\\*Package-Lint\\*$"
            "\\*[Wo]*Man.*\\*$"
            "\\*ert\\*$" overseer-buffer-mode
            "\\*gud-debug\\*$"
            "\\*lsp-help\\*$" "\\*lsp session\\*$"
            "\\*quickrun\\*$"
            "\\*tldr\\*$"
            "\\*vc-.*\\**"
            "\\*diff-hl\\**"
            "^\\*macro expansion\\**"

            "\\*Agenda Commands\\*" "\\*Org Select\\*" "\\*Capture\\*" "^CAPTURE-.*\\.org*"
            "\\*Gofmt Errors\\*$" "\\*Go Test\\*$" godoc-mode
            "\\*docker-.+\\*"
            "\\*prolog\\*" inferior-python-mode
            "\\*rustfmt\\*$" rustic-compilation-mode rustic-cargo-clippy-mode
            rustic-cargo-outdated-mode rustic-cargo-run-mode rustic-cargo-test-mode
            ))

    (with-eval-after-load 'doom-modeline
      (setq popper-mode-line
            '(:eval (let ((face (if (doom-modeline--active)
                                    'doom-modeline-emphasis
                                  'doom-modeline)))
                      (if (and (icons-displayable-p)
                               (bound-and-true-p doom-modeline-icon)
                               (bound-and-true-p doom-modeline-mode))
                          (format " %s "
                                  (nerd-icons-octicon "nf-oct-pin" :face face))
                        (propertize " POP " 'face face))))))
    :config
    (with-no-warnings
      (defun my-popper-fit-window-height (win)
        "Determine the height of popup window WIN by fitting it to the buffer's content."
        (fit-window-to-buffer
         win
         (floor (frame-height) 3)
         (floor (frame-height) 3)))
      (setq popper-window-height #'my-popper-fit-window-height)

      (defun popper-close-window-hack (&rest _)
        "Close popper window via `C-g'."
        ;; `C-g' can deactivate region
        (when (and (called-interactively-p 'interactive)
                   (not (region-active-p))
                   popper-open-popup-alist)
          (let ((window (caar popper-open-popup-alist)))
            (when (window-live-p window)
              (delete-window window)))))
      (advice-add #'keyboard-quit :before #'popper-close-window-hack)))


#+end_src
** Add shortcuts
#+begin_src emacs-lisp :tangle suk.el

  ;;; ### watch other window ###
  ;;; --- 滚动其他窗口
  (lazy-load-global-keys
   '(
     ("C-S-n" . other-window-move-up)       ;向下滚动其他窗口
     ("C-S-p" . other-window-move-down) ;向上滚动其他窗口
     ("M-n" . window-move-up)         ;向下滚动当前窗口
     ("M-p" . window-move-down)           ;向上滚动当前窗口
     )
   "win-move")
  (lazy-load-set-keys
   '(
     ;;("C-c :" . split-window-vertically)   ;纵向分割窗口
     ;;("C-c |" . split-window-horizontally) ;横向分割窗口

     ;;("C-x ;" . delete-other-windows)      ;关闭其它窗口
     ))
  (lazy-load-global-keys
   '(
     ("C-c V" . delete-other-windows-vertically+) ;关闭上下的其他窗口
     ("C-c H" . delete-other-windows-horizontally+) ;关闭左右的其他窗口
     ("C-'" . delete-current-buffer-and-window) ;关闭当前buffer, 并关闭窗口
     ("C-\"" . delete-current-buffer-window) ;删除当前buffer的窗口
     ("M-s-o" . toggle-one-window)           ;切换一个窗口
     ("C-x O" . toggle-window-split)
     )
   "window-extension")
#+end_src
* Projectile
#+begin_src emacs-lisp :tangle suk.el
  (when sys/linuxp
    (run-with-idle-timer
     2 nil
     #'(lambda()
         (require-package 'projectile)
         (use-package projectile
           :ensure t
           :when (< emacs-major-version 28)
           :diminish " Proj."
           :init (add-hook 'after-init-hook 'projectile-mode)
           :config
           ;;(setq projectile-completion-system 'ido)
           ;;(setq ido-enable-flex-matching t)
           (setq projectile-completion-system 'ivy)
           ;; Eanble Projectile globally
           ;;(projectile-mode 1)
           ;; Set akeybinding for projectile commands
           ;;(global-set-key (kbd "C-c p") 'projectile-commander)
           (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
           )
         ))
    )
  #+end_src
* Bookmark
#+begin_src emacs-lisp :tangle suk.el

  ;;(global-set-key  [C-f7] 'suk/point-to-register)
  ;;(global-set-key  [f7] 'suk/jump-to-register)

  ;; has set to f7, c-f7
  ;;(global-set-key (kbd "<C-f6>") '(lambda () (interactive) (bookmark-set "SAVED")))
  ;;(global-set-key (kbd "<f6>") '(lambda () (interactive) (bookmark-jump "SAVED")))

  (lazy-load-global-keys
   '(
     ("C-<f7>"   . suk/bookmark-launcher/body)
     )
   "my-bookmark")

  ;; C-x r l to list bookmarks
#+end_src
* Dash
#+begin_src emacs-lisp :tangle suk.el
  (when  (eq system-type 'gnu/linux)
    ;;; Dash.
    (lazy-load-global-keys
     '(("y" . dash-at-point)
       )
     "dash-at-point"
     "C-x"
     )
    )
#+end_src

* 搜索
** 交互式搜索
#+begin_src emacs-lisp :tangle suk.el

  ;;; ### Isearch ###
  ;;; ---
  (lazy-load-set-keys
   '(
     ("TAB" . isearch-complete)               ;isearch补全
     ("C-s" . isearch-repeat-forward)         ;重复向前搜索, 第一次可以用来搜索上一次的历史哟
     ("C-r" . isearch-repeat-backward)        ;重复向后搜索
     ("C-g" . isearch-abort)                  ;中止搜索
     ("C-w" . isearch-yank-word-or-char)      ;粘帖光标后的词或字符作为搜索对象
     ("C-y" . isearch-yank-line)              ;粘帖光标后的行作为搜索对象
     ("M-o" . isearch-delete-char)            ;删除
     ("M-p" . isearch-ring-retreat)           ;搜索历史向后
     ("M-n" . isearch-ring-adjust)            ;搜索历史向前
     ("M-y" . isearch-yank-kill)              ;从 kill ring 中粘帖最后一项到搜索对象后
     ("M-h" . isearch-yank-char)              ;粘帖光标后的字符到搜索对象
     ("M-e" . isearch-edit-string)            ;编辑搜索对象
     ("M-c" . isearch-toggle-case-fold)       ;切换大小写
     ("M-r" . isearch-toggle-regexp)          ;切换正则表达式
     ("M-w" . isearch-toggle-word)            ;切换词
     ("M->" . isearch-beginning-of-buffer)    ;跳转到buffer开头并重新搜索, 搜索最前面一个
     ("M-<" . isearch-end-of-buffer)          ;跳转到buffer末尾并重新搜索, 搜索最后面一个
     ("M-%" . isearch-query-replace)          ;替换
     ("M-d" . isearch-find-duplicate-word)    ;查找重复的单词
     ("M-z" . isearch-find-duplicate-line)    ;查找重复的行
     ("C-M-%" . isearch-query-replace-regexp) ;正则表达式替换
     )
   isearch-mode-map
   )

#+end_src
** Search tools
*** Install
#+begin_src emacs-lisp :tangle install.el

  ;;(require-package 'git-timemachine)
  (require-package 'exec-path-from-shell)
  (require-package 'findr) ;; a light file search tools.
  (require-package 'find-by-pinyin-dired)
  (require-package 'jump)

  ;;(require-package 'counsel) ; counsel => swiper => ivy
  ;;(require-package 'counsel-bbdb)
  ;;(require-package 'counsel-gtags)
  ;;(require-package 'counsel-css)
  ;;(require-package 'bbdb)


  (require-package 'ivy)
  (require-package 'find-file-in-project)
  (require-package 'swiper)

  (require-package 'pinyinlib)
  (require-package 'ace-pinyin)
  (require-package 'goto-chg)
  (require-package 'avy)
  (require-package 'avy-zap)
   (require-package 'anzu)
#+end_src
*** ivy
#+begin_src emacs-lisp :tangle suk.el
  
    (with-eval-after-load 'ivy
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      (define-key ivy-minibuffer-map [escape] 'minibuffer-keyboard-quit)
      (setq ivy-re-builders-alist
            '((counsel-rg . ivy--regex-plus)
              (swiper . ivy--regex-plus)
              (swiper-isearch . ivy--regex-plus)
              (t . ivy--regex-ignore-order)))

      (when (display-graphic-p)
        (require-package 'ivy-posframe)
        (use-package ivy-posframe))
      )
#+end_src
*** swiper
#+begin_src emacs-lisp :tangle suk.el
  
  (use-package swiper
    :bind
    (
     ("C-x M-s" . swiper)
     ("C-x C-f" . counsel-find-file)
     ("M-x"     . counsel-M-x)
     )
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      ;;(define-key read-expression-map (kbd "C-r") 'counsel-expression-history))
      )
    )
#+end_src
*** avy
#+begin_src emacs-lisp :tangle suk.el
  (lazy-load-global-keys
   ' (("C-:"   . avy-goto-char)
      ("C-M-;" . avy-goto-char-2)
      ("M-g l" . avy-goto-line)
      ("M-g w" . avy-goto-word-1)
      ("M-g e" . avy-goto-word-0))
   "avy")
  (with-eval-after-load 'avy
    (setq avy-all-windows nil
          avy-all-windows-alt t
          avy-background t
          avy-style 'pre)
    (add-hook 'after-init-hook #'avy-setup-default)


    )

  (with-eval-after-load 'avy-zap
    ;; Kill text between the point and the character CHAR
    (lazy-load-global-keys
     '(("M-z" . avy-zap-to-char-dwim)
       ("M-Z" . avy-zap-up-to-char-dwim))
     "avy-zap")
    )

 
#+end_src
*** anzu
#+begin_src emacs-lisp :tangle suk.el
  (use-package anzu
    :diminish
    :bind (([remap query-replace] . anzu-query-replace)
           ([remap query-replace-regexp] . anzu-query-replace-regexp)
           :map isearch-mode-map
           ([remap isearch-query-replace] . anzu-isearch-query-replace)
           ([remap isearch-query-replace-regexp] . anzu-isearch-query-replace-regexp))
    :hook (after-init . global-anzu-mode))
#+end_src
*** Grep
#+begin_src emacs-lisp :tangle suk.el
  
  ;; Writable `grep' buffer
  (use-package wgrep
    :init
    (setq wgrep-auto-save-buffer t
          wgrep-change-readonly-file t))

  ;; Search tool
  (use-package grep
    :ensure nil
    :autoload grep-apply-setting
    :init
    (when (executable-find "rg")
      (grep-apply-setting
       'grep-command "rg --color=auto --null -nH --no-heading -e ")
      (grep-apply-setting
       'grep-template "rg --color=auto --null --no-heading -g '!*/' -e <R> <D>")
      (grep-apply-setting
       'grep-find-command '("rg --color=auto --null -nH --no-heading -e ''" . 38))
      (grep-apply-setting
       'grep-find-template "rg --color=auto --null -nH --no-heading -e <R> <D>")))


  ;; Fast search tool `ripgrep'
  (use-package rg
    :hook (after-init . rg-enable-default-bindings)
    :bind (:map rg-global-map
                ("c" . rg-dwim-current-dir)
                ("f" . rg-dwim-current-file)
                ("m" . rg-menu))
    :init (setq rg-group-result t
                rg-show-columns t)
    :config
    (cl-pushnew '("tmpl" . "*.tmpl") rg-custom-type-aliases))

#+end_src
** Web search
#+begin_src emacs-lisp :tangle suk.el
  (use-package webjump
    :ensure nil
    :bind ("C-c /" . webjump)
    :custom
    (webjump-sites '(
                     ;; Emacs.
                     ("Emacs Home Page" .
                      "www.gnu.org/software/emacs/emacs.html")
                     ("Savannah Emacs page" .
                      "savannah.gnu.org/projects/emacs")

                     ;; Internet search engines.
                     ("DuckDuckGo" .
                      [simple-query "duckduckgo.com"
                                    "duckduckgo.com/?q=" ""])
                     ("Google" .
                      [simple-query "www.google.com"
                                    "www.google.com/search?q=" ""])
                     ("Google Groups" .
                      [simple-query "groups.google.com"
                                    "groups.google.com/groups?q=" ""])
                     ("Wikipedia" .
                      [simple-query "wikipedia.org" "wikipedia.org/wiki/" ""]))))

  (lazy-load-set-keys
   '(
     ("C-z S g" . suk/google-search)
     ("C-z S c" . suk/github-code-search)
     )
   )

  ;;;###autoload
  (defun github-code-search ()
    "Search code on github for a given language."
    (interactive)
    (let ((language (completing-read
                     "Language: "
                     '("Java" "C/C++" "Emacs Javascript" "Lisp"  "Python" "Rust")))
          (code (read-string "Code: ")))
      (browse-url
       (concat "https://github.com/search?l=" language
               "&type=code&q=" code))))

  ;;;###autoload
  (defun google-search-str (str)
    (browse-url
     (concat "https://www.google.com/search?q=" str)))

  ;;;###autoload
  (defun google-search ()
    "Google search region, if active, or ask for search string."
    (interactive)
    (if (region-active-p)
        (google-search-str
         (buffer-substring-no-properties (region-beginning)
                                         (region-end)))
      (google-search-str (read-from-minibuffer "Search: "))))


#+end_src
** 星际译王命令行
#+begin_src emacs-lisp :tangle suk.el
  ;;; ### Sdcv ###
  ;;; --- 星际译王命令行
  (when  (eq system-type 'gnu/linux)
      (lazy-load-global-keys
       '(("p" . sdcv-search-pointer)           ;光标处的单词, buffer显示
         ("P" . sdcv-search-pointer+)          ;光标处的单词, tooltip显示
         ("i" . sdcv-search-input)             ;输入的单词, buffer显示
         (";" . sdcv-search-input+)
         ("y" . my-youdao-dictionary-search-at-point)
         ("Y" . youdao-dictionary-search-at-point)
         ("g" . google-translate-at-point)
         ("G" . google-translate-query-translate)
         ("s" . google-translate-smooth-translate)
         ("f" . fanyi-dwim)
         ("d" . fanyi-dwim2)
         ("h" . fanyi-from-history)
         )
       "init-translate"
       "C-z"))
#+end_src
* Org
** Base settings
#+begin_src emacs-lisp :tangle suk.el
  ;;(message org-files-directory)
  ;; 创建 var 文件夹
  (make-directory (expand-file-name "var" user-emacs-directory) t)

  ;; 设置 org-persist 目录
  (setq org-persist-directory (expand-file-name "var/org-persist" user-emacs-directory))
  ;; 创建新的 org-persist 目录（如果不存在）
  (unless (file-exists-p org-persist-directory)
    (make-directory org-persist-directory t))
  (require 'org)
  ;; To speed up startup, don't put to init section
  (setq org-modules nil)
  ;;(setq org-startup-indented t)
  (setq org-startup-folded nil)
  (setq org-ellipsis  "... → ")
  (setq org-pretty-entities t)
  (setq org-hide-emphasis-markers t)
  (setq org-hide-leading-stars nil)
  (setq org-blank-before-new-entry '((heading) (plain-list-item . auto)))
  (setq org-insert-heading-respect-content t)
  (setq org-yank-adjusted-subtrees t)
  ;; Use the current window for C-c ' source editing
  (setq org-src-window-setup 'current-window)
  ;; Use the current window for indirect buffer display
  (setq org-indirect-buffer-display 'current-window)
  (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))

  (setq org-tags-column -80)

  (setq org-catch-invisible-edits 'smart)

  ;; 设置打开某种文件类型
  (setq org-file-apps
        '((auto-mode . emacs)
          ("\\.mm\\'" . system)
          ("\\.x?html?\\'" . system)
          ("\\.pdf\\'" . system)))

    ;; 运行 Org Babel Tangle 命令：`M-x org-babel-tangle`。
    ;; 从 org 文件中生成 el 配置文件
    ;; 保存 user-emacs-directory(~/.emacs.d/) 文件下的 org 时，
    ;; 导出文件中 elisp 代码到文件中。
    (defun suk/org-babel-tangle-config ()
      (when (string-equal (file-name-directory (buffer-file-name))
                          (expand-file-name user-emacs-directory)) ; ~/.emacs.d
        (let ((org-confirm-babel-evaluate nil))
          (org-babel-tangle))))

    (add-hook 'org-mode-hook
              (lambda ()
                (add-hook 'after-save-hook #'suk/org-babel-tangle-config)))


    ;;;###autoload
    (defun suk/load-theme-org()
      (interactive)
      (load-theme 'doom-solarized-light)
      )

    ;;;###autoload
    (defun suk/load-theme-default()
      (interactive)
      (load-theme 'doom-one)
      )
#+end_src
** Quick asscess
#+begin_src emacs-lisp :tangle suk.el
  ;; Registers allow you to jump to a file or other location quickly.
  ;; To jump to a register, use C-x r j followed by the letter of the register.
  ;; Using registers for all these file shortcuts is probably a bit of
  ;; a waste since I can easily define my own keymap, but since I rarely
  ;; go beyond register A anyway. Also, I might as well add shortcuts for refiling.
  (require 'bookmark)
  (defvar my-refile-map (make-sparse-keymap))
  (defmacro my-defshortcut (key file)
    `(progn
       (set-register ,key (cons 'file ,file))
       (bookmark-store ,file (list (cons 'filename ,file)
                                   (cons 'position 1)
                                   (cons 'front-context-string "")) nil)
       (define-key my-refile-map
                   (char-to-string ,key)
                   (lambda (prefix)
                     (interactive "p")
                     (let ((org-refile-targets '(((,file) :maxlevel . 6)))
                           (current-prefix-arg (or current-prefix-arg '(4))))
                       (call-interactively 'org-refile))))))

  (defvar my-org-last-refile-marker nil "Marker for last refile")
  (defun my-org-refile-in-file (&optional prefix)
    "Refile to a target within the current file."
    (interactive)
    (let ((org-refile-targets (list (cons (list (buffer-file-name)) '(:maxlevel . 5)))))
      (call-interactively 'org-refile)
      (setq my-org-last-refile-marker (plist-get org-bookmark-names-plist :last-refile))))

  (defun my-org-refile-to-previous ()
    "Refile subtree to last position from `my-org-refile-in-file'."
    (interactive)
    (save-selected-window
      (when (eq major-mode 'org-agenda-mode)
        (org-agenda-switch-to))
      (org-cut-subtree)
      (save-window-excursion
        (save-excursion
          (bookmark-jump (plist-get org-bookmark-names-plist :last-refile))
          (let ((level (org-current-level)))
            (org-end-of-subtree t t)
            (org-paste-subtree))))))


  (define-key my-refile-map "," 'my-org-refile-to-previous)
  (define-key my-refile-map "." 'my-org-refile-in-file)
  ;; (my-defshortcut ?i "~/cloud/orgzly/Inbox.org")
  ;; (my-defshortcut ?o "~/cloud/orgzly/organizer.org")
  ;; (my-defshortcut ?s "~/personal/sewing.org")
  ;; (my-defshortcut ?b "~/personal/business.org")
  ;; (my-defshortcut ?p "~/personal/google-inbox.org")
  ;; (my-defshortcut ?P "~/personal/google-ideas.org")
  ;; (my-defshortcut ?B "~/Dropbox/books")
  ;; (my-defshortcut ?n "~/notes")
  ;; (my-defshortcut ?N "~/sync/notes/QuickNote.md")
  ;; (my-defshortcut ?w "~/Dropbox/public/sharing/index.org")
  ;; (my-defshortcut ?W "~/Dropbox/public/sharing/blog.org")
  ;; (my-defshortcut ?j "~/personal/journal.org")
  ;; (my-defshortcut ?J "~/cloud/a/Journal.csv")
  ;; (my-defshortcut ?I "~/Dropbox/Inbox")
  ;; (my-defshortcut ?g "~/sachac.github.io/evil-plans/index.org")
  ;; (my-defshortcut ?c "~/code/dev/elisp-course.org")
  ;; (my-defshortcut ?C "~/personal/calendar.org")
  ;; (my-defshortcut ?l "~/dropbox/public/sharing/learning.org")
  ;; (my-defshortcut ?q "~/sync/notes/QuickNote.md")
  ;; (my-defshortcut ?Q "~/personal/questions.org")

  (defmacro defshortcuts (name body &optional docstring &rest heads)
    (declare (indent defun) (doc-string 3))
    (cond ((stringp docstring))
          (t
           (setq heads (cons docstring heads))
           (setq docstring "")))
    (list
     'progn
     (append `(defhydra ,name (:exit t))
             (mapcar (lambda (h)
                       (list (elt h 0) (list 'find-file (elt h 1)) (elt h 2)))
                     heads))
     (cons 'progn
           (mapcar (lambda (h) (list 'my-defshortcut (string-to-char (elt h 0)) (elt h 1)))
                   heads))))

  (defmacro defshortcuts+ (name body &optional docstring &rest heads)
    (declare (indent defun) (doc-string 3))
    (cond ((stringp docstring))
          (t
           (setq heads (cons docstring heads))
           (setq docstring "")))
    (list
     'progn
     (append `(defhydra+ ,name (:exit t))
             (mapcar (lambda (h)
                       (list (elt h 0) (list 'find-file (elt h 1)) (elt h 2)))
                     heads))
     (cons 'progn
           (mapcar (lambda (h) (list 'my-defshortcut (string-to-char (elt h 0)) (elt h 1)))
                   heads))))
#+end_src
** GTD
#+begin_src emacs-lisp :tangle suk.el
  ;; GTD
  (setq org-use-fast-todo-selection t)
  ;; ! 的含义是记录某项更改为状态的时间。我不把这个添加到完成的状态，是因为它们已
  ;; 经被记录了。

  ;; @ 符号表示带理由的提示，所以当切换到 WAITTING 时，Org 模式会问我为什么，并将
  ;; 这个添加到笔记中。
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n!)"  "|" "DONE✔(d!)" "CANCELLED✘(c@/!)")
          (sequence "WAIT⚑(w@/!)" "HOLD(h@/!)" "|" "ABORT" "SOME" "PHONE" "MEETING")))
  (setq org-todo-keyword-faces
        '(("TODO" :foreground "red" :weight bold)
          ("NEXT" :foreground "blue" :weight bold)
          ("DONE✔" :foreground "forest green" :weight bold)
          ("WAIT⚑" :foreground "orange" :weight bold)
          ("HOLD" :foreground "magenta" :weight bold)
          ;;("CANCELLED" :foreground "forest grey" :weight bold)
          ("ABORT" :foreground "yellow" :weight bold)
          ("SOME" :foreground "lightgreen" :weight bold)
          ("MEETING" :foreground "lightblue" :weight bold)
          ("PHONE" :foreground "pink" :weight bold) ))


  (setq org-priority-faces
        '((?A . error)
          (?B . warning)
          (?C . success)))

  (setq org-tag-alist '((:startgroup . nil)
                      ("urgent-important" . ?u) ;; 第一象限：紧急且重要
                      ("not-urgent-important" . ?n) ;; 第二象限：不紧急但重要
                      ("urgent-not-important" . ?i) ;; 第三象限：紧急但不重要
                      ("not-urgent-not-important" . ?t) ;; 第四象限：不紧急且不重要
                      (:endgroup . nil)))

  ;; 可以使用 org-tags-view 来过滤和查看不同象限的任务
  ;; 例如：M-x org-tags-view RET +urgent-important
  ;; The triggers break down to the following rules:
  ;;   Moving a task to CANCELLED adds a CANCELLED tag
  ;;   Moving a task to WAITTING adds a WAITTING tag
  ;;   Moving a task to HOLD adds WAITTING and HOLD tags
  ;;   Moving a task to a done state removes WAITTING and HOLD tags
  ;;   Moving a task to TODO removes WAITTING, CANCELLED, and HOLD tags
  ;;   Moving a task to NEXT removes WAITTING, CANCELLED, and HOLD tags
  ;;   Moving a task to DONE removes WAITTING, CANCELLED, and HOLD tags
  (setq org-todo-state-tags-triggers
        '(("CANCELLED" ("CANCELLED" . t))
          ("WAIT⚑" ("WAITTING" . t))
          ("HOLD" ("WAITTING") ("HOLD" . t))
          (done ("WAITING") ("HOLD"))
          ("DONE" ("WAITTING") ("CANCELLED") ("HOLD"))
          ("ABORT" ("WAITTING") ("CANCELLED") ("HOLD"))
          ("TODO" ("WAITTING") ("CANCELLED") ("HOLD"))
          ("NEXT" ("WAITTING") ("CANCELLED") ("HOLD"))
          ("SOME" ("WAITTING") ("CANCELLED") ("HOLD"))))
  (setq org-log-done 'time)

  ;; Start the weekly agenda on Monday
  (setq org-agenda-start-on-weekday 1)
  (setq org-agenda-diary-file (expand-file-name "diary.org" org-files-directory))
  (setq org-agenda-block-separator ?─)
  (setq org-agenda-time-grid
        '((daily today require-timed)
          (800 1000 1200 1400 1600 1800 2000)
          " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
  (setq org-agenda-current-time-string
        "⭠ now ─────────────────────────────────────────────────")
  (setq org-agenda-diary-file (expand-file-name "diary.org" org-files-directory))
  ;; setup agenda files
  ;; org-mode manages the org-agenda-files variable automatically
  ;; using C-c [ and C-c ] to add and remove files respectively.
  ;; They can be files or directories.
  (setq org-agenda-files
        `(,(expand-file-name "gtd.org" org-files-directory)
          ,(expand-file-name "work.org" org-files-directory)
          ,(expand-file-name "finished.org" org-files-directory)
          ,(expand-file-name "cancel.org" org-files-directory)
          ,(expand-file-name "journal.org" org-files-directory)
          ,(expand-file-name "trash.org" org-files-directory)
          ;;,(expand-file-name "folder" org-files-directory)
          ))

#+end_src

** Capture
#+begin_src emacs-lisp :tangle suk.el
  ;; capture template
  (setq org-default-notes-file (expand-file-name "notes.org" org-files-directory))
  ;; Capture templates for: TODO tasks, Notes,
  ;; appointments, phone calls, meetings, and (setq
  ;; org-protocol)
  (setq org-capture-templates
        '(
          ("t" "Todo"
           entry (file+headline (expand-file-name "gtd.org" org-files-directory) "Tasks")
           "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
          ("n" "Note"
           entry (file (expand-file-name "notes.org" org-files-directory))
           "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
          ("r" "Respond"
           entry (file (expand-file-name "gtd.org" org-files-directory))
           "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n"
           :clock-in t :clock-resume t :immediate-finish t)
          ("j" "Journal"
           entry (file+datetree (expand-file-name "journal.org" org-files-directory))
           "* %?\nEntered on %U\n  %i\n  %a" :clock-in t :clock-resume t)
          ("w" "Review"
           entry (file (expand-file-name "gtd.org" org-files-directory))
           "* TODO Review %c\n%U\n"
           :immediate-finish t)
          ("m" "Meeting"
           entry (file (expand-file-name "gtd.org" org-files-directory))
           "* MEETING with %? :MEETING:\n%U"
           :clock-in t :clock-resume t)
          ("p" "Phone call"
           entry (file (expand-file-name "gtd.org" org-files-directory))
           "* PHONE %? :PHONE:\n%U"
           :clock-in t :clock-resume t)
          ("h" "Habit"
           entry (file (expand-file-name "gtd.org" org-files-directory))
           "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")
          ))
#+end_src
** Refile
#+begin_src emacs-lisp :tangle suk.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Refile settings
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Exclude DONE state tasks from refile targets
      ;;;###autoload
  (defun suk/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets."
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))

  ;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
  (setq org-refile-targets (quote ((nil :maxlevel . 9) (org-agenda-files :maxlevel . 9))))
  ;; Use full outline paths for refile targets
  (setq org-refile-use-outline-path t)
  (setq org-refile-target-verify-function 'suk/verify-refile-target)
  ;; Allow refile to create parent tasks with confirmation
  (setq org-refile-allow-creating-parent-nodes 'confirm)

#+end_src
** Exporter
#+begin_src emacs-lisp :tangle suk.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; EXPORTER
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
  ;; Inline images in HTML instead of producting links to the image
  (setq org-html-inline-images t)
  ;; Use (setq org-manual.css from the norang website for export document stylesheets)
  ;; (setq org-html-head-extra "<link rel=\"stylesheet\" href=\"org-manual.css\" type=\"text/css\" />")
  (setq org-html-head-include-default-style nil)
  ;; Do not generate internal css formatting for HTML exports
  (setq org-export-htmlize-output-type (quote css))
  ;; Increase default number of headings to export
  (setq org-export-headline-levels 6)
  (setq org-export-coding-system 'utf-8)
  (setq org-table-export-default-format "orgtbl-to-csv")
  ;; Do not generate internal css formatting for HTML exports
  (setq org-export-htmlize-output-type 'css)
  (setq org-export-with-timestamps nil)
  ;; _ 不转义，相当于#+OPTIONS: ^:{}
  (setq org-export-with-sub-superscripts '{})
  ;; Embed inline CSS read from a file.
    ;;;###autoload
  (defun null-or-unboundp (var)
    "Return t if VAR is either unbound or nil, otherwise return nil."
    (or (not (boundp var))
        (null (symbol-value var))))

      ;;;###autoload
  (defun my-org-inline-css-hook (exporter)
    "Insert custom inline css"
    (when (eq exporter 'html)
      (let* ((dir (ignore-errors (file-name-directory (buffer-file-name))))
             (path (concat dir "style.css"))
             ;;(path  org-css-file)
             (homestyle (and (or (null dir) (null (file-exists-p path)))
                             (not (null-or-unboundp 'my-org-inline-css-file))))
             (final (if homestyle my-org-inline-css-file path)))
        (if (file-exists-p final)
            (progn
              (setq-local org-html-head-include-default-style nil)
              (setq-local org-html-head
                          (concat
                           "<style type=\"text/css\">\n"
                           "<!--/*--><![CDATA[/*><!--*/\n"
                           (with-temp-buffer
                             (insert-file-contents final)
                             (buffer-string))
                           "/*]]>*/-->\n"
                           "</style>\n")))))))

  (add-hook 'org-export-before-processing-hook #'my-org-inline-css-hook)

  ;; https://github.com/marsmining/ox-twbs
  ;; M-x package-install [RET] ox-twbs [RET]
  ;; If the installation doesn’t work try refreshing the package list:
  ;; M-x package-refresh-contents [RET]
  ;; usage: org-twbs-export-to-html

  (use-package ox-twbs)
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "s-\\") 'my-org-publish-buffer)))

  (defun my-org-publish-buffer ()
    (interactive)
    (save-buffer)
    (org-twbs-export-to-html))
  (add-hook 'org-mode-hook
            (lambda ()
              "Beautify org symbols."
              (when suk-prettify-org-symbols-alist
                (if prettify-symbols-alist
                    (push suk-prettify-org-symbols-alist prettify-symbols-alist)
                  (setq prettify-symbols-alist suk-prettify-org-symbols-alist)))
              (prettify-symbols-mode 1)
              (abbrev-mode 1)
              (setq truncate-lines nil)
              (set-fill-column 70)
              (turn-on-font-lock)
              (load-org-font)
              ))

  ;; covert to html
  (use-package htmlize :defer 2)
  ;;(require-package 'ob-sagemath)
#+end_src
** Attachments
#+begin_src emacs-lisp :tangle suk.el
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;;; Attachments
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (setq org-id-method (quote uuidgen))
  ;; Say you want to attach a file x.sql to your current task. Create
  ;; the file data in /tmp/x.sql and save it.
  ;;
  ;; Attach the file with C-c C-a a and enter the filename: x.sql.
  ;; This generates a unique ID for the task and adds the file in the
  ;; attachment directory.
  ;;
  ;; * Attachments                                     :ATTACH:
  ;;   :PROPERTIES:
  ;;   :Attachments: x.sql
  ;;   :ID:       f1d38e9a-ff70-4cc4-ab50-e8b58b2aaa7b
  ;;   :END:
  ;;
  ;; The attached file is saved in
  ;; data/f1/d38e9a-ff70-4cc4-ab50-e8b58b2aaa7b/. Where it goes
  ;; exactly isn't important for me 鈥?as long as it is saved and
  ;; retrievable easily. Org-mode copies the original file /tmp/x.sql
  ;; into the appropriate attachment directory.
  ;;
  ;; Tasks with attachments automatically get an ATTACH tag so you can
  ;; easily find tasks with attachments with a tag search.
  ;;
  ;; To open the attachment for a task use C-c C-a o. This prompts for
  ;; the attachment to open and TAB completion works here.
  
#+end_src
** Use plantuml
#+begin_src emacs-lisp :tangle suk.el
  ;;(setq plantuml-default-exec-mode 'server) ;default
  ;; ;; Sample jar configuration
  ;; (setq plantuml-jar-path "/path/to/your/copy/of/plantuml.jar")
  ;; (setq plantuml-default-exec-mode 'jar)

  ;; ;; Sample executable configuration
  ;; (setq plantuml-executable-path "/path/to/your/copy/of/plantuml.bin")
  ;; (setq plantuml-default-exec-mode 'executable)
  (setq plantuml-default-exec-mode 'jar)
  (setq org-plantuml-jar-path
        (expand-file-name "C:/green/plantuml-1.2024.3.jar"))
  (setq org-plantuml-jar-args (list "-charset" "UTF-8"))
  ;; plantuml-java-args
  ;; plantuml-jar-args
  (defun my-org-plantuml-execute (orig-fun &rest args)
    (let (
          (plantuml-java-args (list
                               "-Djava.awt.headless=true"
                               "-Dfile.encoding=UTT-8"
                               "-jar"
                               "--illegal-access=deny"
                               ))
          (plantuml-jar-args (list  "-charset" "UTF-8")) ;default value
          )
      (apply orig-fun args)))

  (advice-add 'org-plantuml-execute :around #'my-org-plantuml-execute)
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((plantuml . t)
     (dot . t)
     ))
  ;;(setq process-environment (cons "PATH=D:/green/plantUML/bin;%PATH%" process-environment))

  ;; (defun my-org-export-before-processing-hook (backend)
  ;;   (let ((process-environment (cons "PATH=%PATH%" process-environment)))
  ;;     (org-babel-execute-src-block)
  ;;     (org-babel-execute-buffer)))

  ;; (add-hook 'org-export-before-processing-hook 'my-org-export-before-processing-hook)


  (defun my-org-mode-refresh-images ()
    (when (derived-mode-p 'org-mode) ; 确保当前模式是 Org-mode
      (org-redisplay-inline-images))) ; 刷新内嵌图片

  (add-hook 'org-babel-after-execute-hook 'my-org-mode-refresh-images)
#+end_src
** Use toc-org
#+begin_src emacs-lisp :tangle suk.el
  ;; org-mode
  (require-package 'toc-org)
#+end_src
** Use ppt
#+begin_src emacs-lisp :tangle suk.el
  ;; org => ppt
  ;;(require-package 'org-re-reveal)
#+end_src
** Use Tmr
#+begin_src emacs-lisp :tangle suk.el
  ;;;; Run commands in a popup frame
  (defun prot-window-delete-popup-frame (&rest _)
    "Kill selected selected frame if it has parameter `prot-window-popup-frame'.
      Use this function via a hook."
    (when (frame-parameter nil 'prot-window-popup-frame)
      (delete-frame)))
  (defmacro prot-window-define-with-popup-frame (command)
    "Define interactive function which calls COMMAND in a new frame.
      Make the new frame have the `prot-window-popup-frame' parameter."
    `(defun ,(intern (format "prot-window-popup-%s" command)) ()
       ,(format "Run `%s' in a popup frame with `prot-window-popup-frame' parameter.
      Also see `prot-window-delete-popup-frame'." command)
       (interactive)
       (let ((frame (make-frame '((prot-window-popup-frame . t)))))
         (select-frame frame)
         (switch-to-buffer " prot-window-hidden-buffer-for-popup-frame")
         (condition-case nil
             (call-interactively ',command)
           ((quit error user-error)
            (delete-frame frame))))))
  (declare-function org-capture "org-capture" (&optional goto keys))
  (defvar org-capture-after-finalize-hook)
      ;;;###autoload (autoload 'prot-window-popup-org-capture "prot-window")
  (prot-window-define-with-popup-frame org-capture)
  (add-hook 'org-capture-after-finalize-hook #'prot-window-delete-popup-frame)
  (require-package 'tmr)
  (declare-function tmr "tmr" (time &optional description acknowledgep))
  (defvar tmr-timer-created-functions)
      ;;;###autoload (autoload 'prot-window-popup-tmr "prot-window")
  (prot-window-define-with-popup-frame tmr)
  (add-hook 'tmr-timer-created-functions #'prot-window-delete-popup-frame)

  ;;;; The emacsclient calls that need ot be bound to system-wide keys
  ;; emacsclient -e '(prot-window-popup-org-capture)'
  ;; emacsclient -e '(prot-window-popup-tmr)'

#+end_src
** Use hydra
#+begin_src emacs-lisp :tangle suk.el

  (with-eval-after-load 'hydra
    (defshortcuts suk/file-shortcuts ()
      ("C" "~/proj/emacs-calendar/README.org" "Emacs calendar")
      ("e" "~/sync/emacs/Sacha.org" "Config")
      ("E" "~/sync/emacs-news/index.org" "Emacs News")
      ("f" "~/proj/font/README.org" "Font")
      ("I" "~/sync/orgzly/computer-inbox.org" "Computer inbox")
      ("i" "~/sync/orgzly/Inbox.org" "Phone inbox")
      ("o" "~/sync/orgzly/organizer.org" "Main org file")
      ("s" "~/proj/stream/notes.org" "Public Emacs notes")
      ("b" "~/sync/orgzly/business.org" "Business")
      ("p" "/scp:web:/mnt/prev/home/sacha/planet/en.ini" "Planet Emacsen")
      ("P" "~/sync/orgzly/posts.org" "Posts")
      ;;("B" "/ssh:web|sudo::/etc/nginx/sites-available" "Nginx sites")
      ("w" "~/Dropbox/public/sharing/index.org" "Sharing index")
      ("W" "~/Dropbox/public/sharing/blog.org" "Blog index")
      ("1" "~/proj/static-blog/" "Static blog")
      ("r" "~/sync/orgzly/reference.org" "Reference")
      ("R" "~/personal/reviews.org" "Reviews")
      ("g" "~/proj/sachac.github.io/evil-plans/index.org" "Evil plans"))
    )
  ;; ("C-c f" . #'suk/file-shortcuts/body)

#+end_src
** Use org-modern
#+begin_src emacs-lisp :tangle suk.el
  ;;Prettify UI
  (use-package org-modern
    :custom
    ;;  (org-modern-table nil)
    (prettify-symbols-alist nil)
    :config
    ;; Disable Prettify Symbols mode globally or locally as needed
    ;;(global-prettify-symbols-mode -1)
    :hook ((org-mode . org-modern-mode)
           (org-agenda-finalize . org-modern-agenda)
           ))
  
#+end_src
** Use org-roam
#+begin_src emacs-lisp :tangle suk.el
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    (setq org-roam-db-location "~/.emacs.d/var/org-roam.db")
    :custom
    ;; (org-roam-directory (file-truename "~/RoadNotes"))
    ;; The file-truename function is only necessary when you use
    ;; symbolic links inside org-roam-directory: Org-roam does not
    ;; resolve symbolic links.
    (make-directory (expand-file-name "daily" org-roam-directory) t)
    (org-roam-completion-everywhere t)
    (org-roam-dailies-capture-templates
     '(("d" "default" entry "* %<%I:%M %p>: %?"
        :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("n" . org-roam-dailies-capture-today)
           ("T" . org-roam-dailies-capture-tomorrow)
           ("v" . org-roam-dailies-capture-date)
           ("d" . org-roam-dailies-goto-today)
           ("t" . org-roam-dailies-goto-tomorrow)
           ("y" . org-roam-dailies-goto-yesterday)
           ("c" . org-roam-dailies-goto-date)
           ("b" . org-roam-dailies-goto-next-note)
           ("f" . org-roam-dailies-goto-previous-note)
           )
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode)

    )
#+end_src
** Add shortcuts
#+begin_src emacs-lisp :tangle etc/init-key.el
  ;;; --- 笔记管理和组织
  (define-prefix-command 'F9-map)
  (global-set-key (kbd "<f9>") 'F9-map)
  (lazy-load-global-keys
   '(("a" . org-agenda)
     ("A" . org-attach)
     ("s" . show-org-agenda)
     ("c" . org-capture)
     ("i" . org-toggle-inline-images)
     ("l" . org-toggle-link-display)
     ("d" . calendar)
     ("f" . suk/file-shortcuts/body)

     )
   "init-org"
   "<f9>")

    ;; I use C-c c to start capture mode
    (global-set-key (kbd "C-c c") #'org-capture)
    ;; ;; (global-set-key (kbd "C-c C") 'org-capture)
    (global-set-key "\C-cl" #'org-store-link)
    (global-set-key "\C-ca" #'org-agenda)
    ;;(global-set-key "\C-cb" #'org-iswitchb)

    ;; C-',  C-, is org-cycle-agenda-files keys
    ;; 新版的org-mode使用C-c C-, 替换了 <sTAB 提供的模板功能。

#+end_src
* Recentf
#+begin_src emacs-lisp :tangle suk.el
  ;; Recentf
  (setq recentf-save-file (concat suk-emacs-var-dir "/recentf"))
  ;;(setq recentf-save-file "~/.emacs.d/var/recentf")
  (use-package recentf
    :ensure nil
    :defer 1
    :init
    (setq recentf-save-file (concat suk-emacs-var-dir "/recentf"))
    ;;(setq recentf-save-file "~/.emacs.d/var/recentf")
    ;;(add-hook 'after-init-hook #'recentf-mode)
    (setq recentf-max-saved-items 500)
    (setq recentf-max-saved-items 17)
    (recentf-mode)
    (recentf-track-opened-file)

    :config
    (add-to-list 'recentf-exclude (expand-file-name package-user-dir))
    (add-to-list 'recentf-exclude ".cache")
    (add-to-list 'recentf-exclude ".cask")
    (add-to-list 'recentf-exclude ".elfeed")
    (add-to-list 'recentf-exclude "bookmarks")
    (add-to-list 'recentf-exclude "cache")
    (add-to-list 'recentf-exclude "persp-confs")
    (add-to-list 'recentf-exclude "recentf")
    (add-to-list 'recentf-exclude "url")
    (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'")
    (defun suk/recentf-exclude-p (file)
      (let ((file-dir (file-truename (file-name-directory file))))
        (-any-p (lamdba (dir)
                        (string-prefix-p dir file-dir))
                (mapcar 'file-truename (list var package-user-dir)))))
    (add-to-list 'recentf-exclude #'suk/recentf-exclude-p)
    )

#+end_src
* Tools
** 英文助手
#+begin_src emacs-lisp :tangle suk.el

  ;;; ### Company en words ###
  ;;; --- 英文助手
  (lazy-load-global-keys
   '(
     ("M-r" . toggle-company-english-helper) ;英文助手
     )
   "company-english-helper")
#+end_src
** Treemacs
A tree view component
#+begin_src emacs-lisp :tangle suk.el
  (lazy-load-global-keys
   '(
     ("<f8>" . treemacs)
    )
  "init-treemacs")
#+end_src
** NeoTree
Another tree view component
#+begin_src emacs-lisp :tangle suk.el
  ;; 设置打开 NeoTree 树形列表展示
  ;;(require-package 'neotree)
  ;;(use-package neotree
  ;;  :commands (projectile-switch-project neotree-dir)
  ;;  :config
  ;;  (setq neo-theme 'ascii           ; NeoTree 图标的样式
  ;;        neo-window-width 35
  ;;        neo-window-fixed-size nil) ; 设置 NeoTree 窗口的宽度可以使用鼠标调整
  ;;  :bind ("C-c o" . projectile-switch-project))


#+end_src

** Minor mode to aggressively keep your code always indented
#+begin_src emacs-lisp :tangle suk.el

  ;; Minor mode to aggressively keep your code always indented
  (use-package aggressive-indent
    :diminish
    :defer 2
    :hook ((after-init . global-aggressive-indent-mode)
           ;; NOTE: Disable in large files due to the performance issues
           ;; https://github.com/Malabarba/aggressive-indent-mode/issues/73
           (find-file . (lambda ()
                          (when (too-long-file-p)
                            (aggressive-indent-mode -1)))))
    :config
    ;; Disable in some modes
    (dolist (mode '(gitconfig-mode
                    asm-mode web-mode html-mode css-mode go-mode
                    scala-mode shell-mode term-mode vterm-mode
                    prolog-inferior-mode))
      (add-to-list 'aggressive-indent-excluded-modes mode))

    ;; Disable in some commands
    (add-to-list 'aggressive-indent-protected-commands
                 #'delete-trailing-whitespace t)

    ;; Be slightly less aggressive in C/C++/C#/Java/Go/Swift
    (add-to-list 'aggressive-indent-dont-indent-if
                 '(and (derived-mode-p
                        'c-mode 'c++-mode 'csharp-mode
                        'java-mode 'go-mode 'swift-mode)
                       (null (string-match "\\([;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)"
                                           )))))


#+end_src
** Markdown support
#+begin_src emacs-lisp :tangle suk.el
  (require-package 'markdown-mode)
#+end_src
** Which Keys
:PROPERTIES:
:CUSTOM_ID: setup-which-keys
:END:
<<setup-which-keys>>
install
#+begin_src emacs-lisp :tangle install.el
    (require-package 'which-key)
#+end_src
#+begin_src emacs-lisp :tangle suk.el

  ;; Display available keybindings in popup

  (use-package which-key
    :diminish
    :bind (("C-h M-m" . which-key-show-major-mode)
           (:map help-map ("C-h" . which-key-C-h-dispatch)))

    :hook (after-init . which-key-mode)
    ;;:custom
    ;; 弹出方式，底部弹出
    ;;(which-key-popup-type 'side-window)
    :init (setq which-key-max-description-length 30
                which-key-lighter nil
                which-key-show-remaining-keys t)
    :config
    (which-key-mode))

  (use-package which-key-posframe
    :after (which-key posframe)
    :config
    (which-key-posframe-mode 1))

#+end_src
** Music
#+begin_src emacs-lisp :tangle suk.el
  ;; Music
  ;;(require-package 'emms)
  ;;(require-package 'pulseaudio-control)  
#+end_src
** Pomodoro
#+begin_src emacs-lisp :tangle suk.el
  (require-package 'pomodoro) ;; notify you to take a break for a long time work. pomodoro-start, pomodoro-pause, pomodoro-stop
#+end_src
** Regex tool
#+begin_src emacs-lisp :tangle suk.el
  (require-package 'regex-tool)
#+end_src
** command log mode
#+begin_src emacs-lisp :tangle suk-unload.el
  (require-package 'command-log-mode) ;; show the command you press the shortcuts. M-x command-log-mode, M-x clm/open-command-log-buffer

#+end_src
** server
#+begin_src emacs-lisp :tangle suk.el
  ;;;; The emacsclient call depends on the daemon or `server-mode' (I use the latter)
  (use-package server
    :ensure nil
    :defer 1
    :config
    (unless (server-running-p)
      (server-start)))
#+end_src
** Misc
#+begin_src emacs-lisp :tangle suk.el
  ;; efficiency
  ;;(require-package 'esup)
  (require-package 'helpful)
  (require-package 'wc-mode)
  (require-package 'ws-butler)
  (require-package 'async)
  ;;(require-package 'amx)
  (require-package 'popup) ; some old package need it
  (require-package 'htmlize) ; prefer stable version
  (require-package 'diminish)
  ;;(require-package 'scratch)

  (require-package 'unfill)
  (when  sys/linuxp
    (require-package 'eww-lnum) ;; pluin for eww, a built-in web browser
  )
  (require-package 'rainbow-delimiters)

  ;; Tools

  ;;(require-package 'request) ;; a http client
  ;;(require-package 'websocket) ; for debug debugging of browsers
  ;;(require-package 'simple-httpd)
  ;;(require-package 'cpputils-cmake)
  ;;(require-package 'rust-mode)
  ;;(require-package 'auto-package-update)
  ;;(require-package 'keyfreq)

  ;; Test tools


  ;;(unless sys/win32p
  ;;  (use-package daemons)                 ; system services/daemons
  ;;  )

  ;;(use-package bind-key)
  ;;Enhance M-x, use counsel-M-x

#+end_src
* Session
加载保存的事务。
#+begin_src emacs-lisp :tangle suk.el
  (require-package 'session)
  (require 'auto-save)
  (require 'basic-toolkit)

  (setq desktop-load-locked-desktop t) ; don't popup dialog ask user, load anyway
  (setq desktop-restore-frames nil)    ; don't restore any frame

  (defun emacs-session-restore ()
    "Restore emacs session."
    (interactive)
    (ignore-errors
      ;; Kill other windows.
      (delete-other-windows)
      ;; Kill unused buffers.
      (kill-unused-buffers)
      ;; Restore session.
      (desktop-read "~/.emacs.d/var/")
      ))

  (defun emacs-session-save (&optional arg)
    "Save emacs session."
    (interactive "p")
    (ignore-errors
      (if (equal arg 4)
          ;; Kill all buffers if with prefix argument.
          (mapc 'kill-buffer (buffer-list))
        ;; Kill unused buffers.
        (kill-unused-buffers)
        ;; Save all buffers before exit.
        (auto-save-buffers))
      ;; Save session.
      (make-directory "~/.emacs.d/var/" t)
      (desktop-save "~/.emacs.d/var/")
      ;; Exit emacs.
      (kill-emacs)))

  (global-set-key (kbd "S-<f9>") 'emacs-session-save)
  (global-set-key (kbd "C-<f9>") 'emacs-session-save)

  (emacs-session-restore)
#+end_src
* Completion
** install
#+begin_src emacs-lisp :tangle install.el
  (require-package 'company)
  (require-package 'company-box)
#+end_src
** Company
#+begin_src emacs-lisp :tangle suk.el
  
  ;;据说跟 lsp-bridge 冲突

  ;;(require-package 'company-native-complete)
  (require-package 'company-c-headers)
  (require-package 'company-statistics)
  (use-package company
   :defer 2
   :diminish
   :defines (company-dabbrev-ignore-case company-dabbrev-downcase)
   :hook (after-init . global-company-mode)
   :init (setq company-tooltip-align-annotations t
               company-idle-delay 0 company-echo-delay 0
               company-minimum-prefix-length 1
               company-require-match nil
               company-dabbrev-ignore-case nil
               company-dabbrev-downcase nil
               company-show-numbers t)
   :config
   (setq switch-window-input-style 'minibuffer)
   (setq switch-window-increase 4)
   (setq switch-window-threshold 2)
   (setq switch-window-shortcut-sytle 'querty)
   (setq switch-window-qwerty-shortcuts
         '("a" "s" "d" "f" "j" "k" "l"))
   (setq company-minimum-prefix-length 1)
   (setq company-show-quick-access t)
   :bind (:map company-active-map
               ("C-n" . #'company-select-next)
               ("C-p" . #'company-select-previous)
               ("TAB" . company-complete-selection)
               ("M-h" . company-complete-selection)
               ("M-H" . company-complete-common)
               ("M-s" . company-search-candidates)
               ("M-S" . company-filter-candidates)
               ("M-n" . company-select-next)
               ("M-p" . company-select-previous))
   (:map leader-key
         ("c s" . #'company-yasnippet
          ))
   )
  (use-package company-box
   :ensure nil)

#+end_src
** Use orderless
#+begin_src emacs-lisp :tangle suk.el
  ;; Optionally use the `orderless' completion style.
  (require-package 'orderless)
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion))))
    (orderless-component-separator #'orderless-escapable-split-on-space))
  ;; Support Pinyin
  (use-package pinyinlib
    :after orderless
    :autoload pinyinlib-build-regexp-string
    :init
    (defun completion--regex-pinyin (str)
      (orderless-regexp (pinyinlib-build-regexp-string str)))
    (add-to-list 'orderless-matching-styles 'completion--regex-pinyin))
#+end_src
** Use consult
#+begin_src emacs-lisp :tangle suk.el
  (use-package consult
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h"   . consult-history)
           ("C-c k"   . consult-kmacro)
           ("C-c m"   . consult-man)
           ("C-c i"   . consult-info)
           ("C-c r"   . consult-ripgrep)
           ("C-c T"   . consult-theme)
           ("C-."     . consult-imenu)

           ;;("C-c c e" . consult-colors-emacs)
           ;;("C-c c w" . consult-colors-web)
           ;;("C-c c f" . describe-face)
           ;;("C-c c t" . consult-theme)

           ([remap Info-search]        . consult-info)
           ([remap isearch-forward]    . consult-line)
           ([remap recentf-open-files] . consult-recent-file)

           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b"   . consult-buffer)              ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#"     . consult-register-load)
           ("M-'"     . consult-register-store)        ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#"   . consult-register)
           ;; Other custom bindings
           ("M-y"     . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e"   . consult-compile-error)
           ("M-g g"   . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o"   . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m"   . consult-mark)
           ("M-g k"   . consult-global-mark)
           ("M-g i"   . consult-imenu)
           ("M-g I"   . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d"   . consult-find)
           ("M-s D"   . consult-locate)
           ("M-s g"   . consult-grep)
           ("M-s G"   . consult-git-grep)
           ("M-s r"   . consult-ripgrep)
           ("M-s l"   . consult-line)
           ("M-s L"   . consult-line-multi)
           ("M-s k"   . consult-keep-lines)
           ("M-s u"   . consult-focus-lines)
           ;; Isearch integration
           ("M-s e"   . consult-isearch-history)
           :map isearch-mode-map
           ("M-e"     . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s e"   . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l"   . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L"   . consult-line-multi)            ;; needed by consult-line to detect isearch

           ;; Minibuffer history
           :map minibuffer-local-map
           ("C-s" . (lambda ()
                      "Insert the selected region or current symbol at point."
                      (interactive)
                      (insert (with-current-buffer
                                  (window-buffer (minibuffer-selected-window))
                                (or (and transient-mark-mode mark-active (/= (point) (mark))
                                         (buffer-substring-no-properties (point) (mark)))
                                    (thing-at-point 'symbol t)
                                    "")))))
           ("M-s" . consult-history) ;;orig. next-matching-history-element
           ("M-r" . consult-history))   ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init
    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)
    :config
    (use-package consult-flyspell
      :bind ("M-g s" . consult-flyspell))

    (use-package consult-yasnippet
      :bind ("M-g y" . consult-yasnippet))
    ;; Use Consult to select xref locations with preview
    (with-eval-after-load 'xref
      (setq xref-show-xrefs-function #'consult-xref
            xref-show-definitions-function #'consult-xref))
    )


#+end_src
** nerd-icons-completion
#+begin_src emacs-lisp :tangle suk.el
  
  (use-package nerd-icons-completion
    :when (icons-displayable-p)
    :hook (vertico-mode . nerd-icons-completion-mode))
#+end_src
** Misc
#+begin_src emacs-lisp :tangle suk.el
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Only list the commands of the current modes
    (when (boundp 'read-extended-command-predicate)
      (setq read-extended-command-predicate
            #'command-completion-default-include-p))

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))

  ;; More utils
  (use-package shackle)

  (unless (display-graphic-p)
    ;; only conole packages
    )


 

#+end_src
* Terminal
#+begin_src emacs-lisp :tangle suk.el
  (when sys/linuxp
    (use-package vterm))
#+end_src
* Viewer
#+begin_src emacs-lisp :tangle suk.el
    ;; viwer
  (when sys/linuxp
    ;; run "M-x pdf-tool-install" at debian and open pdf in GUI Emacs
    ;;(require-package 'pdf-tools) ;; use the package in extension
    (require-package 'nov) ; read epub
    )
#+end_src
* Coding
其实使用emacs来做工程开发是不太好，用来编写一啲脚本类嘅还好。
** Git
在WIndows下效率极低，速度好慢，冇必要使用。
#+begin_src emacs-lisp :tangle suk.el
  (when sys/linuxp
   (require-package 'magit)
   (require-package 'fringe-helper)
   (require-package 'git-gutter) ; dependent to fringe-helper
   (require-package 'git-modes)
   )
#+end_src
** Modes
#+begin_src emacs-lisp :tangle suk.el
  (require-package 'web-mode)
  ;;(require-package 'lua-mode)
  (require-package 'yaml-mode)
  (require-package 'js2-mode)
  ;; (require-package 'rjsx-mode) ; use my package in extensions
  (require-package 'csv-mode)
  (require-package 'emmet-mode)
  ;;(require-package 'groovy-mode)
  ;; magit sometime use packages which not released yet
  ;; so we place it at the end to make sure other packages are installed first
  ;;(require-package 'graphql-mode)
  (require-package 'auto-yasnippet)
  (require-package 'typescript-mode)
  (require-package 'nvm)
  ;; Misc. programming modes
  (use-package csv-mode)
  (use-package yaml-mode)
 
  ;;(require-package 'elpy) ;; python
  ;;(require-package 'request) ;; a http client
  ;;(require-package 'websocket) ; for debug debugging of browsers
  ;;(require-package 'simple-httpd)
  ;;(require-package 'highlight-symbol)
  ;;(require-package 'cpputils-cmake)
  ;;(require-package 'rust-mode)
  ;;(require-package 'cmake-mode)
  ;;(require-package 'sage-shell-mode)
#+end_src
** Formatter
#+begin_src emacs-lisp :tangle suk.el

  ;; format all, formatter for almost languages
  ;; great for programmers
  (require-package 'format-all)
  (use-package format-all
    :ensure t
    :hook (prog-mode . format-all-ensure-formatter)
    :bind ("C-c f" . #'format-all-buffer))

  ;; Format HTML, CSS and JavaScript/JSON
  ;; Install: npm -g install prettier
  (when (executable-find "prettier")
    (use-package prettier
      :diminish
      :hook ((js-mode js2-mode css-mode sgml-mode web-mode) . prettier-mode)
      :init (setq prettier-pre-warm 'none)))

  (use-package prettier-js
    :ensure t
    :defer 3
    :hook ((css-mode web-mode typescript-mode js-mode json-mode js2-mode) . prettier-js-mode))

#+end_src
** Hideshow
#+begin_src emacs-lisp :tangle suk.el
  ;; 折叠和收缩代码
  ;; builtin
  (use-package hideshow
    :diminish hs-minor-mode
    :pretty-hydra
    ((:title (pretty-hydra-title "HideShow" 'octicon "nf-oct-fold")
             :color amaranth :quit-key ("q" "C-g"))
     ("Fold"
      (("t" hs-toggle-all "toggle all")
       ("a" hs-show-all "show all")
       ("i" hs-hide-all "hide all")
       ("g" hs-toggle-hiding "toggle hiding")
       ("c" hs-cycle "cycle block")
       ("s" hs-show-block "show block")
       ("h" hs-hide-block "hide block")
       ("l" hs-hide-level "hide level"))
      "Move"
      (("C-a" mwim-beginning-of-code-or-line "⭰")
       ("C-e" mwim-end-of-code-or-line "⭲")
       ("C-b" backward-char "←")
       ("C-n" next-line "↓")
       ("C-p" previous-line "↑")
       ("C-f" forward-char "→")
       ("C-v" pager-page-down "↘")
       ("M-v" pager-page-up "↖")
       ("M-<" beginning-of-buffer "⭶")
       ("M->" end-of-buffer "⭸"))))
    :bind
    (:map hs-minor-mode-map
          ("C-~" . hideshow-hydra/body)
          ("C-S-<escape>" . hideshow-hydra/body)
          ("C-c ." . hs-toggle-hiding)
          ("C-c ," . hs-show-all)
          )
    :hook (prog-mode . hs-minor-mode)
    :config
    ;;代码折叠
    (add-hook 'c-mode-common-hook   'hs-minor-mode)
    (add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
    (add-hook 'java-mode-hook       'hs-minor-mode)
    (add-hook 'ess-mode-hook        'hs-minor-mode)
    (add-hook 'perl-mode-hook       'hs-minor-mode)
    (add-hook 'sh-mode-hook         'hs-minor-mode)
    (add-hook 'python-mode-hook     'hs-minor-mode)
    ;; More functions
    ;; @see https://karthinks.com/software/simple-folding-with-hideshow/
    (defun hs-cycle (&optional level)
      (interactive "p")
      (let (message-log-max
            (inhibit-message t))
        (if (= level 1)
            (pcase last-command
              ('hs-cycle
               (hs-hide-level 1)
               (setq this-command 'hs-cycle-children))
              ('hs-cycle-children
               (save-excursion (hs-show-block))
               (setq this-command 'hs-cycle-subtree))
              ('hs-cycle-subtree
               (hs-hide-block))
              (_
               (if (not (hs-already-hidden-p))
                   (hs-hide-block)
                 (hs-hide-level 1)
                 (setq this-command 'hs-cycle-children))))
          (hs-hide-level level)
          (setq this-command 'hs-hide-level))))

    (defun hs-toggle-all ()
      "Toggle hide/show all."
      (interactive)
      (pcase last-command
        ('hs-toggle-all
         (save-excursion (hs-show-all))
         (setq this-command 'hs-global-show))
        (_ (hs-hide-all))))

    ;; Display line counts
    (defun hs-display-code-line-counts (ov)
      "Display line counts when hiding codes."
      (when (eq 'code (overlay-get ov 'hs))
        (overlay-put ov 'display
                     (concat
                      " "
                      (propertize
                       (if (char-displayable-p ?⏷) "⏷" "...")
                       'face 'shadow)
                      (propertize
                       (format " (%d lines)"
                               (count-lines (overlay-start ov)
                                            (overlay-end ov)))
                       'face '(:inherit shadow :height 0.8))
                      " "))))
    (setq hs-set-up-overlay #'hs-display-code-line-counts))

#+end_src
*** Add shortcuts.
#+begin_src emacs-lisp :tangle etc/init-key.el
 (lazy-load-set-keys
   '(
     ([S-f6] . hs-minor-mode)
     ("C-c ." . hs-toggle-hiding)
     ("C-c ," . hs-show-all)
     )
   )

#+end_src
** Display line numbers
#+begin_src emacs-lisp :tangle suk.el
  ;; 设置行号
  ;; builtin
  (require 'display-line-numbers)
  ;;(global-display-line-numbers-mode 1)
  ;; Alternatively, to use it only in programming modes:
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)

  ;; Line numbers are not displayed when large files are used.
  (setq line-number-display-limit large-file-warning-threshold)
  (setq line-number-display-limit-width 1000)

  (dolist (hook (list
                 'c-mode-common-hook
                 'c-mode-hook
                 'emacs-lisp-mode-hook
                 'lisp-interaction-mode-hook
                 'lisp-mode-hook
                 'java-mode-hook
                 'asm-mode-hook
                 'haskell-mode-hook
                 'rcirc-mode-hook
                 'erc-mode-hook
                 'sh-mode-hook
                 'makefile-gmake-mode-hook
                 'python-mode-hook
                 'js-mode-hook
                 'html-mode-hook
                 'css-mode-hook
                 'tuareg-mode-hook
                 'go-mode-hook
                 'coffee-mode-hook
                 'qml-mode-hook
                 'markdown-mode-hook
                 'slime-repl-mode-hook
                 'package-menu-mode-hook
                 'cmake-mode-hook
                 'php-mode-hook
                 'web-mode-hook
                 'coffee-mode-hook
                 'sws-mode-hook
                 'jade-mode-hook
                 'vala-mode-hook
                 'rust-mode-hook
                 'ruby-mode-hook
                 'qmake-mode-hook
                 'lua-mode-hook
                 'swift-mode-hook
                 'llvm-mode-hook
                 'conf-toml-mode-hook
                 'nxml-mode-hook
                 'nim-mode-hook
                 'typescript-mode-hook
                 'elixir-mode-hook
                 'clojure-mode-hook
                 'dart-mode-hook
                 'zig-mode-hook

                 'c-ts-mode-hook
                 'c++-ts-mode-hook
                 'cmake-ts-mode-hook
                 'toml-ts-mode-hook
                 'css-ts-mode-hook
                 'js-ts-mode-hook
                 'json-ts-mode-hook
                 'python-ts-mode-hook
                 'bash-ts-mode-hook
                 'typescript-ts-mode-hook
                 'rust-ts-mode-hook
                 'java-ts-mode-hook
                 'kotlin-mode-hook
                 'prog-mode-hook
                 'yaml-mode-hook
                 'conf-mode-hook
                 ))
    (add-hook hook (lambda () (display-line-numbers-mode))))


  ;;;###autoload
  (defun my-use-tags-as-imenu-function-p ()
    "Can use tags file to build imenu function"
    (my-ensure 'counsel-etags)
    (and (locate-dominating-file default-directory "TAGS")
         ;; latest universal ctags has built in parser for javascript/typescript
         (counsel-etags-universal-ctags-p "ctags")
         (memq major-mode '(typescript-mode js-mode javascript-mode))))

  ;; }}



#+end_src
** lsp
 settings for LSP
*** use  lsp
#+begin_src emacs-lisp :tangle suk-unload.el
  ;;(require-package 'lsp-mode)
  ;;(require-package 'lsp-ui)
  ;;(require-package 'dap-mode)
#+end_src
*** use eglot
因为影响了org-mode的export，原因不详。
给出的信息太少了，无法定位
: progn: Wrong type argument: consp, nil
鬼知係边，呢个系elisp乞人憎嘅地方。
暂时不使用。
#+begin_src emacs-lisp :tangle suk-unload.el
  (require 'eglot)
  ;; Java
  (defconst my-eclipse-jdt-home "/home/suk/.local/share/eclipse.jdt.ls/plugins/org.eclipse.equinox.launcher_1.6.700.v20231214-2017.jar")
  (add-hook 'java-mode-hook 'eglot-java-mode)
  (use-package eglot-java)
  (with-eval-after-load 'eglot-java
    (define-key eglot-java-mode-map (kbd "C-c l n") #'eglot-java-file-new)
    (define-key eglot-java-mode-map (kbd "C-c l x") #'eglot-java-run-main)
    (define-key eglot-java-mode-map (kbd "C-c l t") #'eglot-java-run-test)
    (define-key eglot-java-mode-map (kbd "C-c l N") #'eglot-java-project-new)
    (define-key eglot-java-mode-map (kbd "C-c l T") #'eglot-java-project-build-task)
    (define-key eglot-java-mode-map (kbd "C-c l R") #'eglot-java-project-build-refresh))
#+end_src

** Show function arglist or varibale docstring
#+begin_src emacs-lisp :tangle suk.el
  ;;Show function arglist or variable docstring
  (run-with-idle-timer
   1
   nil
   #'(lambda()
       (use-package eldoc
         :ensure nil
         :diminish
         :config
         (use-package eldoc-box
             :diminish (eldoc-box-hover-mode eldoc-box-hover-at-point-mode)
             :custom
             (eldoc-box-lighter nil)
             (eldoc-box-only-multi-line t)
             (eldoc-box-clear-with-C-g t)
             :custom-face
             (eldoc-box-border ((t (:inherit posframe-border :background unspecified))))
             (eldoc-box-body ((t (:inherit tooltip))))
             :hook ((eglot-managed-mode . eldoc-box-hover-at-point-mode))
             :config
             ;; Prettify `eldoc-box' frame
             (setf (alist-get 'left-fringe eldoc-box-frame-parameters) 8
                   (alist-get 'right-fringe eldoc-box-frame-parameters) 8)))
       ))
#+end_src
** Corss referencing
#+begin_src emacs-lisp :tangle suk.el
  ;; Cross-referencing commands
  (use-package xref
    :bind (("M-g ." . xref-find-definitions)
           ("M-g ," . xref-go-back))
    :init
    ;; Use faster search tool
    (when (executable-find "rg")
      (setq xref-search-program 'ripgrep))

    ;; Select from xref candidates in minibuffer
    (setq xref-show-definitions-function #'xref-show-definitions-completing-read
          xref-show-xrefs-function #'xref-show-definitions-completing-read))

  ;; Jump to definition
  (use-package dumb-jump
    :pretty-hydra
    ((:title (pretty-hydra-title "Dump Jump" 'faicon "nf-fa-anchor")
             :color blue :quit-key ("q" "C-g"))
     ("Jump"
      (("j" dumb-jump-go "Go")
       ("o" dumb-jump-go-other-window "Go other window")
       ("e" dumb-jump-go-prefer-external "Go external")
       ("x" dumb-jump-go-prefer-external-other-window "Go external other window"))
      "Other"
      (("i" dumb-jump-go-prompt "Prompt")
       ("l" dumb-jump-quick-look "Quick look")
       ("b" dumb-jump-back "Back"))))
    :bind (("C-M-j" . dumb-jump-hydra/body))
    :init
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
    (setq dumb-jump-selector 'completing-read))
#+end_src
** Treesit
#+begin_src emacs-lisp :tangle suk-unload.el
  ;; Tree-sitter support
  (when sys/linuxp
    (require-package 'treesit-auto)
    (use-package treesit-auto
       :ensure t
       :hook (after-init . global-treesit-auto-mode)
       :init (setq treesit-auto-install 'prompt))
    (global-treesit-auto-mode)
#+end_src
** copilot
#+begin_src emacs-lisp :tangle suk.el

  ;;(setq copilot-node-executable "C:\\green\\node-v20.10.0-win-x64\\node.exe")
  ;;(add-to-list 'load-path "C:\\green\\emacs-suk\\.emacs.d\\extensions\\copilot\\copilot.el")
  ;;(require 'copilot)
  ;;(add-hook 'prog-mode-hook 'copilot-mode)
  ;; To customize the behavior of copilot-mode, please check copilot-enable-predicates and copilot-disable-predicates.
  ;; You need to bind copilot-complete to some key and call copilot-clear-overlay inside post-command-hook.
  ;;(define-key copilot-completion-map
  ;;            (kbd "<tab>")
  ;;            'copilot-accept-completion)
  ;;(define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)
  ;; (add-to-list 'copilot-major-mode-alist '("jsonl" . "json"))
  ;; Login to Copilot by M-x copilot-login. You can also check the status by M-x copilot-diagnose (NotAuthorized means you don't have a valid subscription).

#+end_src
** Web
*** Typescript
#+begin_src emacs-lisp :tangle suk.el


  ;; {{ typescript
  (use-package typescript-mode
    :load-path "~/.emacs.d/extensions/typescript"
    :hook ((typescript-mode . (typescript-mode-hook-setup)))
    :config
    (defun typescript-mode-hook-setup ()
      "Set up `typescript-mode'."
      (when (my-use-tags-as-imenu-function-p)
        ;; use ctags to calculate imenu items
        (setq imenu-create-index-function
              'counsel-etags-imenu-default-create-index-function)))

    (defun my-typescript-beginning-of-defun-hack (orig-func &rest args)
      "Overwrite typescript beginning detection."
      (ignore orig-func)
      (ignore args)
      (when (my-use-tags-as-imenu-function-p)
        (let* ((closest (my-closest-imenu-item)))
          (when closest
            (imenu closest)))))
    (advice-add 'typescript-beginning-of-defun
                :around #'my-typescript-beginning-of-defun-hack)
    )



#+end_src
*** CSS
#+begin_src emacs-lisp :tangle suk.el

  ;; CSS
  (use-package css-mode
    :init (setq css-indent-offset 2))

  ;; SCSS
  (use-package scss-mode
    :init (setq scss-compile-at-save nil))

  ;; LESS
  (unless (fboundp 'less-css-mode)
    (use-package less-css-mode))

#+end_src
*** Javascript
#+begin_src emacs-lisp :tangle suk.el
  ;; JSON
  (unless (fboundp 'js-json-mode)
    (use-package json-mode
      :load-path "~/.emacs.d/extensions/json-mode"))

  ;; JavaScript
  (use-package js
    :init (setq js-indent-level 2))

  (with-eval-after-load 'js-mode
    ;; '$' is part of variable name like '$item'
    (modify-syntax-entry ?$ "w" js-mode-syntax-table))

  (use-package js2-mode
    :mode (("\\.js\\'" . js2-minor-mode)
           ("\\.jsx\\'" . js2-minor-jsx-mode))
    :interpreter (("node" . js2-minor-mode)
                  ("node" . js2-minor-jsx-mode))
    :hook ((js2-minor-mode . (lambda()  (js2-imenu-extras-mode)
                               (js2-highlight-unused-variables-mode)

                               )))
    :config
    (defun my-validate-json-or-js-expression (&optional not-json-p)
      "Validate buffer or select region as JSON.
  If NOT-JSON-P is not nil, validate as Javascript expression instead of JSON."
      (interactive "P")
      (let* ((json-exp (if (region-active-p) (my-selected-str)
                         (my-buffer-str)))
             (jsbuf-offet (if not-json-p 0 (length "var a=")))
             errs
             first-err
             (first-err-pos (if (region-active-p) (region-beginning) 0)))
        (unless not-json-p
          (setq json-exp (format "var a=%s;"  json-exp)))
        (with-temp-buffer
          (insert json-exp)
          (my-ensure 'js2-mode)
          (js2-parse)
          (setq errs (js2-errors))
          (cond
           ((not errs)
            (message "NO error found. Good job!"))
           (t
            ;; yes, first error in buffer is the last element in errs
            (setq first-err (car (last errs)))
            (setq first-err-pos (+ first-err-pos (- (cadr first-err) jsbuf-offet)))
            (message "%d error(s), first at buffer position %d: %s"
                     (length errs)
                     first-err-pos
                     (js2-get-msg (caar first-err))))))
        (if first-err (goto-char first-err-pos))))

    (defun my-print-json-path (&optional hardcoded-array-index)
      "Print the path to the JSON value under point, and save it in the kill ring.
  If HARDCODED-ARRAY-INDEX provided, array index in JSON path is replaced with it."
      (interactive "P")
      (cond
       ((memq major-mode '(js2-mode))
        (js2-print-json-path hardcoded-array-index))
       (t
        (let* ((cur-pos (point))
               (str (my-buffer-str)))
          (when (string= "json" (file-name-extension buffer-file-name))
            (setq str (format "var a=%s;" str))
            (setq cur-pos (+ cur-pos (length "var a="))))
          (my-ensure 'js2-mode)
          (with-temp-buffer
            (insert str)
            (js2-init-scanner)
            (js2-do-parse)
            (goto-char cur-pos)
            (js2-print-json-path))))))
    (defun my-print-json-path (&optional hardcoded-array-index)
      "Print the path to the JSON value under point, and save it in the kill ring.
  If HARDCODED-ARRAY-INDEX provided, array index in JSON path is replaced with it."
      (interactive "P")
      (cond
       ((memq major-mode '(js2-mode))
        (js2-print-json-path hardcoded-array-index))
       (t
        (let* ((cur-pos (point))
               (str (my-buffer-str)))
          (when (string= "json" (file-name-extension buffer-file-name))
            (setq str (format "var a=%s;" str))
            (setq cur-pos (+ cur-pos (length "var a="))))
          (my-ensure 'js2-mode)
          (with-temp-buffer
            (insert str)
            (js2-init-scanner)
            (js2-do-parse)
            (goto-char cur-pos)
            (js2-print-json-path))))))


    ;;Latest rjsx-mode does not have indentation issue
    ;;@see https://emacs.stackexchange.com/questions/33536/how-to-edit-jsx-react-files-in-emacs
    (setq-default js2-additional-externs
                  '("$"
                    "$A" ; salesforce lightning component
                    "$LightningApp" ; salesforce
                    "AccessifyHTML5"
                    "Blob"
                    "FormData"
                    "KeyEvent"
                    "Raphael"
                    "React"
                    "URLSearchParams"
                    "__dirname" ; Node
                    "_content" ; Keysnail
                    "after"
                    "afterEach"
                    "angular"
                    "app"
                    "assert"
                    "assign"
                    "before"
                    "beforeEach"
                    "browser"
                    "by"
                    "clearInterval"
                    "clearTimeout"
                    "command" ; Keysnail
                    "content" ; Keysnail
                    "decodeURI"
                    "define"
                    "describe"
                    "display" ; Keysnail
                    "documentRef"
                    "element"
                    "encodeURI"
                    "expect"
                    "ext" ; Keysnail
                    "fetch"
                    "gBrowser" ; Keysnail
                    "global"
                    "goDoCommand" ; Keysnail
                    "hook" ; Keysnail
                    "inject"
                    "isDev"
                    "it"
                    "jest"
                    "jQuery"
                    "jasmine"
                    "key" ; Keysnail
                    "ko"
                    "log"
                    "mockStore"
                    "module"
                    "mountWithTheme"
                    "plugins" ; Keysnail
                    "process"
                    "require"
                    "setInterval"
                    "setTimeout"
                    "shell" ; Keysnail
                    "tileTabs" ; Firefox addon
                    "util" ; Keysnail
                    "utag") )
    )

  (use-package rjsx-mode
    :load-path "~/.emacs.d/extensions/rjsx-mode"
    :mode ("\\.js\\'")
    :hook ((rjsx-mode .  (lambda()
                           (flycheck-add-mode 'javascript-eslint 'rjsx-mode)
                           (flycheck-select-checker 'javascript-eslint))))
    ;;:config
    ;;(add-hook 'rjsx-mode-hook 'setup)

    )

  ;; @see https://github.com/felipeochoa/rjsx-mode/issues/33
  (with-eval-after-load 'rjsx-mode
    (define-key rjsx-mode-map "<" nil))


  (require-package 'emmet-mode)
  (use-package emmet-mode
    :defer 3
    :init (setq emmet-expand-jsx-className? t)
    :hook (web-mode typescript-mode js-mode js2-mode rjsx-mode css-mode scss-mode sgml-mode))


  ;; Major mode for editing web templates
  (use-package web-mode
    :mode "\\.\\(phtml\\|php\\|[gj]sp\\|as[cp]x\\|erb\\|djhtml\\|html?\\|hbs\\|ejs\\|jade\\|swig\\|tm?pl\\|vue\\)$"
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-enable-auto-closing t) ; enable auto close tag in text-mode
    (setq web-mode-enable-auto-pairing t)
    (setq web-mode-auto-close-style 2)
    (setq web-mode-enable-css-colorization t)
    (setq web-mode-imenu-regexp-list
          '(("<\\(h[1-9]\\)\\([^>]*\\)>\\([^<]*\\)" 1 3 ">" nil)
            ("^[ \t]*<\\([@a-z]+\\)[^>]*>? *$" 1 " id=\"\\([a-zA-Z0-9_]+\\)\"" "#" ">")
            ("^[ \t]*<\\(@[a-z.]+\\)[^>]*>? *$" 1 " contentId=\"\\([a-zA-Z0-9_]+\\)\"" "=" ">")
            ;; angular imenu
            (" \\(ng-[a-z]*\\)=\"\\([^\"]+\\)" 1 2 "="))))


  ;; Adds node_modules/.bin directory to `exec_path'
  (use-package add-node-modules-path
     :hook ((web-mode js-mode js2-mode) . add-node-modules-path))

  (setq-default js2-use-font-lock-faces t
                js2-mode-must-byte-compile nil
                ;; {{ comment indention in modern frontend development
                javascript-indent-level 2
                js-indent-level 2
                css-indent-offset 2
                typescript-indent-level 2
                ;; }}
                js2-strict-trailing-comma-warning nil ; it's encouraged to use trailing comma in ES6
                js2-idle-timer-delay 0.5 ; NOT too big for real time syntax check
                js2-auto-indent-p nil
                js2-indent-on-enter-key nil ; annoying instead useful
                js2-skip-preprocessor-directives t
                js2-strict-inconsistent-return-warning nil ; return <=> return null
                js2-enter-indents-newline nil
                js2-bounce-indent-p t)

  (with-eval-after-load 'js-mode
    ;; '$' is part of variable name like '$item'
    (modify-syntax-entry ?$ "w" js-mode-syntax-table))

  (defun my-validate-json-or-js-expression (&optional not-json-p)
    "Validate buffer or select region as JSON.
  If NOT-JSON-P is not nil, validate as Javascript expression instead of JSON."
    (interactive "P")
    (let* ((json-exp (if (region-active-p) (my-selected-str)
                       (my-buffer-str)))
           (jsbuf-offet (if not-json-p 0 (length "var a=")))
           errs
           first-err
           (first-err-pos (if (region-active-p) (region-beginning) 0)))
      (unless not-json-p
        (setq json-exp (format "var a=%s;"  json-exp)))
      (with-temp-buffer
        (insert json-exp)
        (my-ensure 'js2-mode)
        (js2-parse)
        (setq errs (js2-errors))
        (cond
         ((not errs)
          (message "NO error found. Good job!"))
         (t
          ;; yes, first error in buffer is the last element in errs
          (setq first-err (car (last errs)))
          (setq first-err-pos (+ first-err-pos (- (cadr first-err) jsbuf-offet)))
          (message "%d error(s), first at buffer position %d: %s"
                   (length errs)
                   first-err-pos
                   (js2-get-msg (caar first-err))))))
      (if first-err (goto-char first-err-pos))))

  (defun my-print-json-path (&optional hardcoded-array-index)
    "Print the path to the JSON value under point, and save it in the kill ring.
  If HARDCODED-ARRAY-INDEX provided, array index in JSON path is replaced with it."
    (interactive "P")
    (cond
     ((memq major-mode '(js2-mode))
      (js2-print-json-path hardcoded-array-index))
     (t
      (let* ((cur-pos (point))
             (str (my-buffer-str)))
        (when (string= "json" (file-name-extension buffer-file-name))
          (setq str (format "var a=%s;" str))
          (setq cur-pos (+ cur-pos (length "var a="))))
        (my-ensure 'js2-mode)
        (with-temp-buffer
          (insert str)
          (js2-init-scanner)
          (js2-do-parse)
          (goto-char cur-pos)
          (js2-print-json-path))))))

  (with-eval-after-load 'js2-mode
    ;; I hate the hotkeys to hide things
    (define-key js2-mode-map (kbd "C-c C-e") nil)
    (define-key js2-mode-map (kbd "C-c C-s") nil)
    (define-key js2-mode-map (kbd "C-c C-f") nil)
    (define-key js2-mode-map (kbd "C-c C-t") nil)
    (define-key js2-mode-map (kbd "C-c C-o") nil)
    (define-key js2-mode-map (kbd "C-c C-w") nil))
  ;; }}

  (defun my-js2-mode-setup()
    "Set up javascript."
    ;; if use node.js we need nice output
    (js2-imenu-extras-mode)
    (setq mode-name "JS2")
    ;; counsel/ivy is more generic and powerful for refactoring
    ;; js2-mode has its own syntax linter

    ;; call js-doc commands through `counsel-M-x'!

    ;; @see https://github.com/mooz/js2-mode/issues/350
    (setq forward-sexp-function nil))

  (add-hook 'js2-mode-hook 'my-js2-mode-setup)

  ;; @see https://github.com/felipeochoa/rjsx-mode/issues/33
  (with-eval-after-load 'rjsx-mode
    (define-key rjsx-mode-map "<" nil))


  ;; Latest rjsx-mode does not have indentation issue
  ;; @see https://emacs.stackexchange.com/questions/33536/how-to-edit-jsx-react-files-in-emacs
  (setq-default js2-additional-externs
                '("$"
                  "$A" ; salesforce lightning component
                  "$LightningApp" ; salesforce
                  "AccessifyHTML5"
                  "Blob"
                  "FormData"
                  "KeyEvent"
                  "Raphael"
                  "React"
                  "URLSearchParams"
                  "__dirname" ; Node
                  "_content" ; Keysnail
                  "after"
                  "afterEach"
                  "angular"
                  "app"
                  "assert"
                  "assign"
                  "before"
                  "beforeEach"
                  "browser"
                  "by"
                  "clearInterval"
                  "clearTimeout"
                  "command" ; Keysnail
                  "content" ; Keysnail
                  "decodeURI"
                  "define"
                  "describe"
                  "display" ; Keysnail
                  "documentRef"
                  "element"
                  "encodeURI"
                  "expect"
                  "ext" ; Keysnail
                  "fetch"
                  "gBrowser" ; Keysnail
                  "global"
                  "goDoCommand" ; Keysnail
                  "hook" ; Keysnail
                  "inject"
                  "isDev"
                  "it"
                  "jest"
                  "jQuery"
                  "jasmine"
                  "key" ; Keysnail
                  "ko"
                  "log"
                  "mockStore"
                  "module"
                  "mountWithTheme"
                  "plugins" ; Keysnail
                  "process"
                  "require"
                  "setInterval"
                  "setTimeout"
                  "shell" ; Keysnail
                  "tileTabs" ; Firefox addon
                  "util" ; Keysnail
                  "utag"))

#+end_src
* 操作系统相关
** Linux
*** install
#+begin_src emacs-lisp :tangle install.el
  (require-package 'sudo-edit)
  (require-package 'pdf-tools) ;; use the package in extension
  (require-package 'nov) ; read epub
  
#+end_src
#+begin_src emacs-lisp :tangle linux.el
  ;; Your Linux specific settings

  ;; (setenv "JAVA_HOME" "/usr/lib/jvm/java-14-openjdk-amd64")

  ;; Open files as another user
  (run-with-idle-timer
   2
   nil
   #'(lambda()
       (require 'my-sudo)
       (use-package sudo-edit)
       ))

  ;; On-the-fly spell checker
  (run-with-idle-timer
   2
   nil
   #'(lambda()
       (use-package flyspell
         :ensure t
         :defer 2
         :diminish flyspell-mode
         :if (executable-find "aspell")
         :hook (((text-mode outline-mode) . flyspell-mode)
                (prog-mode . flyspell-prog-mode)
                (flyspell-mode . (lambda ()
                                   (unbind-key "C-;" flyspell-mode-map)
                                   (unbind-key "C-," flyspell-mode-map)
                                   (unbind-key "C-." flyspell-mode-map))))
         :init
         (setq flyspell-issue-message-flag nil)
         (setq ispell-program-name "aspell")
         (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US" "--run-together")))))

  (run-with-idle-timer
   2
   nil
   #'(lambda()
       ;; run "M-x pdf-tools-install" at debian and open pdf in GUI Emacs
       (use-package pdf-tools
          :ensure t
          :config (pdf-tools-install))
      
       (require 'init-im)

       (when (display-graphic-p)
         ;; only graphic packages
         (require-package 'vterm))
       (unless (display-graphic-p)
         ;; only conole packages
         )  
       ))



#+end_src
** Windows
#+begin_src emacs-lisp :tangle windows.el
  ;; Your windows specific settings

  ;; on windows, make pwsh the default shell
  ;; 2023-09-09
  (setq
   explicit-shell-file-name
   (cond
    ((eq system-type 'windows-nt)
     (let ((xlist
            (list
             "~/AppData/Local/Microsoft/WindowsApps/pwsh.exe"
             "C:/Windows/System32/WindowsPowerShell/v1.0/powershell.exe"
             )))
       (seq-some (lambda (x) (if (file-exists-p x) x nil)) xlist)))
    (t nil)))

  (run-with-idle-timer
   2
   nil
   #'(lambda()
       ;; Key Modifiers
       ;; make PC keyboard's Win key or other to type Super or Hyper
       ;; (setq w32-pass-lwindow-to-system nil)
       (setq w32-lwindow-modifier 'super)    ; Left Windows key
       (setq w32-apps-modifier 'hyper)       ; Menu/App key

       ;; Optimization
       (setq w32-get-true-file-attributes nil   ; decrease file IO workload
             w32-use-native-image-API t         ; use native w32 API
             w32-pipe-read-delay 0              ; faster IPC
             w32-pipe-buffer-size 65536)        ; read more at a time (64K, was 4K)
      ;;; Windows
       ;; spcial coding settings for Windows
       (unless (memq system-type '(cygwin windows-nt ms-dos))
         (setq selection-coding-system 'utf-8))
       )


   )

  (when (display-graphic-p)
    ;; only graphic packages
    )
  (unless (display-graphic-p)
    ;; only conole packages
    )
#+end_src
** MacOs
#+begin_src emacs-lisp :tangle mac.el
  ;; Your mac specific setting


  ;;(setenv "JAVA_HOME"  "path_to_java_folder/Contents/Home/")
  ;;(setq lsp-java-java-path "path_to_java_folder/Contents/Home/bin/java")

#+end_src
* 归档和例子
:PROPERTIES:
:CUSTOM_ID: achrives-and-examples
:END:
#+begin_src emacs-lisp :tangle achrives-and-examples.el
  ;; =========================================================
  ;; 通过编辑配置文件使其可以调用外部程序，来为其添加功能。
  ;; 增加命令
  ;;(defun lxr (names)
  ;;  (interactive "s查找联系人，请输入条件：")
  ;;  (call-process-shell-command "lxr" nil t t "-s" names))
  ;;执行命令
  ;;首先按功能键，Alt+x，然后输入命令 lxr 。
  ;;系统提示：“查找联系人，请输入条件："。
  ;;输入完成后，emacs 会执行命令lxr -s names，并输出执行的结果。
  ;; =========================================================
  ;; async-shell-command
#+end_src
