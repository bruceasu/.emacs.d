;; -*- coding: utf-8
#+OPTIONS: ^:{}
#+TITLE: Suk's Emacs Config

This is an Emacs distribution designed to enhance the default Emacs experience.
It modifies many default settings and bundles a large number of additional
packages and adds its own core library into the mix. The final product provides
Emacs newbies with an easy-to-use configuration, and provides a wealth of
additional capabilities for power users of Emacs.

Run the Org Babel Tangle command: `M-x org-babel-tangle` to generate the el
file.

* early-init.el
Some code that needs to be executed in advance.
#+begin_src emacs-lisp :tangle early-init.el
    ;; Defer garbage collection further back in the startup process
    (setq gc-cons-threshold most-positive-fixnum gc-cons-percentage 0.6)

    ;; Prevent unwanted runtime compilation for gccemacs (native-comp) users;
    ;; packages are compiled ahead-of-time when they are installed and site files
    ;; are compiled when gccemacs is installed.
    (setq native-comp-deferred-compilation nil ;; obsolete since 29.1
          native-comp-jit-compilation nil)


    ;; In Emacs 27+, package initialization occurs before `user-init-file' is
    ;; loaded, but after `early-init-file'. Doom handles package initialization, so
    ;; we must prevent Emacs from doing it early!
    (setq package-enable-at-startup nil)
    ;; Do not allow loading from the package cache (same reason).
    (setq package-quickstart nil)
    ;; `use-package' is builtin since 29.
    ;; It must be set before loading `use-package'.
    (setq use-package-enable-imenu-support t)


    ;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
    (push '(menu-bar-lines . 0) default-frame-alist)
    (push '(tool-bar-lines . 0) default-frame-alist)
    (push '(vertical-scroll-bars) default-frame-alist)
    (when (featurep 'ns)
      (push '(ns-transparent-titlebar . t) default-frame-alist))
    (setq-default mode-line-format nil)
    ;;(global-unset-key (kbd "C-SPC"))

#+end_src

* init.el
The configuration entrance is mainly used to load other settings and plug-ins.

** Define some startup directories to facilitate next migration and modification
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;;; init.el --- Initialize configurations.  -*- lexical-binding: t -*-
  ;; Copyright (C) 1999 - 2024 Suk
  ;; Author: Suk

  ;; This file is not part of GNU Emacs.
  ;;

  ;; This program is free software; you can redistribute it and/or
  ;; modify it under the terms of the GNU General Public License as
  ;; published by the Free Software Foundation; either version 2, or
  ;; (at your option) any later version.
  ;;
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  ;; General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with this program; see the file COPYING.  If not, write to
  ;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
  ;; Floor, Boston, MA 02110-1301, USA.
  ;;
  ;;; Commentary
  ;;
  ;; Emacs configurations.
  ;;

  ;;; Code:


  (when (version< emacs-version "27.1")
    (error "This requires Emacs 27.1 and above!"))

  ;; 定义一些启动目录，方便下次迁移修改
  (defvar suk-emacs-root-dir (file-truename user-emacs-directory))
  (defvar suk-emacs-config-dir (expand-file-name "etc" suk-emacs-root-dir))
  (defvar suk-emacs-extension-dir (expand-file-name "extensions" suk-emacs-root-dir))
  (defvar suk-emacs-share-dir (expand-file-name "share" suk-emacs-root-dir))
  (defvar suk-emacs-themes-dir (expand-file-name "themes" suk-emacs-share-dir))
  (defvar suk-emacs-elpa-dir (expand-file-name "elpa" suk-emacs-root-dir))
  (defvar suk-emacs-var-dir (expand-file-name "var" suk-emacs-root-dir))
  (defvar suk-emacs-tmp-dir (expand-file-name "tmp" suk-emacs-var-dir))
  (defvar suk-emacs-backup-dir (expand-file-name "backup" suk-emacs-tmp-dir))


  (defvar user-home-dir (getenv "HOME"))

  (if (eq system-type 'windows-nt)
      (defvar user-home-dir (getenv "USERPROFILE")))
#+END_SRC

** Set the path to some temporary files and folders
#+BEGIN_SRC emacs-lisp :tangle init.el
      ;; 设置缓存文件/杂七杂八的文件存放的地址
      ;; 不好的做法

      ;; (setq user-emacs-directory "~/.emacs.d/var")

      ;; blink search
      (setq blink-search-db-path (expand-file-name "blink-search.db" suk-emacs-tmp-dir))
      ;; Saveplace
      (setq save-place-file (concat suk-emacs-var-dir "/saveplace"))
      ;; Recentf
      (setq recentf-save-file (concat suk-emacs-var-dir "/recentf"))
      ;;(setq recentf-save-file "~/.emacs.d/var/recentf")
      ;; History
      (setq savehist-file (concat suk-emacs-var-dir "/history"))
      ; Amx
      (setq amx-save-file (concat suk-emacs-var-dir "/amx-items"))
      ;; Auto save
      (setq auto-save-list-file-prefix (concat suk-emacs-var-dir "/auto-save-list/.saves-"))
      ;; Eshell
      (setq eshell-directory-name (concat suk-emacs-var-dir "eschell"))
      (setq eshell-history-file-name (concat eshell-directory-name "/history"))
      ;; projectitle-bookmarks
      (setq projectile-known-projects-file (concat suk-emacs-var-dir "/projectile-bookmarks.eld"))
      (setq backup-directory-alist `(("" . ,suk-emacs-tmp-dir)))
      ;; Bookmark
      (setq bookmark-default-file (concat suk-emacs-var-dir "/emacs.bmk"))
      ;; Diary
      (setq diary-file (concat user-home-dir "/diary"))

#+END_SRC

** A function: recursively loads emacs settings and plug-in files
#+BEGIN_SRC emacs-lisp :tangle init.el
     ;; Ignore `cl` expiration warnings
     (setq byte-compile-warnings '(cl-function))

     ;; original version
     ;;(defun add-subdirs-to-load-path (dir)
     ;;  "Recursive add directories to `load-path'."
     ;;  (let ((default-directory (file-name-as-directory dir)))
     ;;     (add-to-list 'load-path dir)
     ;;     (normal-top-level-add-subdirs-to-load-path)))

     ;; 王勇的版本 https://manateelazycat.github.io/emacs/2022/03/02/emacs-load-directory-recursively.html
     (require 'cl-lib)
     (defun add-subdirs-to-load-path (search-dir isFirst)
       (interactive)
       (when isFirst
         ;; 原来的版本没有把第1个 search-dir 本身添加到load path
         ;; 递归时的search-dir是在递归前加入了。
         (add-to-list 'load-path search-dir))
       (let* ((dir (file-name-as-directory search-dir)))
         (dolist (subdir
                  ;; 过滤出不必要的目录，提升Emacs启动速度
                  (cl-remove-if
                   #'(lambda (subdir)
                       (or
                        ;; 不是文件的都移除
                        (not (file-directory-p (concat dir subdir)))
                        ;; 目录匹配下面规则的都移除
                        (member subdir '("." ".." ;Linux当前目录和父目录
                                         "dist" "node_modules" "__pycache__" ;语言相关的模块目录
                                         "RCS" "CVS" "rcs" "cvs" ".git" ".github")))) ;版本控制目录
                   (directory-files dir)))
           (let ((subdir-path (concat dir (file-name-as-directory subdir))))
             ;; 目录下有 .el .so .dll 文件的路径才添加到 load-path 中，提升Emacs启动速度
             (when (cl-some #'(lambda (subdir-file)
                                (and (file-regular-p (concat subdir-path subdir-file))
                                     ;; .so .dll 文件指非Elisp语言编写的Emacs动态库
                                     (member (file-name-extension subdir-file) '("el" "so" "dll"))))
                            (directory-files subdir-path))

               ;; 注意：add-to-list 函数的第三个参数必须为 t ，表示加到列表末尾
               ;; 这样Emacs会从父目录到子目录的顺序搜索Elisp插件，顺序反过来会导致Emacs无法正常启动
               (add-to-list 'load-path subdir-path t))

             ;; 继续递归搜索子目录
             (add-subdirs-to-load-path subdir-path nil)))))

     ;; 加载指定的目录
     (add-subdirs-to-load-path suk-emacs-config-dir t)
     (add-subdirs-to-load-path suk-emacs-extension-dir t)
     (add-subdirs-to-load-path suk-emacs-themes-dir t)
     (add-subdirs-to-load-path suk-emacs-elpa-dir t)

#+END_SRC

** Recursively load files, load emacs settings and plug-ins
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; The contents of the Emacs configuration file are written below.

  (let
      (
       ;;  Temporarily increase `gc-cons-threshold' when loading to speed up
       ;;  startup.
       (gc-cons-threshold most-positive-fixnum)
       (gc-cons-percentage 0.8)

       ;; Clear to avoid analyzing files when loading remote files.
       (file-name-handler-alist nil))
    ;; Don't pass case-insensitive to `auto-mode-alist'
    (setq auto-mode-case-fold nil)
    ;; Prevent flashing of unstyled modeline at startup
    (setq-default mode-line-format nil)
    (unless (or (daemonp) noninteractive init-file-debug)
      ;; Suppress file handlers operations at startup
      ;; `file-name-handler-alist' is consulted on each call to `require' and `load'
      (let ((old-value file-name-handler-alist))
        (setq file-name-handler-alist nil)
        (set-default-toplevel-value 'file-name-handler-alist file-name-handler-alist)
        (add-hook 'emacs-startup-hook
                  (lambda ()
                    "Recover file name handlers."
                    (setq file-name-handler-alist
                          (delete-dups (append file-name-handler-alist old-value))))
                  101)))

    ;; Emacs配置文件内容写到下面.
    (add-hook 'emacs-startup-hook
              (lambda ()
                "Restore defalut values after init."
                (setq file-name-handler-alist default-file-name-handler-alist)
                ;; The default is 0.8MB
                ;;(setq gc-cons-threshold 80000000)
                (message "Emacs ready in %s with %d garbage collections."
                         (format "%.2f seconds"
                                 (float-time
                                  (time-subtract after-init-time before-init-time)))
                         gcs-done)
                (add-hook 'focus-out-hook 'garbage-collect)))


    (with-temp-message ""     ;Erase the output of plug-in startup
      ;; Constants
      (require '+const)

      ;; Customization
      (require '+custom)
      ;; Packages
      (require 'init-basic)
      (require 'init-awsome-pair)
      (require 'lazy-load)
      (require 'init-key)
      (require 'init-package)
      (require 'init-completion)
      (require 'init-ui)
      (require 'init-org)
      (require 'init-utils)
      (require 'init-mode)
      (when sys/linuxp
        (progn
          (require 'init-shell)
          (require 'init-im)   ;; windows 下表现不好
          (require 'init-sudo)
          )
        )
      ;; Restore session at last.
      (require 'init-session)
      (emacs-session-restore)
      (server-start)
      ;; delay load
      (run-with-idle-timer
       1 nil
       #'(lambda ()
           (require 'init-bookmark)
           (require 'init-buffers)
           (require 'init-recentf)
           (require 'init-dired)

           (require 'init-auto-save)
           (require 'init-edit)
           (require 'init-idle)
           (require 'init-eshell)
           ;;(require 'highlight-parentheses)
           (require 'init-highlight)
           (require 'init-window)
           (require 'init-markdown)
           (require 'init-reader)

           (require 'init-calendar)
           (require 'load-abbrev)
           (require 'init-ext-packages)
           ;; Programming
           (require 'init-ide)
           ;; Make gc pauses faster by decreasing the threshold.
           (setq gc-cons-threshold (* 16 1000 1000))

           ))
      )
    )


#+END_SRC
* etc/+const.el
Define some system flag.
#+begin_src  emacs-lisp :tangle etc/+const.el
  ;; +const.el --- Define constants.	-*- lexical-binding: t -*-

  ;; Copyright (C) 1999 - 2024 Suk

  ;; Author: Suk

  ;; This file is not part of GNU Emacs.
  ;;
  ;; This program is free software; you can redistribute it and/or
  ;; modify it under the terms of the GNU General Public License as
  ;; published by the Free Software Foundation; either version 2, or
  ;; (at your option) any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  ;; General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with this program; see the file COPYING.  If not, write to
  ;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
  ;; Floor, Boston, MA 02110-1301, USA.
  ;;

  ;;; Commentary:
  ;;
  ;; Define constants.
  ;;

  ;;; Code:
  (defconst custom-template-file
    (expand-file-name "custom-template.el" user-emacs-directory)
    "Custom template file of Suk's Emacs.")

  (defconst suk-homepage
    "https://github.com/bruceasu/.emacs.d"
    "The Github page of this Emacs config.")

  (defconst sys/win32p
    (eq system-type 'windows-nt)
    "Are we running on a WinTel system?")

  (defconst sys/linuxp
    (eq system-type 'gnu/linux)
    "Are we running on a GNU/Linux system?")

  (defconst sys/macp
    (eq system-type 'darwin)
    "Are we running on a Mac system?")

  (defconst sys/mac-x-p
    (and (display-graphic-p) sys/macp)
    "Are we running under X on a Mac system?")

  (defconst sys/linux-x-p
    (and (display-graphic-p) sys/linuxp)
    "Are we running under X on a GNU/Linux system?")

  (defconst sys/cygwinp
    (eq system-type 'cygwin)
    "Are we running on a Cygwin system?")

  (defconst sys/rootp
    (string-equal "root" (getenv "USER"))
    "Are you using ROOT user?")

  (defconst emacs/>=25p
    (>= emacs-major-version 25)
    "Emacs is 25 or above.")

  (defconst emacs/>=26p
    (>= emacs-major-version 26)
    "Emacs is 26 or above.")

  (defconst emacs/>=27p
    (>= emacs-major-version 27)
    "Emacs is 27 or above.")

  (defconst emacs/>=28p
    (>= emacs-major-version 28)
    "Emacs is 28 or above.")

  (defconst emacs/>=29p
    (>= emacs-major-version 29)
    "Emacs is 29 or above.")

  (defconst emacs/>=30p
    (>= emacs-major-version 30)
    "Emacs is 30 or above.")

  (provide '+const)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; +const.el ends here

#+end_src
* etc/+custom.el
Define some variables.
#+begin_src  emacs-lisp :tangle etc/+custom.el
  ;; +custom.el --- Define customizations.	-*- lexical-binding: t -*-

  ;; Copyright (C) 1999 - 2024 Suk

  ;; Author: Suk

  ;; This file is not part of GNU Emacs.
  ;;
  ;; This program is free software; you can redistribute it and/or
  ;; modify it under the terms of the GNU General Public License as
  ;; published by the Free Software Foundation; either version 2, or
  ;; (at your option) any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  ;; General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with this program; see the file COPYING.  If not, write to
  ;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
  ;; Floor, Boston, MA 02110-1301, USA.
  ;;

  ;;; Commentary:
  ;;
  ;; Customizations.
  ;;

  ;;; Code:

  (eval-when-compile
    (require '+const)
    (require 'package))

  (defgroup suk nil
    "suk Emacs customizations."
    :group 'convenience
    :link '(url-link :tag "Homepage" "https://github.com/bruceasu/.emacs.d"))

  (defcustom suk-logo (expand-file-name
                           (if (display-graphic-p) "logo.png" "banner.txt")
                           user-emacs-directory)
    "Set Suk logo. nil means official logo."
    :group 'suk
    :type 'string)

  (defcustom suk-full-name "Suk"
    "Set user full name."
    :group 'suk
    :type 'string)

  (defcustom suk-mail-address "bruceasu@gmail.com"
    "Set user email address."
    :group 'suk
    :type 'string)

  (defcustom suk-proxy "127.0.0.1:1080"
    "Set network proxy."
    :group 'suk
    :type 'string)

  (defcustom suk-cnfonts nil
    "Use cnfonts or not."
    :group 'suk
    :type 'boolean)

  (defcustom user-home-dir (getenv "HOME")
    "User home directory."
    :group 'suk
    :type 'string)

  (if sys/win32p
      (setq user-home-dir (getenv "USERPROFILE"))
  )

  (defcustom suk-icon t
    "Display icons or not."
    :group 'suk
    :type 'boolean)

  (defcustom org-roam-directory (expand-file-name "RoamNotes" user-home-dir)
    "The org roam directory."
    :group 'suk
    :type 'string)

  (defcustom org-files-directory (expand-file-name "org" user-home-dir)
    "The org roam directory."
    :group 'suk
    :type 'string)

  (defcustom  org-css-file "~/.emacs.d/share/my-org-style-min.css"
    "The org css style file."
    :group 'suk
    :type 'string)

  (defcustom windows-bash-path (expand-file-name "C:/Program Files/Git/bin/bash.exe")
    "The windows version of bash."
    :group 'suk
    :type 'string)


  (defcustom suk-completion-style 'childframe
    "Completion display style."
    :group 'suk
    :type '(choice (const :tag "Minibuffer" minibuffer)
                   (const :tag "Child Frame" childframe)))

  (defcustom suk-dashboard (not (daemonp))
    "Display dashboard at startup or not.
  If Non-nil, use dashboard, otherwise will restore previous session."
    :group 'suk
    :type 'boolean)

  (defcustom suk-lsp 'eglot
    "Set language server.

  `lsp-mode': See https://github.com/emacs-lsp/lsp-mode.
  `eglot': See https://github.com/joaotavora/eglot.
  nil means disabled."
    :group 'suk
    :type '(choice (const :tag "LSP Mode" lsp-mode)
                   (const :tag "Eglot" eglot)
                   (const :tag "Disable" nil)))

  (defcustom suk-tree-sitter t
    "Enable tree-sitter or not.
  Native tree-sitter is introduced in 29."
    :group 'suk
    :type 'boolean)

  (defcustom suk-lsp-format-on-save nil
    "Auto format buffers on save."
    :group 'suk
    :type 'boolean)

  (defcustom suk-lsp-format-on-save-ignore-modes
    '(c-mode c++-mode python-mode markdown-mode)
    "The modes that don't auto format and organize imports while saving the buffers.
  `prog-mode' means ignoring all derived modes."
    :group 'suk
    :type '(repeat (symbol :tag "Major-Mode")))

  (defcustom suk-prettify-symbols-alist
    '(("lambda" . ?λ)
      ("<-"     . ?←)
      ("->"     . ?→)
      ("->>"    . ?↠)
      ("=>"     . ?⇒)
      ("map"    . ?↦)
      ("/="     . ?≠)
      ("!="     . ?≠)
      ("=="     . ?≡)
      ("<="     . ?≤)
      (">="     . ?≥)
      ("=<<"    . (?= (Br . Bl) ?≪))
      (">>="    . (?≫ (Br . Bl) ?=))
      ("<=<"    . ?↢)
      (">=>"    . ?↣)
      ("&&"     . ?∧)
      ("||"     . ?∨)
      ("not"    . ?¬))
    "A list of symbol prettifications.
  Nil to use font supports ligatures."
    :group 'suk
    :type '(alist :key-type string :value-type (choice character sexp)))

  (defcustom suk-prettify-org-symbols-alist
    '(("[ ]"            . ?)
      ("[-]"            . ?)
      ("[X]"            . ?)

      (":PROPERTIES:"   . ?)
      (":ID:"           . ?🪪)
      (":END:"          . ?🔚)

      ("#+ARCHIVE:"     . ?📦)
      ("#+AUTHOR:"      . ?👤)
      ("#+CREATOR:"     . ?💁)
      ("#+DATE:"        . ?📆)
      ("#+DESCRIPTION:" . ?⸙)
      ("#+EMAIL:"       . ?📧)
      ("#+HEADERS"      . ?☰)
      ("#+OPTIONS:"     . ?⚙)
      ("#+SETUPFILE:"   . ?⚒)
      ("#+TAGS:"        . ?🏷)
      ("#+TITLE:"       . ?📓)

      ("#+BEGIN_SRC"    . ?✎)
      ("#+END_SRC"      . ?□)
      ("#+BEGIN_QUOTE"  . ?«)
      ("#+END_QUOTE"    . ?»)
      ("#+RESULTS:"     . ?💻))
    "A list of symbol prettifications for `org-mode'."
    :group 'suk
    :type '(alist :key-type string :value-type (choice character sexp)))


  ;; Load `custom-file'
  ;; If it doesn't exist, copy from the template, then load it.
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

  (let ((custom-template-file
         (expand-file-name "custom-template.el" user-emacs-directory)))
    (if (and (file-exists-p custom-template-file)
             (not (file-exists-p custom-file)))
        (copy-file custom-template-file custom-file)))

  (if (file-exists-p custom-file)
      (load custom-file))

  ;; Load `custom-post.el'
  ;; Put personal configurations to override defaults here.
  (add-hook 'after-init-hook
            (lambda ()
              (let ((file
                     (expand-file-name "custom-post.el" user-emacs-directory)))
                (if (file-exists-p file)
                    (load file)))))

  (provide '+custom)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; +custom.el ends here

#+end_src

