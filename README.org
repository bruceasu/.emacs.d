;; -*- coding: utf-8
#+OPTIONS: ^:{}
#+TITLE: SUK GE EMACS PUITSI

* CINYIN
ni go citdiñ mangin hai yuñlai taigòu makyiñ ge Emacs taiyim.
kêi saugoi zo hòu do ge makyiñ citdiñ tuñmai zápsiñ zo dáilöñ ge cápgin.

Zapháñ  *Org Babel Tangle* miñliñ: ` /M-x org-babel-tangle/ ` hêi sañsiñ EL mangin.

* early-init.el
** YATDIT SIUYIU TAICIN ZAPHÁÑ  GE CITDIÑ
#+begin_src emacs-lisp :tangle early-init.el
    ;; Defer garbage collection further back in the startup process
    (setq gc-cons-threshold most-positive-fixnum gc-cons-percentage 0.6)

    ;; Prevent unwanted runtime compilation for gccemacs (native-comp) users;
    ;; packages are compiled ahead-of-time when they are installed and site files
    ;; are compiled when gccemacs is installed.
    (setq native-comp-deferred-compilation nil ;; obsolete since 29.1
          native-comp-jit-compilation nil)


    ;; In Emacs 27+, package initialization occurs before `user-init-file' is
    ;; loaded, but after `early-init-file'. Doom handles package initialization, so
    ;; we must prevent Emacs from doing it early!
    (setq package-enable-at-startup nil)
    ;; Do not allow loading from the package cache (same reason).
    (setq package-quickstart nil)
    ;; `use-package' is builtin since 29.
    ;; It must be set before loading `use-package'.
    (setq use-package-enable-imenu-support t)


    ;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
    (push '(menu-bar-lines . 0) default-frame-alist)
    (push '(tool-bar-lines . 0) default-frame-alist)
    (push '(vertical-scroll-bars) default-frame-alist)
    (when (featurep 'ns)
      (push '(ns-transparent-titlebar . t) default-frame-alist))
    (setq-default mode-line-format nil)
    ;;(global-unset-key (kbd "C-SPC"))

#+end_src

* init.el
The configuration entrance is mainly used to load other settings and plug-ins.

** DIÑYI YATDIT MULUK BINLÖÑ.
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;;; init.el --- Initialize configurations.  -*- lexical-binding: t -*-
  ;; Copyright (C) 1999 - 2024 Suk
  ;; Author: Suk

  ;; This file is not part of GNU Emacs.
  ;;

  ;; This program is free software; you can redistribute it and/or
  ;; modify it under the terms of the GNU General Public License as
  ;; published by the Free Software Foundation; either version 2, or
  ;; (at your option) any later version.
  ;;
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  ;; General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with this program; see the file COPYING.  If not, write to
  ;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
  ;; Floor, Boston, MA 02110-1301, USA.
  ;;
  ;;; Commentary
  ;;
  ;; Emacs configurations.
  ;;

  ;;; Code:


  (when (version< emacs-version "27.1")
    (error "This requires Emacs 27.1 and above!"))

  ;; Diñyi yidit muluk, foñbin yathòu ciñyi.
  ;; user-emacs-directory tuñsöñ hai ~/.emacs.d
  ;; windows há, ~/ tuñsöñ hai $EMACS_INSTALL_DIR, wákze EMACS citdiñ de `HOME` binlöñ
  (defvar suk-emacs-root-dir (file-truename user-emacs-directory))
  (defvar suk-emacs-config-dir (expand-file-name "etc" suk-emacs-root-dir))
  (defvar suk-emacs-extension-dir (expand-file-name "extensions" suk-emacs-root-dir))
  (defvar suk-emacs-share-dir (expand-file-name "share" suk-emacs-root-dir))
  (defvar suk-emacs-themes-dir (expand-file-name "themes" suk-emacs-share-dir))
  (defvar suk-emacs-elpa-dir (expand-file-name "elpa" suk-emacs-root-dir))
  (defvar suk-emacs-var-dir (expand-file-name "var" suk-emacs-root-dir))
  (defvar suk-emacs-tmp-dir (expand-file-name "tmp" suk-emacs-var-dir))
  (defvar suk-emacs-backup-dir (expand-file-name "backup" suk-emacs-tmp-dir))

  ;; OS ge HOME muluk.
  (defvar user-home-dir (getenv "HOME"))

  (if (eq system-type 'windows-nt)
      (defvar user-home-dir (getenv "USERPROFILE")))
#+END_SRC

** DIÑYI YATDIT LAMSI MANGIN TUÑMAI MULUK.
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; blink search
  (setq blink-search-db-path (expand-file-name "blink-search.db" suk-emacs-tmp-dir))
  ;; Saveplace
  (setq save-place-file (concat suk-emacs-var-dir "/saveplace"))
  ;; Recentf
  (setq recentf-save-file (concat suk-emacs-var-dir "/recentf"))
  ;;(setq recentf-save-file "~/.emacs.d/var/recentf")
  ;; History
  (setq savehist-file (concat suk-emacs-var-dir "/history"))
  ; Amx
  (setq amx-save-file (concat suk-emacs-var-dir "/amx-items"))
  ;; Auto save
  (setq auto-save-list-file-prefix (concat suk-emacs-var-dir "/auto-save-list/.saves-"))
  ;; Eshell
  (setq eshell-directory-name (concat suk-emacs-var-dir "eschell"))
  (setq eshell-history-file-name (concat eshell-directory-name "/history"))
  ;; projectitle-bookmarks
  (setq projectile-known-projects-file (concat suk-emacs-var-dir "/projectile-bookmarks.eld"))
  (setq backup-directory-alist `(("" . ,suk-emacs-tmp-dir)))
  ;; Bookmark
  (setq bookmark-default-file (concat suk-emacs-var-dir "/emacs.bmk"))
  ;; Diary
  (setq diary-file (concat user-home-dir "/diary"))

#+END_SRC

** GÁZOI MULUK HÁMSÒU: DAIĢAI EMACS TUÑMAI CÁPGIN GE CITDIÑ MULUK DÒU `load-path`
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; Ignore `cl` expiration warnings
  (setq byte-compile-warnings '(cl-function))

  ;; original version
  ;;(defun add-subdirs-to-load-path (dir)
  ;;  "Recursive add directories to `load-path'."
  ;;  (let ((default-directory (file-name-as-directory dir)))
  ;;     (add-to-list 'load-path dir)
  ;;     (normal-top-level-add-subdirs-to-load-path)))

  ;; 王勇的版本 https://manateelazycat.github.io/emacs/2022/03/02/emacs-load-directory-recursively.html
  (require 'cl-lib)
  (defun add-subdirs-to-load-path (search-dir isFirst)
    (interactive)
    (when isFirst
      ;; 原来的版本没有把第1个 search-dir 本身添加到load path
      ;; 递归时的search-dir是在递归前加入了。
      (add-to-list 'load-path search-dir))
    (let* ((dir (file-name-as-directory search-dir)))
      (dolist (subdir
               ;; 过滤出不必要的目录，提升Emacs启动速度
               (cl-remove-if
                #'(lambda (subdir)
                    (or
                     ;; 不是文件的都移除
                     (not (file-directory-p (concat dir subdir)))
                     ;; 目录匹配下面规则的都移除
                     (member subdir '("." ".." ;Linux当前目录和父目录
                                      "dist" "node_modules" "__pycache__" ;语言相关的模块目录
                                      "RCS" "CVS" "rcs" "cvs" ".git" ".github")))) ;版本控制目录
                (directory-files dir)))
        (let ((subdir-path (concat dir (file-name-as-directory subdir))))
          ;; 目录下有 .el .so .dll 文件的路径才添加到 load-path 中，提升Emacs启动速度
          (when (cl-some #'(lambda (subdir-file)
                             (and (file-regular-p (concat subdir-path subdir-file))
                                  ;; .so .dll 文件指非Elisp语言编写的Emacs动态库
                                  (member (file-name-extension subdir-file) '("el" "so" "dll"))))
                         (directory-files subdir-path))

            ;; 注意：add-to-list 函数的第三个参数必须为 t ，表示加到列表末尾
            ;; 这样Emacs会从父目录到子目录的顺序搜索Elisp插件，顺序反过来会导致Emacs无法正常启动
            (add-to-list 'load-path subdir-path t))

          ;; 继续递归搜索子目录
          (add-subdirs-to-load-path subdir-path nil)))))

  ;; gázoi tsidiñ ge muluk.
  (add-subdirs-to-load-path suk-emacs-config-dir t)
  (add-subdirs-to-load-path suk-emacs-extension-dir t)
  (add-subdirs-to-load-path suk-emacs-themes-dir t)
  (add-subdirs-to-load-path suk-emacs-elpa-dir t)

#+END_SRC

** GÁZOI DAKDIÑ GE CITDIÑ MANGIN
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; The contents of the Emacs configuration file are written below.
  (let (;;  Temporarily increase `gc-cons-threshold' when loading to speed up
       ;;  startup.
       (gc-cons-threshold most-positive-fixnum)
       (gc-cons-percentage 0.8)

       ;; Clear to avoid analyzing files when loading remote files.
       (file-name-handler-alist nil))
    ;; Don't pass case-insensitive to `auto-mode-alist'
    (setq auto-mode-case-fold nil)
    ;; Prevent flashing of unstyled modeline at startup
    (setq-default mode-line-format nil)
    (unless (or (daemonp) noninteractive init-file-debug)
      ;; Suppress file handlers operations at startup
      ;; `file-name-handler-alist' is consulted on each call to `require' and `load'
      (let ((old-value file-name-handler-alist))
        (setq file-name-handler-alist nil)
        (set-default-toplevel-value 'file-name-handler-alist file-name-handler-alist)
        (add-hook 'emacs-startup-hook
                  (lambda ()
                    "Recover file name handlers."
                    (setq file-name-handler-alist
                          (delete-dups (append file-name-handler-alist old-value))))
                  101)))


    (add-hook 'emacs-startup-hook
              (lambda ()
                "Fuifuk makyiñ ge zik"
                (setq file-name-handler-alist default-file-name-handler-alist)
                ;; makyiñ zik wai 0.8MB
                ;;(setq gc-cons-threshold 80000000)
                (message "Emacs ready in %s with %d garbage collections."
                         (format "%.2f seconds"
                                 (float-time
                                  (time-subtract after-init-time before-init-time)))
                         gcs-done)
                (add-hook 'focus-out-hook 'garbage-collect)))


    (with-temp-message ""     ;Erase the output of plug-in startup
      (require '+const) ; Constants
      (require '+custom) ; Customization
      (require 'init-basic)
      (require 'init-awesome-pair)
      (require 'lazy-load)
      (require 'init-key)
      (require 'init-package)
      (require 'init-completion)
      (require 'init-ui)
      (require 'init-org)
      (require 'init-utils)
      (require 'init-mode)
      (when sys/linuxp
        (progn
          (require 'init-shell)
          (require 'init-im)   ;; windows 下表现不好
          (require 'init-sudo)
          )
        )
      ;; Restore session at last.
      (require 'init-session)
      (emacs-session-restore)
      (server-start)
      ;; delay load
      (run-with-idle-timer
       1 nil
       #'(lambda ()
           (require 'init-bookmark)
           (require 'init-buffers)
           (require 'init-recentf)
           (require 'init-dired)
           (require 'init-auto-save)
           (require 'init-edit)
           (require 'init-idle)
           (require 'init-eshell)
           ;;(require 'highlight-parentheses)
           (require 'init-highlight)
           (require 'init-window)
           (require 'init-markdown)
           (require 'init-reader)
           (require 'init-calendar)
           (require 'load-abbrev)
           (require 'init-ext-packages)
           ;; Programming
           (require 'init-ide)
           ;; Make gc pauses faster by decreasing the threshold.
           (setq gc-cons-threshold (* 16 1000 1000))

           ))
      )
    )

  (provide 'init)

#+END_SRC
* etc/+const.el
** DIÑYI YATDIT HAITUÑ BIUGÈI
#+begin_src  emacs-lisp :tangle etc/+const.el
  ;; +const.el --- Define constants.	-*- lexical-binding: t -*-
  ;;; Commentary:
  ;;
  ;; Define constants.
  ;;

  ;;; Code:
  (defconst custom-template-file
    (expand-file-name "custom-template.el" user-emacs-directory)
    "Custom template file of Suk's Emacs.")

  (defconst suk-homepage
    "https://github.com/bruceasu/.emacs.d"
    "The Github page of this Emacs config.")

  (defconst sys/win32p
    (eq system-type 'windows-nt)
    "Are we running on a WinTel system?")

  (defconst sys/linuxp
    (eq system-type 'gnu/linux)
    "Are we running on a GNU/Linux system?")

  (defconst sys/macp
    (eq system-type 'darwin)
    "Are we running on a Mac system?")

  (defconst sys/mac-x-p
    (and (display-graphic-p) sys/macp)
    "Are we running under X on a Mac system?")

  (defconst sys/linux-x-p
    (and (display-graphic-p) sys/linuxp)
    "Are we running under X on a GNU/Linux system?")

  (defconst sys/cygwinp
    (eq system-type 'cygwin)
    "Are we running on a Cygwin system?")

  (defconst sys/rootp
    (string-equal "root" (getenv "USER"))
    "Are you using ROOT user?")

  (defconst emacs/>=25p
    (>= emacs-major-version 25)
    "Emacs is 25 or above.")

  (defconst emacs/>=26p
    (>= emacs-major-version 26)
    "Emacs is 26 or above.")

  (defconst emacs/>=27p
    (>= emacs-major-version 27)
    "Emacs is 27 or above.")

  (defconst emacs/>=28p
    (>= emacs-major-version 28)
    "Emacs is 28 or above.")

  (defconst emacs/>=29p
    (>= emacs-major-version 29)
    "Emacs is 29 or above.")

  (defconst emacs/>=30p
    (>= emacs-major-version 30)
    "Emacs is 30 or above.")

  (provide '+const)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; +const.el ends here

#+end_src
* etc/+custom.el
** DIÑYI YATDIT ZIDIÑYI BINLÖÑ
#+begin_src  emacs-lisp :tangle etc/+custom.el
  ;; +custom.el --- Define customizations.	-*- lexical-binding: t -*-
  ;;; Commentary:
  ;;
  ;; Customizations.
  ;;

  ;;; Code:

  (eval-when-compile
    (require '+const)
    (require 'package))

  (defgroup suk nil
    "suk Emacs customizations."
    :group 'convenience
    :link '(url-link :tag "Homepage" "https://github.com/bruceasu/.emacs.d"))

  (defcustom suk-logo (expand-file-name
                           (if (display-graphic-p) "logo.png" "banner.txt")
                           user-emacs-directory)
    "Set Suk logo. nil means official logo."
    :group 'suk
    :type 'string)

  (defcustom suk-full-name "Suk"
    "Set user full name."
    :group 'suk
    :type 'string)

  (defcustom suk-mail-address "bruceasu@gmail.com"
    "Set user email address."
    :group 'suk
    :type 'string)

  (defcustom suk-proxy "127.0.0.1:1080"
    "Set network proxy."
    :group 'suk
    :type 'string)

  (defcustom suk-cnfonts nil
    "Use cnfonts or not."
    :group 'suk
    :type 'boolean)

  (defcustom user-home-dir (getenv "HOME")
    "User home directory."
    :group 'suk
    :type 'string)

  (if sys/win32p
      (setq user-home-dir (getenv "USERPROFILE"))
  )

  (defcustom suk-icon t
    "Display icons or not."
    :group 'suk
    :type 'boolean)

  (defcustom org-roam-directory (expand-file-name "RoamNotes" user-home-dir)
    "The org roam directory."
    :group 'suk
    :type 'string)

  (defcustom org-files-directory (expand-file-name "org" user-home-dir)
    "The org roam directory."
    :group 'suk
    :type 'string)

  (defcustom  org-css-file "~/.emacs.d/share/my-org-style-min.css"
    "The org css style file."
    :group 'suk
    :type 'string)

  (defcustom windows-bash-path (expand-file-name "C:/Program Files/Git/bin/bash.exe")
    "The windows version of bash."
    :group 'suk
    :type 'string)


  (defcustom suk-completion-style 'childframe
    "Completion display style."
    :group 'suk
    :type '(choice (const :tag "Minibuffer" minibuffer)
                   (const :tag "Child Frame" childframe)))

  (defcustom suk-dashboard (not (daemonp))
    "Display dashboard at startup or not.
  If Non-nil, use dashboard, otherwise will restore previous session."
    :group 'suk
    :type 'boolean)

  (defcustom suk-lsp 'eglot
    "Set language server.

  `lsp-mode': See https://github.com/emacs-lsp/lsp-mode.
  `eglot': See https://github.com/joaotavora/eglot.
  nil means disabled."
    :group 'suk
    :type '(choice (const :tag "LSP Mode" lsp-mode)
                   (const :tag "Eglot" eglot)
                   (const :tag "Disable" nil)))

  (defcustom suk-tree-sitter t
    "Enable tree-sitter or not.
  Native tree-sitter is introduced in 29."
    :group 'suk
    :type 'boolean)

  (defcustom suk-lsp-format-on-save nil
    "Auto format buffers on save."
    :group 'suk
    :type 'boolean)

  (defcustom suk-lsp-format-on-save-ignore-modes
    '(c-mode c++-mode python-mode markdown-mode)
    "The modes that don't auto format and organize imports while saving the buffers.
  `prog-mode' means ignoring all derived modes."
    :group 'suk
    :type '(repeat (symbol :tag "Major-Mode")))

  (defcustom suk-prettify-symbols-alist
    '(("lambda" . ?λ)
      ("<-"     . ?←)
      ("->"     . ?→)
      ("->>"    . ?↠)
      ("=>"     . ?⇒)
      ("map"    . ?↦)
      ("/="     . ?≠)
      ("!="     . ?≠)
      ("=="     . ?≡)
      ("<="     . ?≤)
      (">="     . ?≥)
      ("=<<"    . (?= (Br . Bl) ?≪))
      (">>="    . (?≫ (Br . Bl) ?=))
      ("<=<"    . ?↢)
      (">=>"    . ?↣)
      ("&&"     . ?∧)
      ("||"     . ?∨)
      ("not"    . ?¬))
    "A list of symbol prettifications.
  Nil to use font supports ligatures."
    :group 'suk
    :type '(alist :key-type string :value-type (choice character sexp)))

  (defcustom suk-prettify-org-symbols-alist
    '(("[ ]"            . ?)
      ("[-]"            . ?)
      ("[X]"            . ?)

      (":PROPERTIES:"   . ?)
      (":ID:"           . ?🪪)
      (":END:"          . ?🔚)

      ("#+ARCHIVE:"     . ?📦)
      ("#+AUTHOR:"      . ?👤)
      ("#+CREATOR:"     . ?💁)
      ("#+DATE:"        . ?📆)
      ("#+DESCRIPTION:" . ?⸙)
      ("#+EMAIL:"       . ?📧)
      ("#+HEADERS"      . ?☰)
      ("#+OPTIONS:"     . ?⚙)
      ("#+SETUPFILE:"   . ?⚒)
      ("#+TAGS:"        . ?🏷)
      ("#+TITLE:"       . ?📓)

      ("#+BEGIN_SRC"    . ?✎)
      ("#+END_SRC"      . ?□)
      ("#+BEGIN_QUOTE"  . ?«)
      ("#+END_QUOTE"    . ?»)
      ("#+RESULTS:"     . ?💻))
    "A list of symbol prettifications for `org-mode'."
    :group 'suk
    :type '(alist :key-type string :value-type (choice character sexp)))


  ;; Load `custom-file'
  ;; If it doesn't exist, copy from the template, then load it.
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

  (let ((custom-template-file
         (expand-file-name "custom-template.el" user-emacs-directory)))
    (if (and (file-exists-p custom-template-file)
             (not (file-exists-p custom-file)))
        (copy-file custom-template-file custom-file)))

  (if (file-exists-p custom-file)
      (load custom-file))

  ;; Load `custom-post.el'
  ;; Put personal configurations to override defaults here.
  (add-hook 'after-init-hook
            (lambda ()
              (let ((file
                     (expand-file-name "custom-post.el" user-emacs-directory)))
                (if (file-exists-p file)
                    (load file)))))

  (provide '+custom)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; +custom.el ends here

#+end_src
* etc/init-auto-save.el
** HOIKAI ZIDUÑ BÒUCÜN MANGIN.
#+begin_src  emacs-lisp :tangle etc/init-auto-save.el
;;; init-auto-save.el --- Init for auto-save.el
;; Filename: init-auto-save.el
;;; Commentary:
;;
;; Init for auto-save.el
;;
;;; Require

(require 'auto-save)

;;; Code:

(auto-save-enable)
(setq auto-save-silent t)
(setq auto-save-delete-trailing-whitespace t)

(provide 'init-auto-save)

;;; init-auto-save.el ends here

#+end_src
* etc/init-awesome-pair.el
** KUTHÒU SÖÑĢÁN GE HÁMSÒU
#+begin_src  emacs-lisp :tangle etc/init-awsome-pair.el
  (require 'awesome-pair)
  (provide 'init-aweome-pair)
  (dolist (hook (list
                 'c-mode-common-hook
                 'c-mode-hook
                 'c++-mode-hook
                 'java-mode-hook
                 'haskell-mode-hook
                 'emacs-lisp-mode-hook
                 'lisp-interaction-mode-hook
                 'lisp-mode-hook
                 'maxima-mode-hook
                 'ielm-mode-hook
                 'sh-mode-hook
                 'makefile-gmake-mode-hook
                 'php-mode-hook
                 'python-mode-hook
                 'js-mode-hook
                 'go-mode-hook
                 'qml-mode-hook
                 'jade-mode-hook
                 'css-mode-hook
                 'ruby-mode-hook
                 'coffee-mode-hook
                 'rust-mode-hook
                 'qmake-mode-hook
                 'lua-mode-hook
                 'swift-mode-hook
                 'minibuffer-inactive-mode-hook
                 ))
    (add-hook hook #'(lambda () (awesome-pair-mode 1))))

  ;; (define-key awesome-pair-mode-map (kbd "(") #'awesome-pair-open-round)
  ;; (define-key awesome-pair-mode-map (kbd "[") #'awesome-pair-open-bracket)
  ;; (define-key awesome-pair-mode-map (kbd "{") #'awesome-pair-open-curly)
  ;; (define-key awesome-pair-mode-map (kbd ")") #'awesome-pair-close-round)
  ;; (define-key awesome-pair-mode-map (kbd "]") #'awesome-pair-close-bracket)
  ;; (define-key awesome-pair-mode-map (kbd "}") #'awesome-pair-close-curly)
  ;; (define-key awesome-pair-mode-map (kbd "SPC") #'awesome-pair-space)
  ;; (define-key awesome-pair-mode-map (kbd "=") #'awesome-pair-equal)
  ;; (define-key awesome-pair-mode-map (kbd "\"") #'awesome-pair-double-quote)

  (define-key awesome-pair-mode-map (kbd "%") #'awesome-pair-match-paren)

  (define-key awesome-pair-mode-map (kbd "M-o") #'awesome-pair-backward-delete)
  (define-key awesome-pair-mode-map (kbd "C-d") #'awesome-pair-forward-delete)
  (define-key awesome-pair-mode-map (kbd "C-k") #'awesome-pair-kill)

  (define-key awesome-pair-mode-map (kbd "M-\"") #'awesome-pair-wrap-double-quote)
  (define-key awesome-pair-mode-map (kbd "M-[") #'awesome-pair-wrap-bracket)
  (define-key awesome-pair-mode-map (kbd "M-{") #'awesome-pair-wrap-curly)
  (define-key awesome-pair-mode-map (kbd "M-(") #'awesome-pair-wrap-round)
  (define-key awesome-pair-mode-map (kbd "M-)") #'awesome-pair-unwrap)

  (define-key awesome-pair-mode-map (kbd "M-p") #'awesome-pair-jump-right)
  (define-key awesome-pair-mode-map (kbd "M-n") #'awesome-pair-jump-left)
  (define-key awesome-pair-mode-map (kbd "M-:") #'awesome-pair-jump-out-pair-and-newline)

#+end_src
* etc/init-basic.el
** GÈIBUN CITDIÑ.
#+begin_src  emacs-lisp :tangle etc/init-basic.el
       ;; init-basic.el --- Initialize basic configurations.	-*- lexical-binding: t -*-

       ;;; Commentary:
       ;;
       ;; Basic configuration.
       ;;

       ;;; Code:
       (provide 'init-basic)

       (eval-when-compile
         (require '+const)
         (require '+custom)
         (require 'subr-x)
         )

       ;; Speed up startup
       (defvar default-file-name-handler-alist file-name-handler-alist)
       (setq file-name-handler-alist nil)
       (setq inhibit-startup-message nil)
       (setq inhibit-startup-screen t) ; hèicèi makyiñ ge kaiduñ gaimin
       (when (fboundp 'tool-bar-mode) (tool-bar-mode -1)) ; ģánbèi guñgêi lán.
       (when (fboundp 'menu-bar-mode) (menu-bar-mode -1)) ;ģánbèi coidán lán
       (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1)) ;ģánbèi ģanduñ tiu

       ;; Goyan sênsik
       (setq user-full-name suk-full-name)
       (setq user-mail-address suk-mail-address)

       (setq-default major-mode 'text-mode
                      fill-column 80
                     tab-width 4
                     c-basic-offset 4
                     indent-tabs-mode nil)     ;; Permanently indent with spaces, never with TABs
       (setq read-process-output-max #x10000)  ; 64kb.  Increase how much is read from processes in a single chunk (default is 4kb)
       (setq vc-follow-symlinks t)
       (setq font-lock-maximum-decoration t)
       (setq initial-scratch-message nil)
       (setq adaptive-fill-regexp "[ t]+|[ t]*([0-9]+.|*+)[ t]*")
       (setq adaptive-fill-first-line-regexp "^* *$")
       (setq set-mark-command-repeat-pop t) ; Repeating C-SPC after popping mark pops it again
       (setq-default major-mode 'text-mode)
       (setq sentence-end "\\([。！？￥%×（）—]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*") ;; citdiñ sentence-end sikbit tsuñman biudim, bat yuñzoi `fill` shi, zoi gêihòu hau cápyap 2 go huñ gák.

       (add-hook 'after-change-major-mode-hook (lambda ()(modify-syntax-entry ?_ "w"))) ;; yöñ `_` bèi shiwai dánci ge zòusiñ bòufan
       (add-hook 'after-change-major-mode-hook (lambda () (modify-syntax-entry ?- "w"))) ;; `-` fuhòu tuñsöñ
       (setq sentence-end-double-space nil)

       (setq scroll-step 2
             scroll-margin 2
             hscroll-step 2
             hscroll-margin 2
             scroll-conservatively 101
             scroll-up-aggressively 0.01
             scroll-down-aggressively 0.01
             scroll-preserve-screen-position 'always)


         ;; Key Modifiers
         ;; make PC keyboard's Win key or other to type Super or Hyper
         ;; (setq w32-pass-lwindow-to-system nil)
         (setq w32-lwindow-modifier 'super)    ; Left Windows key
         (setq w32-apps-modifier 'hyper)       ; Menu/App key
         ;; w32-register-hot-key 在 Emacs 中是用来在Windows系统上注册全局热键的函数，
         ;; 但它并不直接关联到执行 Emacs Lisp 函数。
         ;; 这个函数更多的是告诉Windows操作系统，
         ;; “当这个按键组合被按下时，应该通知Emacs”。
         ;; 要使Emacs在按下这个热键时执行特定的Elisp函数，还需要在Emacs内部设置相应的
         ;; 响应机制。这通常涉及到编写一些额外的Elisp代码来监听这个热键，
         ;; 并在它被按下时触发相应的操作。
         ;; 实际上，w32-register-hot-key 更多地用于在操作系统级别处理特定的按键组合，
         ;; 而不是在Emacs的编辑环境内。如果您想在Emacs内部绑定热键并执行函数，
         ;; 通常会使用像 global-set-key 或 define-key 这样的函数。
         (w32-register-hot-key [s-t])
         ;; scroll-bar
         (set-scroll-bar-mode 'right)
         ;; Optimization
         (setq w32-get-true-file-attributes nil   ; decrease file IO workload
               w32-use-native-image-API t         ; use native w32 API
               w32-pipe-read-delay 0              ; faster IPC
               w32-pipe-buffer-size 65536)       ; read more at a time (64K, was 4K)

  (autoload 'calendar "init-calendar" "Config Chinese calendar " t)
       ;; Unix like OS.
       (unless sys/win32p
          ;; 新建文件使用utf-8-unix方式
          (prefer-coding-system 'utf-8-unix)
          (setq system-time-locale "C")
          (set-selection-coding-system 'utf-8))

       (unless sys/macp
         (setq command-line-ns-option-alist nil))

       (unless sys/linuxp
         (setq command-line-x-option-alist nil))

       ;; GUI Environment
       (when (display-graphic-p)
         (progn
           ;; 隐藏垂直滚动条。
           ;; 其实在有鼠标的环境，阅读文档时，使用滚动条有时会轻松一点。
           ;;  (modify-all-frames-parameters '((vertical-scroll-bars)))
           )
         )

       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

       ;;; init-basic.el ends here

#+end_src

** HÁMSÒU
#+begin_src emacs-lisp :tangle etc/init-basic.el
  ;; Browse URL
  ;;;###autoload
  (defun suk-webkit-browse-url (url &optional pop-buffer new-session)
    "Browse URL with xwidget-webkit' and switch or pop to the buffer.

        POP-BUFFER specifies whether to pop to the buffer.
        NEW-SESSION specifies whether to create a new xwidget-webkit session."
    (interactive (progn
                   (require 'browse-url)
                   (browse-url-interactive-arg "xwidget-webkit URL: ")))
    (or (featurep 'xwidget-internal)
        (user-error "Your Emacs was not compiled with xwidgets support"))

    (xwidget-webkit-browse-url url new-session)
    (let ((buf (xwidget-buffer (xwidget-webkit-current-session))))
      (when (buffer-live-p buf)
        (and (eq buf (current-buffer)) (quit-window))
        (if pop-buffer
            (pop-to-buffer buf)
          (switch-to-buffer buf)))))


  (defun childframe-workable-p ()
    "Whether childframe is workable."
    (not (or noninteractive
             emacs-basic-display
             (not (display-graphic-p)))))

  (defun childframe-completion-workable-p ()
    "Whether childframe completion is workable."
    (and (eq suk-completion-style 'childframe)
         (childframe-workable-p)))

  (defun icons-displayable-p ()
    "Return non-nil if icons are displayable."
    (and suk-icon
         (or (featurep 'nerd-icons)
             (require 'nerd-icons nil t))))

  (defun suk-treesit-available-p ()
    "Check whether tree-sitter is available.
      Native tree-sitter is introduced since 29.1."
    (and suk-tree-sitter
         (fboundp 'treesit-available-p)
         (treesit-available-p)))

  (defun too-long-file-p ()
    "Check whether the file is too long."
    (or (> (buffer-size) 100000)
        (and (fboundp 'buffer-line-statistics)
             (> (car (buffer-line-statistics)) 10000))))

  ;; Increase selected region by semantic units
  (defun suk-treesit-available-p ()
    "Check whether tree-sitter is available.
      Native tree-sitter is introduced since 29.1."
    (and suk-tree-sitter
         (fboundp 'treesit-available-p)
         (treesit-available-p)))


#+end_src
#+begin_verse
       ;; =========================================================
       ;; Tuñgo pincap puitsi mangin sai kèi hoyi diuyuñ ñoibòu chiñzèi loi wai kèi timgá guñnañ
       ;; 增加命令
       ;;(defun lxr (names)
       ;;  (interactive "s查找联系人，请输入条件：")
       ;;  (call-process-shell-command "lxr" nil t t "-s" names))
       ;;执行命令
       ;;首先按功能键，Alt+x，然后输入命令 lxr 。
       ;;系统提示：“查找联系人，请输入条件："。
       ;;输入完成后，emacs 会执行命令lxr -s names，并输出执行的结果。
       ;; =========================================================


#+end_verse
** MANGIN PINMÁ CITDIñ
#+begin_src emacs-lisp :tangle etc/init-basic.el


  ;;====================================================
  ;; 编码设置 begin
  ;;====================================================
  ;; Set UTF-8 as the default coding system
  (prefer-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8-unix)            ;缓存文件编码
  (setq default-file-name-coding-system 'utf-8-unix)              ;文件名编码
  (setq default-keyboard-coding-system 'utf-8-unix)               ;键盘输入编码
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix)) ;进程输出输入编码
  (setq default-sendmail-coding-system 'utf-8-unix)               ;发送邮件编码
  (setq default-terminal-coding-system 'utf-8-unix)               ;终端编码


  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8)

  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)

  ;; 23.2 之后废弃，用buffer-file-coding-system
  ;;(setq default-buffer-file-coding-system 'utf-8)
  (setq buffer-file-coding-system 'utf-8)
  (setq session-save-file-coding-system 'utf-8)

  ;; 据说设置为UTF-8不会卡顿
  (set-language-environment "UTF-8")
  ;; (set-language-environment 'Chinese-GB)

  ;; 重要提示:写在最后一行的，实际上最优先使用; 最前面一行，反而放到最后才识别。
  ;; utf-16le-with-signature 相当于 Windows 下的 Unicode 编码，这里也可写成
  ;; utf-16 (utf-16 实际上还细分为 utf-16le, utf-16be, utf-16le-with-signature等多种)
  ;; Unicode
  ;; (prefer-coding-system 'utf-16le-with-signature)
  ;; (prefer-coding-system 'utf-16)
  ;; (prefer-coding-system 'utf-8-dos)
  ;; 新建文件以utf-8编码，行末结束符平台相关
  (prefer-coding-system 'utf-8)

  (when sys/win32p
    (setq w32-unicode-filenames t) ; kaiyuñ Unicode mañin miñ tsichi
    (setq file-name-coding-system 'utf-8) ; cittsi mangin miñ pinmá wai UTF-8
    (setq locale-coding-system 'utf-8) ; cittsi kêiwik pinmá wai UTF-8

    ;; 简体
    ;;(prefer-coding-system 'gb2312)
    ;;(prefer-coding-system 'cp936)
    ;;(prefer-coding-system 'gb18030)
    ;;(setq file-name-coding-system 'gb18030)
    ;;(setq locale-coding-system 'gb18030); 此句保证中文字体设置有效

    ;; 繁体
    ;; (prefer-coding-system 'cp950)
    ;; (prefer-coding-system 'big5-hkscs)
    ;; (setq file-name-coding-system 'big5-hkscs) ; Hong Kong and Taiwan
    ;; (setq locale-coding-system 'big5-hkscs)

    ;; (setq file-name-coding-system 'cp932)      ; Japanese
    ;; (setq locale-coding-system 'cp932)

  )
#+end_src

* etc/init-bookmark.el
nige hai Emacs zidái ge guñnañ, tuñgo `C-x r m` diuyuñ bookmark-set
hámsòu, zöñ mangin gáp citji wai bookmark. citji shiñguñ ji hau,
zau hoyi saiyuñ `C-x r j` tiudòu mangin gáp duñjuñ. cêi sücim guñnañ
jichü, yá hoyi saiyuñ *register* guñnañ tiudòu mòugo mangin.

#+begin_src emacs-lisp :tangle etc/init-bookmark.el
  ;; init-bookmark.el --- bookmark configurations.	-*- lexical-binding: t -*-
   ;;; Commentary:
  ;;
  ;; Bookmark configuration.
  ;;

    ;;; Code:

  ;; bookmark
  (provide 'init-bookmark)
  (setq bookmark-save-flag 1)

  ;; nige hai Emacs zidái ge guñnañ, tuñgo `C-x r m` diuyuñ bookmark-set hámsòu,
  ;; zöñ mangin gáp citji wai bookmark. citji shiñguñ ji hau, zau hoyi saiyuñ
  ;; `C-x r j` tiudòu mangin gáp duñtsuñ. cêi sücim guñnañ tsichü, yá hoyi saiyuñ
  ;; *register* guñnañ tiudòu mòugo mangin.

  ;;C-x r m (name)  M-x bookmark-set
  ;;C-x r b (name)  M-x bookmark-jump
  ;;C-x r l         M-x bookmark-bmenu-list
  ;;                M-x bookmark-delete
  ;;                M-x bookmark-load
  ;;                M-x bookmark-save

  ;; C-x r m <RET>
  ;; Set the bookmark for the visited file, at point.

  ;; C-x r m bookmark <RET>
  ;; Set the bookmark named bookmark at point (bookmark-set).

  ;; C-x r M bookmark <RET>
  ;; Like C-x r m, but don't overwrite an existing bookmark.

  ;; C-x r b bookmark <RET>
  ;; Jump to the bookmark named bookmark (bookmark-jump).

  ;; C-x r l
  ;; List all bookmarks (list-bookmarks).

  ;; M-x bookmark-save
  ;; Save all the current bookmark values in the default bookmark file.

  ;; M-x bookmark-load <RET> filename <RET>
  ;; Load a file named filename that contains a list of bookmark values. You can
  ;; use this command, as well as bookmark-write, to work with other files of
  ;; bookmark values in addition to your default bookmark file.

  ;; M-x bookmark-write <RET> filename <RET>
  ;; Save all the current bookmark values in the file filename.

  ;; M-x bookmark-delete <RET> bookmark <RET>
  ;; Delete the bookmark named bookmark.

  ;; M-x bookmark-insert-location <RET> bookmark <RET>
  ;; Insert in the buffer the name of the file that bookmark bookmark points to.

  ;; M-x bookmark-insert <RET> bookmark <RET>
  ;; Insert in the buffer the contents of the file that bookmark bookmark points to.

  ;; Bookmark
  (use-package bookmark
    :ensure nil
    :config
    (with-no-warnings
      ;; Display icons for bookmarks
      (defun my-bookmark-bmenu--revert ()
        "Re-populate `tabulated-list-entries'."
        (let (entries)
          (dolist (full-record (bookmark-maybe-sort-alist))
            (let* ((name       (bookmark-name-from-full-record full-record))
                   (annotation (bookmark-get-annotation full-record))
                   (location   (bookmark-location full-record))
                   (file       (file-name-nondirectory location))
                   (type       (let ((fmt "%-8.8s"))
                                 (cond ((null location)
                                        (propertize (format fmt "NOFILE") 'face 'warning))
                                       ((file-remote-p location)
                                        (propertize (format fmt "REMOTE") 'face 'mode-line-buffer-id))
                                       ((not (file-exists-p location))
                                        (propertize (format fmt "NOTFOUND") 'face 'error))
                                       ((file-directory-p location)
                                        (propertize (format fmt "DIRED") 'face 'warning))
                                       (t (propertize (format fmt "FILE") 'face 'success)))))
                   (icon       (if (icons-displayable-p)
                                   (cond
                                    ((file-remote-p location)
                                     (nerd-icons-codicon "nf-cod-radio_tower"))
                                    ((file-directory-p location)
                                     (nerd-icons-icon-for-dir location))
                                    ((not (string-empty-p file))
                                     (nerd-icons-icon-for-file file)))
                                 "")))
              (push (list
                     full-record
                     `[,(if (and annotation (not (string-equal annotation "")))
                            "*" "")
                       ,icon
                       ,(if (display-mouse-p)
                            (propertize name
                                        'font-lock-face 'bookmark-menu-bookmark
                                        'mouse-face 'highlight
                                        'follow-link t
                                        'help-echo "mouse-2: go to this bookmark in other window")
                          name)
                       ,type
                       ,@(if bookmark-bmenu-toggle-filenames
                             (list (propertize location 'face 'completions-annotations)))])
                    entries)))
          (tabulated-list-init-header)
          (setq tabulated-list-entries entries))
        (tabulated-list-print t))
      (advice-add #'bookmark-bmenu--revert :override #'my-bookmark-bmenu--revert)

      (defun my-bookmark-bmenu-list ()
        "Display a list of existing bookmarks.
    The list is displayed in a buffer named `*Bookmark List*'.
    The leftmost column displays a D if the bookmark is flagged for
    deletion, or > if it is flagged for displaying."
        (interactive)
        (bookmark-maybe-load-default-file)
        (let ((buf (get-buffer-create bookmark-bmenu-buffer)))
          (if (called-interactively-p 'interactive)
              (pop-to-buffer buf)
            (set-buffer buf)))
        (bookmark-bmenu-mode)
        (bookmark-bmenu--revert))
      (advice-add #'bookmark-bmenu-list :override #'my-bookmark-bmenu-list)

      (define-derived-mode bookmark-bmenu-mode tabulated-list-mode "Bookmark Menu"
        (setq truncate-lines t)
        (setq buffer-read-only t)
        (setq tabulated-list-format
              `[("" 1) ;; Space to add "*" for bookmark with annotation
                ("" ,(if (icons-displayable-p) 2 0)) ;; Icons
                ("Bookmark" ,bookmark-bmenu-file-column bookmark-bmenu--name-predicate)
                ("Type" 9)
                ,@(if bookmark-bmenu-toggle-filenames
                      '(("File" 0 bookmark-bmenu--file-predicate)))])
        (setq tabulated-list-padding bookmark-bmenu-marks-width)
        (setq tabulated-list-sort-key '("Bookmark" . nil))
        (add-hook 'tabulated-list-revert-hook #'bookmark-bmenu--revert nil t)'
        (setq revert-buffer-function #'bookmark-bmenu--revert)
        (tabulated-list-init-header))))

    ;;; init-bookmark.el ends here

#+end_src

** FÁICUK TIU DÒU BOOKMARK
#+begin_src emacs-lisp :tangle etc/init-bookmark.el

  ;; =========================================================
  ;; fáicuk tiu dòu bookmark
  ;; ---------------------------------------------------------
  ;;;###autoload
  (defun suk/ska-point-to-register()
    "Store cursorposition _fast_ in a register. Use ska-jump-to-register to jump back to the stored position."
    (interactive)
    (setq zmacs-region-stays t)
    (point-to-register 8))
  ;; ---------------------------------------------------------
  ;;;###autoload
  (defun suk/ska-jump-to-register()
    "Switch between current cursorposition and position that was stored with ska-point-to-register."
    (interactive)
    (setq zmacs-region-stays t)
    (let ((tmp (point-marker)))
          (jump-to-register 8)
          (set-register 8 tmp)))

  ;; use init-key.el to load and bind the functions.
  ;;(global-set-key  [C-f7] 'suk/ska-point-to-register)
  ;;(global-set-key  [f7] 'suk/ska-jump-to-register)
#+end_src
** FÁICUK TIUDÒU MANGIN
#+begin_src emacs-lisp :tangle etc/init-bookmark.el

;; Registers allow you to jump to a file or other location quickly.
;; To jump to a register, use C-x r j followed by the letter of the register.
;; Using registers for all these file shortcuts is probably a bit of
;; a waste since I can easily define my own keymap, but since I rarely
;; go beyond register A anyway. Also, I might as well add shortcuts for refiling.
(require 'bookmark)
(defvar my-refile-map (make-sparse-keymap))
(defmacro my-defshortcut (key file)
  `(progn
     (set-register ,key (cons 'file ,file))
     (define-key my-refile-map
       (char-to-string ,key)
       (lambda (prefix)
         (interactive "p")
         (let ((org-refile-targets '(((,file) :maxlevel . 6)))
               (current-prefix-arg (or current-prefix-arg '(4))))
           (call-interactively 'org-refile))))))

;;(define-key my-refile-map "," 'my-org-refile-to-previous-in-file)
(my-defshortcut ?e "~/.emacs.d/init.el")
(my-defshortcut ?E "~/.emacs.d/custom.el")
;; (my-defshortcut ?i "~/cloud/orgzly/Inbox.org")
;; (my-defshortcut ?o "~/cloud/orgzly/organizer.org")
;; (my-defshortcut ?s "~/personal/sewing.org")
;; (my-defshortcut ?b "~/personal/business.org")
;; (my-defshortcut ?p "~/personal/google-inbox.org")
;; (my-defshortcut ?P "~/personal/google-ideas.org")
;; (my-defshortcut ?B "~/Dropbox/books")
(my-defshortcut ?n "~/notes")
;; (my-defshortcut ?N "~/sync/notes/QuickNote.md")
;; (my-defshortcut ?w "~/Dropbox/public/sharing/index.org")
;; (my-defshortcut ?W "~/Dropbox/public/sharing/blog.org")
;; (my-defshortcut ?j "~/personal/journal.org")
;; (my-defshortcut ?J "~/cloud/a/Journal.csv")
;; (my-defshortcut ?I "~/Dropbox/Inbox")
;; (my-defshortcut ?g "~/sachac.github.io/evil-plans/index.org")
;; (my-defshortcut ?c "~/code/dev/elisp-course.org")
;; (my-defshortcut ?C "~/personal/calendar.org")
;; (my-defshortcut ?l "~/dropbox/public/sharing/learning.org")
;; (my-defshortcut ?q "~/sync/notes/QuickNote.md")
;; (my-defshortcut ?Q "~/personal/questions.org")


#+end_src
* etc/init-buffers.el
** CITDIÑ YITGIN
#+begin_src emacs-lisp :tangle etc/init-buffers.el
  ;;; init-buffers.el --- Initialize buffers configurations. -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;
  ;; buffers configuration.
  ;;
  ;;; Code:

  (provide 'init-buffers)

  (eval-when-compile
    (require '+const)
    (require '+custom)
    (require 'buffer-extension))
  (suk-set-key-bindings
   'global-set-key
   (list
    ;;(list (kbd "C-x b l") #'suk/count-brf-lines)
    (list (kbd "C-x x x") #'suk/switch-major-mode)
    (list (kbd "C-x x X") #'suk/get-mode-name)
    (list (kbd "C-x x n") #'suk/new-empty-buffer)
    (list (kbd "C-x x s") #'suk/create-scratch-buffer)
    (list (kbd "C-x x o") #'suk/create-scratch-org)
    (list (kbd "C-x x m") #'suk/switch-to-minibuffer)
    (list (kbd "C-x x c") #'copy-buffer-file-name-as-kill)
    (list (kbd "C-x x t") #'suk/toggle-margin-right)
    (list (kbd "C-x k")   #'suk/close-current-buffer)
    (list (kbd "C-x C-k")   #'suk/kill-all-buffers-except-current)
    (list (kbd "C-x K")  #'suk/kill-other-window-buffer) ;关闭其他窗口的
    (list (kbd "C-x x u") #'suk/revert-buffer-with-utf8)
    (list (kbd "C-x x g") #'suk/revert-buffer-with-gbk)
    ;;'([C-t]               transpose-chars)
    ;;'([S-f6]              hs-minor-mode)
    ;;'([S-f5]              toggle-truncate-lines)
    (list (kbd "C-S-t") #'suk/open-last-closed)
    (list (kbd "C-x R") #'recentf-open)
    (list (kbd "C-S-<f6>") #'suk/move-buffer-file)
    (list (kbd "C-F")  #'suk/indent-buffer)
    (list (kbd "C-S-<f2>")  #'suk/rename-file-and-buffer)))
  ;;; init-buffers.el ends here
#+end_src
* etc/init-edit.el
#+begin_src emacs-lisp :tangle etc/init-edit.el
  (eval-when-compile
    (require '+const)
    (require '+custom)
    (require 'init-package)
    )


  (use-package expand-region
    :load-path "~/.emacs.d/extensions/expand-region"
    :bind ("C-+" . er/expand-region)
    :config
    (when (suk-treesit-available-p)
      (defun treesit-mark-bigger-node ()
        "Use tree-sitter to mark regions."
        (let* ((root (treesit-buffer-root-node))
               (node (treesit-node-descendant-for-range root (region-beginning) (region-end)))
               (node-start (treesit-node-start node))
               (node-end (treesit-node-end node)))
          ;; Node fits the region exactly. Try its parent node instead.
          (when (and (= (region-beginning) node-start) (= (region-end) node-end))
            (when-let ((node (treesit-node-parent node)))
              (setq node-start (treesit-node-start node)
                    node-end (treesit-node-end node))))
          (set-mark node-end)
          (goto-char node-start)))
      ))

  ;; Jump to Chinese characters
  (use-package ace-pinyin
    :diminish
    :hook (after-init . ace-pinyin-global-mode))

  ;; Minor mode to aggressively keep your code always indented
  (use-package aggressive-indent
    :diminish
    :hook ((after-init . global-aggressive-indent-mode)
           ;; NOTE: Disable in large files due to the performance issues
           ;; https://github.com/Malabarba/aggressive-indent-mode/issues/73
           (find-file . (lambda ()
                          (when (too-long-file-p)
                            (aggressive-indent-mode -1)))))
    :config
    ;; Disable in some modes
    (dolist (mode '(gitconfig-mode
                    asm-mode web-mode html-mode css-mode
                    go-mode scala-mode
                    shell-mode term-mode vterm-mode
                    prolog-inferior-mode))
      (add-to-list 'aggressive-indent-excluded-modes mode))

    ;; Disable in some commands
    (add-to-list 'aggressive-indent-protected-commands #'delete-trailing-whitespace t)

    ;; Be slightly less aggressive in C/C++/C#/Java/Go/Swift
    (add-to-list 'aggressive-indent-dont-indent-if
                 '(and (derived-mode-p 'c-mode 'c++-mode 'csharp-mode
                                       'java-mode 'go-mode 'swift-mode)
                       (null (string-match "\\([;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)"
                                           )))))
  ;; Rectangle
  (use-package rect
    :ensure nil
    :bind (:map text-mode-map
           ("<C-return>" . rect-hydra/body)
           :map prog-mode-map
           ("<C-return>" . rect-hydra/body))
    :init
    (with-eval-after-load 'org
      (bind-key "<s-return>" #'rect-hydra/body org-mode-map))
    (with-eval-after-load 'wgrep
      (bind-key "<C-return>" #'rect-hydra/body wgrep-mode-map))
    (with-eval-after-load 'wdired
      (bind-key "<C-return>" #'rect-hydra/body wdired-mode-map))
    :pretty-hydra
    ((:title (pretty-hydra-title "Rectangle" 'mdicon "nf-md-border_all")
      :color amaranth :body-pre (rectangle-mark-mode) :post (deactivate-mark) :quit-key ("q" "C-g"))
     ("Move"
      (("h" backward-char "←")
       ("j" next-line "↓")
       ("k" previous-line "↑")
       ("l" forward-char "→"))
      "Action"
      (("w" copy-rectangle-as-kill "copy") ; C-x r M-w
       ("y" yank-rectangle "yank")         ; C-x r y
       ("t" string-rectangle "string")     ; C-x r t
       ("d" kill-rectangle "kill")         ; C-x r d
       ("c" clear-rectangle "clear")       ; C-x r c
       ("o" open-rectangle "open"))        ; C-x r o
      "Misc"
      (("N" rectangle-number-lines "number lines")        ; C-x r N
       ("e" rectangle-exchange-point-and-mark "exchange") ; C-x C-x
       ("u" undo "undo")
       ("r" (if (region-active-p)
                (deactivate-mark)
              (rectangle-mark-mode 1))
        "reset")))))

  ;; Automatically reload files was modified by external program
  (use-package autorevert
    :ensure nil
    :diminish
    :hook (after-init . global-auto-revert-mode))

  ;; Pass a URL to a WWW browser
  (use-package browse-url
    :ensure nil
    :defines dired-mode-map
    :bind (("C-c C-z ." . browse-url-at-point)
           ("C-c C-z b" . browse-url-of-buffer)
           ("C-c C-z r" . browse-url-of-region)
           ("C-c C-z u" . browse-url)
           ("C-c C-z e" . browse-url-emacs)
           ("C-c C-z v" . browse-url-of-file))
    :init
    (with-eval-after-load 'dired
      (bind-key "C-c C-z f" #'browse-url-of-file dired-mode-map))

    ;; For WSL
    (let ((cmd-exe "/mnt/c/Windows/System32/cmd.exe")
          (cmd-args '("/c" "start")))
      (when (file-exists-p cmd-exe)
        (setq browse-url-generic-program  cmd-exe
              browse-url-generic-args     cmd-args
              browse-url-browser-function 'browse-url-generic)
        (when (daemonp)
          (advice-add #'browse-url :override #'browse-url-generic)))))

  ;; Click to browse URL or to send to e-mail address
  (use-package goto-addr
    :ensure nil
    :hook ((text-mode . goto-address-mode)
           (prog-mode . goto-address-prog-mode)))


  ;; Jump to things in Emacs tree-style
  (use-package avy
    :bind (("C-:"   . avy-goto-char)
           ("C-'"   . avy-goto-char-2)
           ("M-g l" . avy-goto-line)
           ("M-g w" . avy-goto-word-1)
           ("M-g e" . avy-goto-word-0))
    :hook (after-init . avy-setup-default)
    :config (setq avy-all-windows nil
                  avy-all-windows-alt t
                  avy-background t
                  avy-style 'pre))

  ;; Kill text between the point and the character CHAR
  (use-package avy-zap
    :bind (("M-z" . avy-zap-to-char-dwim)
           ("M-Z" . avy-zap-up-to-char-dwim)))

  ;; Show number of matches in mode-line while searching
  (use-package anzu
    :diminish
    :bind (([remap query-replace] . anzu-query-replace)
           ([remap query-replace-regexp] . anzu-query-replace-regexp)
           :map isearch-mode-map
           ([remap isearch-query-replace] . anzu-isearch-query-replace)
           ([remap isearch-query-replace-regexp] . anzu-isearch-query-replace-regexp))
    :hook (after-init . global-anzu-mode))

  ;; Redefine M-< and M-> for some modes
  (use-package beginend
    :diminish beginend-global-mode
    :hook (after-init . beginend-global-mode)
    :config (mapc (lambda (pair)
                    (diminish (cdr pair)))
                  beginend-modes))

  ;; Drag stuff (lines, words, region, etc...) around
  (use-package drag-stuff
    :diminish
    :autoload drag-stuff-define-keys
    :hook (after-init . drag-stuff-global-mode)
    :config
    (add-to-list 'drag-stuff-except-modes 'org-mode)
    (drag-stuff-define-keys))


  ;; A comprehensive visual interface to diff & patch
  (use-package ediff
    :ensure nil
    :hook(;; show org ediffs unfolded
          (ediff-prepare-buffer . outline-show-all)
          ;; restore window layout when done
          (ediff-quit . winner-undo))
    :config
    (setq ediff-window-setup-function 'ediff-setup-windows-plain
          ediff-split-window-function 'split-window-horizontally
          ediff-merge-split-window-function 'split-window-horizontally))


  ;; Automatic parenthesis pairing
  (use-package elec-pair
    :ensure nil
    :hook (after-init . electric-pair-mode)
    :init (setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit))

  ;; Visual `align-regexp'
  (use-package ialign)


  ;; Edit multiple regions in the same way simultaneously
  (use-package iedit
    :defines desktop-minor-mode-table
    :bind (("C-;" . iedit-mode)
           ("C-x r RET" . iedit-rectangle-mode)
           :map isearch-mode-map ("C-;" . iedit-mode-from-isearch)
           :map esc-map ("C-;" . iedit-execute-last-modification)
           :map help-map ("C-;" . iedit-mode-toggle-on-function))
    :config
    ;; Avoid restoring `iedit-mode'
    (with-eval-after-load 'desktop
      (add-to-list 'desktop-minor-mode-table
                   '(iedit-mode nil))))


  ;; Multiple cursors
  (use-package multiple-cursors
    :bind (("C-c m" . multiple-cursors-hydra/body)
           ("C-S-c C-S-c"   . mc/edit-lines)
           ("C->"           . mc/mark-next-like-this)
           ("C-<"           . mc/mark-previous-like-this)
           ("C-c C-<"       . mc/mark-all-like-this)
           ("C-M->"         . mc/skip-to-next-like-this)
           ("C-M-<"         . mc/skip-to-previous-like-this)
           ("s-<mouse-1>"   . mc/add-cursor-on-click)
           ("C-S-<mouse-1>" . mc/add-cursor-on-click)
           :map mc/keymap
           ("C-|" . mc/vertical-align-with-space))
    :pretty-hydra
    ((:title (pretty-hydra-title "Multiple Cursors" 'mdicon "nf-md-cursor_move")
      :color amaranth :quit-key ("q" "C-g"))
     ("Up"
      (("p" mc/mark-previous-like-this "prev")
       ("P" mc/skip-to-previous-like-this "skip")
       ("M-p" mc/unmark-previous-like-this "unmark")
       ("|" mc/vertical-align "align with input CHAR"))
      "Down"
      (("n" mc/mark-next-like-this "next")
       ("N" mc/skip-to-next-like-this "skip")
       ("M-n" mc/unmark-next-like-this "unmark"))
      "Misc"
      (("l" mc/edit-lines "edit lines" :exit t)
       ("a" mc/mark-all-like-this "mark all" :exit t)
       ("s" mc/mark-all-in-region-regexp "search" :exit t)
       ("<mouse-1>" mc/add-cursor-on-click "click"))
      "% 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")"
      (("0" mc/insert-numbers "insert numbers" :exit t)
       ("A" mc/insert-letters "insert letters" :exit t)))))

  ;; Smartly select region, rectangle, multi cursors
  (use-package smart-region
    :hook (after-init . smart-region-on))




  ;; Copy&paste GUI clipboard from text terminal
  (use-package xclip
    :hook (after-init . xclip-mode)
    :config
    ;; @see https://github.com/microsoft/wslg/issues/15#issuecomment-1796195663
    (when (eq xclip-method 'wl-copy)
      (set-clipboard-coding-system 'gbk) ; for wsl
      (setq interprogram-cut-function
            (lambda (text)
              (start-process "xclip"  nil xclip-program "--trim-newline" "--type" "text/plain;charset=utf-8" text)))))


  ;; Hungry deletion
  (use-package hungry-delete
    :diminish
    :hook (after-init . global-hungry-delete-mode)
    :init (setq hungry-delete-chars-to-skip " \t\f\v"
                hungry-delete-except-modes
                '(help-mode minibuffer-mode minibuffer-inactive-mode calc-mode)))

  ;; Move to the beginning/end of line or code
  (use-package mwim
    :bind (([remap move-beginning-of-line] . mwim-beginning)
           ([remap move-end-of-line] . mwim-end)))

  ;; Treat undo history as a tree, ^x u
  (if emacs/>=28p
      (use-package vundo
        :ensure nil
        :load-path "~/.emacs.d/extensions/vundo"
        :bind (("C-x u" . vundo)
  ;; undo ^+-, redo ^!+-
               )
        :config (setq vundo-glyph-alist vundo-unicode-symbols))
    (use-package undo-tree
      :diminish undo-tree-mode
      :bind (("C-x u" . undo-trees)
             ("C-/" . undo-tree-undo)
             ("C-?" . undo-tree-redo)
             )
      :hook (after-init . global-undo-tree-mode)
      :init (setq undo-tree-visualizer-timestamps t
                  undo-tree-visualizer-diff t
                  undo-tree-enable-undo-in-region nil
                  undo-tree-auto-save-history nil)
      ;; HACK: keep the diff window
      (with-no-warnings
        (make-variable-buffer-local 'undo-tree-visualizer-diff)
        (setq-default undo-tree-visualizer-diff t))))
  ;; Goto last change
  (use-package goto-chg)

  ;; Handling capitalized subwords in a nomenclature
  (use-package subword
    :ensure nil
    :diminish
    :hook ((prog-mode . subword-mode)
           (minibuffer-setup . subword-mode)))

  ;; Flexible text folding
  (use-package hideshow
    :ensure nil
    :diminish hs-minor-mode
    :pretty-hydra
    ((:title (pretty-hydra-title "HideShow" 'octicon "nf-oct-fold")
      :color amaranth :quit-key ("q" "C-g"))
     ("Fold"
      (("t" hs-toggle-all "toggle all")
       ("a" hs-show-all "show all")
       ("i" hs-hide-all "hide all")
       ("g" hs-toggle-hiding "toggle hiding")
       ("c" hs-cycle "cycle block")
       ("s" hs-show-block "show block")
       ("h" hs-hide-block "hide block")
       ("l" hs-hide-level "hide level"))
      "Move"
      (("C-a" mwim-beginning-of-code-or-line "⭰")
       ("C-e" mwim-end-of-code-or-line "⭲")
       ("C-b" backward-char "←")
       ("C-n" next-line "↓")
       ("C-p" previous-line "↑")
       ("C-f" forward-char "→")
       ("C-v" pager-page-down "↘")
       ("M-v" pager-page-up "↖")
       ("M-<" beginning-of-buffer "⭶")
       ("M->" end-of-buffer "⭸"))))
    :bind (:map hs-minor-mode-map
           ("C-~" . hideshow-hydra/body)
           ("C-S-<escape>" . hideshow-hydra/body))
    :hook (prog-mode . hs-minor-mode)
    :config
    ;; More functions
    ;; @see https://karthinks.com/software/simple-folding-with-hideshow/
    (defun hs-cycle (&optional level)
      (interactive "p")
      (let (message-log-max
            (inhibit-message t))
        (if (= level 1)
            (pcase last-command
              ('hs-cycle
               (hs-hide-level 1)
               (setq this-command 'hs-cycle-children))
              ('hs-cycle-children
               (save-excursion (hs-show-block))
               (setq this-command 'hs-cycle-subtree))
              ('hs-cycle-subtree
               (hs-hide-block))
              (_
               (if (not (hs-already-hidden-p))
                   (hs-hide-block)
                 (hs-hide-level 1)
                 (setq this-command 'hs-cycle-children))))
          (hs-hide-level level)
          (setq this-command 'hs-hide-level))))

    (defun hs-toggle-all ()
      "Toggle hide/show all."
      (interactive)
      (pcase last-command
        ('hs-toggle-all
         (save-excursion (hs-show-all))
         (setq this-command 'hs-global-show))
        (_ (hs-hide-all))))

    ;; Display line counts
    (defun hs-display-code-line-counts (ov)
      "Display line counts when hiding codes."
      (when (eq 'code (overlay-get ov 'hs))
        (overlay-put ov 'display
                     (concat
                      " "
                      (propertize
                       (if (char-displayable-p ?⏷) "⏷" "...")
                       'face 'shadow)
                      (propertize
                       (format " (%d lines)"
                               (count-lines (overlay-start ov)
                                            (overlay-end ov)))
                       'face '(:inherit shadow :height 0.8))
                      " "))))
    (setq hs-set-up-overlay #'hs-display-code-line-counts))

  ;; Narrow/Widen
  (use-package fancy-narrow
    :diminish
    :hook (after-init . fancy-narrow-mode))

  ;; Hanlde minified code
  (use-package so-long
    :hook (after-init . global-so-long-mode))


  ;; Nice writing
  (use-package olivetti
    :diminish
    :bind ("<f7>" . olivetti-mode)
    :init (setq olivetti-body-width 0.62))

  ;; Edit text for browsers with GhostText or AtomicChrome extension
  (use-package atomic-chrome
    :hook ((emacs-startup . atomic-chrome-start-server)
           (atomic-chrome-edit-mode . delete-other-windows))
    :init (setq atomic-chrome-buffer-frame-width 100
                atomic-chrome-buffer-frame-height 30
                atomic-chrome-buffer-open-style 'frame)
    :config
    (when (fboundp 'gfm-mode)
      (setq atomic-chrome-url-major-mode-alist
            '(("github\\.com" . gfm-mode)
              ("gitlab\\.com" . gfm-mode)))))

  (unless sys/win32p
    ;; Open files as another user
    (use-package sudo-edit)
    ;; On-the-fly spell checker
    (use-package flyspell
      :ensure t
      :defer 2
      :diminish flyspell-mode
      :if (executable-find "aspell")
      :hook (((text-mode outline-mode) . flyspell-mode)
             (prog-mode . flyspell-prog-mode)
             (flyspell-mode . (lambda ()
                                (unbind-key "C-;" flyspell-mode-map)
                                (unbind-key "C-," flyspell-mode-map)
                                (unbind-key "C-." flyspell-mode-map))))
      :init
      (setq flyspell-issue-message-flag nil)
      (setq ispell-program-name "aspell")
      (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US" "--run-together")))

    )
  (provide 'init-edit)

#+end_src
* etc/init-calendar.el
#+begin_src emacs-lisp :tangle etc/init-calendar.el
(provide 'init-calendar)
;;; 设置日历 ;;;;;;
;; Emacs Calender
;;
;; Emacs 中有日历，而且可以称之为一个系统，因为其中除了最常用的日历之外，
;; 还有其他的近十种历法，其中有日记、约会提醒、纪念日提示以及节假日提示等
;; 等。其中的历法包括中国的农历、希伯来历、伊斯兰历、法国革命历、中美玛雅
;; 历等等，可以根据经纬度告知你的所在的每天日出日落的时间等等。
;;
;; holiday-fixed m d    固定阳历节日， m 月 d 日
;; holiday-float m w n 浮动阳历节日， m 月的第 n 个星期 w%7
;;
;; ----------------------------------------------
;; .    跳回当前天
;; o    跳到某一个月
;; g d    跳到某年某月某日
;; g c    跳到某年某星期的星期几
;; g C    跳到阴历的某一天
;; p C    显示当前的阴历日期
;; h    显示当前节日
;; i d    加入当前这一天的日程安排
;; i w    加入每周这一天的日程安排
;; i m    加入每月这一天的日程安排
;; i y    加入每年这一天的日程安排
;; i a    加入周年纪念（anniversary），比如生日等
;; d    察看当前日期的diary
;; -----------------------------------------------
;;

(defun animals(birthyear)
  "Calculate the Chinese aninal by year"
  (let ((x (% (- 1997 birthyear) 12)))
    (cond ((or (= x 1) (= x -11))  "鼠")
          ((= x 0)                 "牛")
          ((or (= x 11) (= x -1))  "虎")
          ((or (= x 10) (= x -2))  "兔")
          ((or (= x 9) (= x -3))   "龙")
          ((or (= x 8) (= x -4))   "蛇")
          ((or (= x 7) (= x -5))   "马")
          ((or (= x 6) (= x -6))   "羊")
          ((or (= x 5) (= x -7))   "猴")
          ((or (= x 4) (= x -8))   "鸡")
          ((or (= x 3) (= x -9))   "狗")
          ((or (= x 2) (= x -10))  "猪")
          )
    )
  )


(setq diary-mail-addr user-mail-address)
(add-hook 'diary-hook 'appt-make-list)
;;appointment
(setq appt-issue-message t)

(autoload 'calendar-chinese-year "cal-china" "Chinese year data" t)
(require 'cal-china-x)
;; Holidays
;;除去基督徒的节日、希伯来人的节日和伊斯兰教的节日。
(setq hebrew-holidays nil
      islamic-holidays nil
      solar-holidays nil
      bahai-holidays nil
	  ;; christian-holidays nil
      )
(setq calendar-mark-holidays-flag t
      cal-china-x-important-holidays cal-china-x-chinese-holidays
      cal-china-x-general-holidays '((holiday-lunar 1 15 "元宵节")
                                     (holiday-lunar 7 7 "七夕节")
                                     ;; 生日
                                     (holiday-lunar 7 16  "老豆生日 (七月十六)" );阴历生日
                                     (holiday-lunar 1 10  "老母生日 (正月初十)" );阴历生日
                                     (holiday-lunar 4 4  "老母生日 (四月初四)" );阴历生日
                                     (holiday-lunar 10 18 "我嘅生日 (十月十八)" );阴历生日
                                     (holiday-lunar 9 1   "細佬生日 (九月初一)") ;阴历生日
                                     (holiday-lunar 3 2   "女儿生日 (三月初二)") ;阴历生日
                                     (holiday-fixed 4 8   "女儿生日 (4月8日)")   ;阳历生日
                                     (holiday-fixed 10 12  "女儿生日 (10月12日)") ;阳历生日
                                     (holiday-lunar 9 14   "女儿生日 (九月十四)") ;阴历生日
                                     (holiday-lunar 6 21  "老婆生日 (六月廿一)") ;阴历生日
                                     (holiday-fixed 3 8 "妇女节")
                                     (holiday-fixed 3 12 "植树节")
                                     (holiday-fixed 5 4 "青年节")
                                     (holiday-fixed 6 1 "儿童节")
                                     (holiday-fixed 9 10 "教师节"))
      holiday-other-holidays '((holiday-fixed 2 14 "情人节")
                               (holiday-fixed 4 1 "愚人节")
                               (holiday-fixed 12 25 "圣诞节")
                               (holiday-float 5 0 2 "母亲节")
                               (holiday-float 6 0 3 "父亲节")
                               (holiday-float 11 4 4 "感恩节"))
      calendar-holidays (append cal-china-x-important-holidays
                                cal-china-x-general-holidays
                                cal-china-x-japanese-holidays
              					holiday-general-holidays
              					holiday-christian-holidays
                                holiday-other-holidays))



(setq general-holidays '((holiday-fixed 1 1   "元旦")
                         (holiday-fixed 2 14  "情人节")
                         (holiday-fixed 4 1   "愚人节")
                         (holiday-fixed 12 25 "圣诞节")
                         (holiday-fixed 10 1  "国庆节")
                         (holiday-float 5 0 2 "母亲节")   ;5月的第二个星期天
                         (holiday-float 6 0 3 "父亲节")
                         ))

(setq local-holidays '((holiday-chinese 1 15  "元宵节 (正月十五)")
                       (holiday-chinese 5 5   "端午节 (五月初五)")
                       (holiday-chinese 9 9   "重阳节 (九月初九)")
                       (holiday-chinese 8 15  "中秋节 (八月十五)")
                       ;; 生日
                       (holiday-chinese 7 16  "老豆生日 (七月十六)" );阴历生日
                       (holiday-chinese 1 10  "老母生日 (正月初十)" );阴历生日
                       (holiday-chinese 4 4  "老母生日 (四月初四)" );阴历生日
                       (holiday-chinese 10 18 "我嘅生日 (十月十八)" );阴历生日
                       (holiday-chinese 9 1   "細佬生日 (九月初一)") ;阴历生日
                       (holiday-chinese 3 2   "女儿生日 (三月初二)") ;阴历生日
                       (holiday-fixed   4 8   "女儿生日 (4月8日)")   ;阳历生日
                       (holiday-fixed   10 12  "女儿生日 (10月12日)") ;阳历生日
                       (holiday-chinese 9 14   "女儿生日 (九月十四)") ;阴历生日
                       (holiday-chinese 6 21  "老婆生日 (六月廿一)") ;阴历生日
                       ))

(setq chinese-calendar-celestial-stem
      ["甲" "乙" "丙" "丁" "戊" "己" "庚" "辛" "壬" "癸"])
(setq chinese-calendar-terrestrial-branch
      ["子" "丑" "寅" "卯" "辰" "巳" "午" "未" "申" "酉" "戌" "亥"])

(setq mark-diary-entries-in-calendar t
      appt-issue-message nil
      mark-holidays-in-calendar t
      view-calendar-holidays-initially nil)

(setq diary-date-forms '((year "/" month "/" day "[^/0-9]"))
      calendar-date-display-form '(year "/" month "/" day)
      calendar-time-display-form
      '(24-hours ":" minutes (if time-zone " (") time-zone (if time-zone ")")))

(add-hook 'today-visible-calendar-hook 'calendar-mark-today)



(defun holiday-chinese (cmonth cday string)
  "Chinese calendar holiday, month and day in Chinese calendar (CMONTH, CDAY).

If corresponding MONTH and DAY in gregorian calendar is visible,
the value returned is the list \(((MONTH DAY year) STRING)).
Returns nil if it is not visible in the current calendar window."
  (let* ((m displayed-month)
     (y displayed-year)
     (gdate (calendar-gregorian-from-absolute
         (+ (cadr (assoc cmonth (calendar-chinese-year y))) (1- cday))))
     (gm (car gdate))
     (gd (cadr gdate))
     (gy (caddr gdate)))
    (increment-calendar-month m y (- 11 gm))
    (if (> m 9)
        (list (list (list gm gd gy) string)))))

(defun birthday-fixed (month day string)
  "Holiday on MONTH, DAY (Gregorian) called STRING.
If MONTH, DAY is visible, the value returned is the list (((MONTH DAY year)
STRING)).  Returns nil if it is not visible in the current calendar window."
  (let ((m displayed-month)
        (y displayed-year)
        (animal (animals (string-to-number (nth 1 (split-string string "(")))))
        )
    (increment-calendar-month m y (- 11 month))
    (if (> m 9)
      (list (list (list month day y) string animal)))))


;;设置我所在地方的经纬度，calendar里有个功能是日月食的预测，和你的经纬度相联系的。
;; 让emacs能计算日出日落的时间，在 calendar 上用 S 即可看到
(setq calendar-latitude +35.6764)
(setq calendar-longitude +139.6500)
(setq calendar-location-name "東京")


;; 设置 calendar 的显示
(setq calendar-remove-frame-by-deleting t)
(setq calendar-week-start-day 1) ; 设置星期一为每周的第一天
(setq mark-diary-entries-in-calendar t) ; 标记calendar上有diary的日期
(setq mark-holidays-in-calendar nil) ; 为了突出有diary的日期，calendar上不标记节日
(setq view-calendar-holidays-initially nil) ; 打开calendar的时候不显示一堆节日

;; bind `s-<F11>` in init-key.el
;;(global-set-key (kbd "<f11>") 'calendar)

#+end_src
* etc/init-completion.el
#+begin_src emacs-lisp :tangle etc/init-completion.el
  ;;; init-completion.el --- Initialize completion configurations.	-*- lexical-binding: t -*-

;;; Commentary:
;;
;; Modern completion configuration.
;;

;;; Code:


(use-package helm
  :ensure t)
(use-package ac-helm
  :ensure t)
;; 著名的Emacs补全框架, 为 LSP 提供额外的功能，如自动补全
(use-package company
  :defer 2
  :hook (after-init . global-company-mode)
  :init (setq company-tooltip-align-annotations t
              company-idle-delay 0 company-echo-delay 0
              company-minimum-prefix-length 1
              company-require-match nil
              company-dabbrev-ignore-case nil
              company-dabbrev-downcase nil
              company-show-numbers t)
  :config
  (setq switch-window-input-style 'minibuffer)
  (setq switch-window-increase 4)
  (setq switch-window-threshold 2)
  (setq switch-window-shortcut-sytle 'querty)
  (setq switch-window-qwerty-shortcuts
        '("a" "s" "d" "f" "j" "k" "l"))
  (global-company-mode)
  :bind (:map company-active-map
              ("C-n" . #'company-select-next)
              ("C-p" . #'company-select-previous)
              ("TAB" . company-complete-selection)
              ("M-h" . company-complete-selection)
              ("M-H" . company-complete-common)
              ("M-s" . company-search-candidates)
              ("M-S" . company-filter-candidates)
              ("M-n" . company-select-next)
              ("M-p" . company-select-previous))
  (:map leader-key
        ("c s" . #'company-yasnippet
         ))
  )
(use-package company-anaconda
  :ensure nil)
(use-package company-box
  :ensure nil)
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Only list the commands of the current modes
  (when (boundp 'read-extended-command-predicate)
    (setq read-extended-command-predicate
          #'command-completion-default-include-p))

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))

;; Optionally use the `orderless' completion style.
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion))))
  (orderless-component-separator #'orderless-escapable-split-on-space))

;; Support Pinyin
(use-package pinyinlib
  :after orderless
  :autoload pinyinlib-build-regexp-string
  :init
  (defun completion--regex-pinyin (str)
    (orderless-regexp (pinyinlib-build-regexp-string str)))
  (add-to-list 'orderless-matching-styles 'completion--regex-pinyin))

(use-package vertico
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  :hook ((after-init . vertico-mode)
         (rfn-eshadow-update-overlay . vertico-directory-tidy)))

(when (childframe-completion-workable-p)
  (use-package vertico-posframe
    :hook (vertico-mode . vertico-posframe-mode)
    :init (setq vertico-posframe-poshandler
                #'posframe-poshandler-frame-center-near-bottom
                vertico-posframe-parameters
                '((left-fringe  . 8)
                  (right-fringe . 8)))
    )
  )

(use-package nerd-icons-completion
  :when (icons-displayable-p)
  :hook (vertico-mode . nerd-icons-completion-mode))

(use-package marginalia
  :hook (after-init . marginalia-mode))

;; 增强了搜索功能
;; (use-package swiper
;;   :bind
;;   (
;;    ("C-x M-s" . swiper)
;;    ("C-x C-F"  . counsel-find-file)
;;    ("C-x C-M-x" . counsel-M-x)
;;    )
;;   :config
;;   (progn
;;     (ivy-mode 1)
;;     (setq ivy-use-virtual-buffers t)
;;     (setq ivy-display-style 'fancy)
;;     ;;(define-key read-expression-map (kbd "C-r") 'counsel-expression-history))
;;     ))

;;(use-package bind-key)
;;(bind-key "C-c x" #'some-function some-package-mode-map)
;;(bind-key "C-c y" #'another-function)
(use-package consult
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h"   . consult-history)
         ("C-c k"   . consult-kmacro)
         ("C-c m"   . consult-man)
         ("C-c i"   . consult-info)
         ("C-c r"   . consult-ripgrep)
         ("C-c T"   . consult-theme)
         ("C-."     . consult-imenu)

         ;;("C-c c e" . consult-colors-emacs)
         ;;("C-c c w" . consult-colors-web)
         ;;("C-c c f" . describe-face)
         ;;("C-c c t" . consult-theme)

         ([remap Info-search]        . consult-info)
         ([remap isearch-forward]    . consult-line)
         ([remap recentf-open-files] . consult-recent-file)

         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b"   . consult-buffer)              ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#"     . consult-register-load)
         ("M-'"     . consult-register-store)        ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#"   . consult-register)
         ;; Other custom bindings
         ("M-y"     . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e"   . consult-compile-error)
         ("M-g f"   . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g"   . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o"   . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m"   . consult-mark)
         ("M-g k"   . consult-global-mark)
         ("M-g i"   . consult-imenu)
         ("M-g I"   . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d"   . consult-find)
         ("M-s D"   . consult-locate)
         ("M-s g"   . consult-grep)
         ("M-s G"   . consult-git-grep)
         ("M-s r"   . consult-ripgrep)
         ("M-s l"   . consult-line)
         ("M-s L"   . consult-line-multi)
         ("M-s k"   . consult-keep-lines)
         ("M-s u"   . consult-focus-lines)
         ;; Isearch integration
         ("M-s e"   . consult-isearch-history)
         :map isearch-mode-map
         ("M-e"     . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s e"   . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l"   . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L"   . consult-line-multi)            ;; needed by consult-line to detect isearch

         ;; Minibuffer history
         :map minibuffer-local-map
         ("C-s" . (lambda ()
                    "Insert the selected region or current symbol at point."
                    (interactive)
                    (insert (with-current-buffer
                                (window-buffer (minibuffer-selected-window))
                              (or (and transient-mark-mode mark-active (/= (point) (mark))
                                       (buffer-substring-no-properties (point) (mark)))
                                  (thing-at-point 'symbol t)
                                  "")))))
         ("M-s" . consult-history) ;;orig. next-matching-history-element
         ("M-r" . consult-history))   ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init
  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (with-eval-after-load 'xref
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref))

  ;; More utils
  (defvar consult-colors-history nil
    "History for `consult-colors-emacs' and `consult-colors-web'.")

  ;; No longer preloaded in Emacs 28.
  (autoload 'list-colors-duplicates "facemenu")
  ;; No preloaded in consult.el
  (autoload 'consult--read "consult")

  (defun consult-colors-emacs (color)
    "Show a list of all supported colors for a particular frame.

You can insert the name (default), or insert or kill the hexadecimal or RGB
value of the selected COLOR."
    (interactive
     (list (consult--read (list-colors-duplicates (defined-colors))
                          :prompt "Emacs color: "
                          :require-match t
                          :category 'color
                          :history '(:input consult-colors-history)
                          )))
    (insert color))

  ;; Adapted from counsel.el to get web colors.
  (defun consult-colors--web-list nil
    "Return list of CSS colors for `counsult-colors-web'."
    (require 'shr-color)
    (sort (mapcar #'downcase (mapcar #'car shr-color-html-colors-alist)) #'string-lessp))

  (defun consult-colors-web (color)
    "Show a list of all CSS colors.\

You can insert the name (default), or insert or kill the hexadecimal or RGB
value of the selected COLOR."
    (interactive
     (list (consult--read (consult-colors--web-list)
                          :prompt "Color: "
                          :require-match t
                          :category 'color
                          :history '(:input consult-colors-history)
                          )))
    (insert color))
  :config
  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  (setq consult-preview-key '(:debounce 1.0 any))

  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-goto-line
   consult-theme :preview-key '(:debounce 0.5 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; ;; Optionally make narrowing help available in the minibuffer.
  ;; ;; You may want to use `embark-prefix-help-command' or which-key instead.
  (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)
  )

(use-package consult-flyspell
  :bind ("M-g s" . consult-flyspell))

(use-package consult-yasnippet
  :bind ("M-g y" . consult-yasnippet))
(unless sys/win32p
  (progn
    ;;在Windows下会导致内存泄漏和无响应
	(use-package corfu
	  :custom
	  (corfu-auto t)
	  (corfu-auto-prefix 2)
	  (corfu-preview-current nil)
	  (corfu-auto-delay 0.2)
	  (corfu-popupinfo-delay '(0.4 . 0.2))
	  :custom-face
	  (corfu-border ((t (:inherit region :background unspecified))))
	  :bind ("M-/" . completion-at-point)
	  :hook ((after-init . global-corfu-mode)
			 (global-corfu-mode . corfu-popupinfo-mode)))

    (use-package embark
      :bind (("s-."   . embark-act)
             ("C-s-." . embark-act)
             ("M-."   . embark-dwim)        ; overrides `xref-find-definitions'
             ([remap describe-bindings] . embark-bindings)
             :map minibuffer-local-map
             ("M-." . my-embark-preview))
      :init
      ;; Optionally replace the key help with a completing-read interface
      (setq prefix-help-command #'embark-prefix-help-command)
      :config
      ;; Manual preview for non-Consult commands using Embark
      (defun my-embark-preview ()
        "Previews candidate in vertico buffer, unless it's a consult command."
        (interactive)
        (unless (bound-and-true-p consult--preview-function)
          (save-selected-window
            (let ((embark-quit-after-action nil))
              (embark-dwim)))))

      ;; Hide the mode line of the Embark live/completions buffers
      (add-to-list 'display-buffer-alist
                   '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                     nil
                     (window-parameters (mode-line-format . none))))

      (with-eval-after-load 'which-key
        (defun embark-which-key-indicator ()
          "An embark indicator that displays keymaps using which-key.
The which-key help message will show the type and value of the
current target followed by an ellipsis if there are further
targets."
          (lambda (&optional keymap targets prefix)
            (if (null keymap)
                (which-key--hide-popup-ignore-command)
              (which-key--show-keymap
               (if (eq (plist-get (car targets) :type) 'embark-become)
                   "Become"
                 (format "Act on %s '%s'%s"
                         (plist-get (car targets) :type)
                         (embark--truncate-target (plist-get (car targets) :target))
                         (if (cdr targets) "…" "")))
               (if prefix
                   (pcase (lookup-key keymap prefix 'accept-default)
                     ((and (pred keymapp) km) km)
                     (_ (key-binding prefix 'accept-default)))
                 keymap)
               nil nil t (lambda (binding)
                           (not (string-suffix-p "-argument" (cdr binding))))))))

        (setq embark-indicators
              '(embark-which-key-indicator
                embark-highlight-indicator
                embark-isearch-highlight-indicator))

        (defun embark-hide-which-key-indicator (fn &rest args)
          "Hide the which-key indicator immediately when using the completing-read prompter."
          (which-key--hide-popup-ignore-command)
          (let ((embark-indicators
                 (remq #'embark-which-key-indicator embark-indicators)))
            (apply fn args)))

        (advice-add #'embark-completing-read-prompter
                    :around #'embark-hide-which-key-indicator)
        ))

    (use-package embark-consult
      :bind (:map minibuffer-mode-map
                  ("C-c C-o" . embark-export))
      :hook (embark-collect-mode . consult-preview-at-point-mode))

	(unless (display-graphic-p)
	  (use-package corfu-terminal
		:hook (global-corfu-mode . corfu-terminal-mode)))
	(use-package nerd-icons-corfu
	  :after corfu
	  :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
	;; Add extensions
	(use-package cape
	  :init
	  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
	  (add-to-list 'completion-at-point-functions #'cape-file)
	  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
	  (add-to-list 'completion-at-point-functions #'cape-keyword)
	  (add-to-list 'completion-at-point-functions #'cape-abbrev)

	  (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster))
	))
(provide 'init-completion)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-completion.el ends here

#+end_src
* etc/init-dired.el
#+begin_src emacs-lisp :tangle etc/init-dired.el
;;; init-dired.el --- Dired configuration
;;; Commentary:
;;
;; Dired configuration
;;
;;; Require
(require 'dired)
(require 'dired-x)
(require 'dired-details)                ;Dired详细信息
(require 'dired-details+)


;; Quick sort dired buffers via hydra
(use-package dired-quick-sort
	:bind (:map dired-mode-map
       		("S" . hydra-dired-quick-sort/body)))

;; Show git info in dired
(use-package dired-git-info
	:bind (:map dired-mode-map
	       (")" . dired-git-info-mode)))

;; Allow rsync from dired buffers
(use-package dired-rsync
	:bind (:map dired-mode-map
	       ("C-c C-r" . dired-rsync)))

;; Colorful dired
(use-package diredfl
	:hook (dired-mode . diredfl-mode))

;; Shows icons
(use-package nerd-icons-dired
	:diminish
	:when (icons-displayable-p)
	:custom-face
	(nerd-icons-dired-dir-face ((t (:inherit nerd-icons-dsilver :foreground unspecified))))
	:hook (dired-mode . nerd-icons-dired-mode))

;; Extra Dired functionality
(use-package dired-aux :ensure nil)

;;; Code:
;; Guess a default target directory
(setq dired-dwim-target t)

;; Always delete and copy recursively
(setq dired-recursive-deletes 'always
    dired-recursive-copies 'always)

;; Show directory first
(setq dired-listing-switches "-alh --group-directories-first")
(let ((cmd (cond (sys/mac-x-p "open")
                 (sys/linux-x-p "xdg-open")
                 (sys/win32p "start")
                 (t ""))))
  (setq dired-guess-shell-alist-user
        `(("\\.pdf\\'" ,cmd)
          ("\\.docx\\'" ,cmd)
          ("\\.\\(?:djvu\\|eps\\)\\'" ,cmd)
          ("\\.\\(?:jpg\\|jpeg\\|png\\|gif\\|xpm\\)\\'" ,cmd)
          ("\\.\\(?:xcf\\)\\'" ,cmd)
          ("\\.csv\\'" ,cmd)
          ("\\.tex\\'" ,cmd)
          ("\\.\\(?:mp4\\|mkv\\|avi\\|flv\\|rm\\|rmvb\\|ogv\\)\\(?:\\.part\\)?\\'" ,cmd)
          ("\\.\\(?:mp3\\|flac\\)\\'" ,cmd)
          ("\\.html?\\'" ,cmd)
          ("\\.md\\'" ,cmd)))
(when sys/macp
	(if (executable-find "gls")
	    (progn
	      ;; Use GNU ls as `gls' from `coreutils' if available.
	      (setq insert-directory-program "gls")
	      ;; Using `insert-directory-program'
	      (setq ls-lisp-use-insert-directory-program t))
	  (progn
	    ;; Suppress the warning: `ls does not support --dired'.
	    (setq dired-use-ls-dired nil)
	    (setq dired-listing-switches "-alh"))))

(setq dired-omit-files
      (concat dired-omit-files
              "\\|^.DS_Store$\\|^.projectile$\\|^.git*\\|^.svn$\\|^.vscode$\\|\\.js\\.meta$\\|\\.meta$\\|\\.elc$\\|^.emacs.*")))

(setq dired-recursive-copies t)         ;可以递归的进行拷贝
(setq dired-recursive-deletes t)        ;可以递归的删除目录
(setq dired-recursive-deletes 'always)  ;删除东西时不提示
(setq dired-recursive-copies 'always)   ;拷贝东西时不提示
(setq dired-listing-switches "-aluh")   ;传给 ls 的参数
(setq dired-details-hidden-string "") ;设置隐藏dired里面详细信息的字符串
(setq directory-free-space-args "-Pkh") ;目录空间选项
(setq dired-omit-size-limit nil)        ;dired忽略的上限
(setq dired-dwim-target t)              ;Dired试着猜处默认的目标目录
(setq my-dired-omit-status t)           ;设置默认忽略文件
(setq my-dired-omit-regexp "^\\.?#\\|^\\..*") ;设置忽略文件的匹配正则表达式
(setq my-dired-omit-extensions '(".cache")) ;设置忽略文件的扩展名列表
(add-hook 'dired-after-readin-hook #'(lambda ()
                                       (progn
                                         (require 'dired-extension)
                                         (dired-sort-method)))) ;先显示目录, 然后显示文件
(add-hook
 'dired-mode-hook
 #'(lambda ()
     (require 'dired-extension)
     (dired-omit-method)                ;隐藏文件的方法
     ))
(setq dired-guess-shell-alist-user      ;设置文件默认打开的模式
      '(
        ;; 压缩包
        (list "\\.rar$" "unrar e -ad")
        (list "\\.tar.bz2$" "tar jxvf")
        (list "\\.gz$" "gzip -d")
        ;; 其他
        (list "\\.exe$" "wine")))

;;; ### Dired ###
;;; --- 文件浏览器
(lazy-load-set-keys
 '(
   ("h" . dired-next-subdir)            ;下一个子目录
   ("l" . dired-prev-subdir)            ;上一个子目录
   ("n" . dired-next-dirline)           ;下一个目录
   ("p" . dired-prev-dirline)           ;上一个目录
   ("P" . dired-do-kill-lines)          ;删除标记的行
   ("5" . dired-translate-to-html)      ;转换到HTML格式
   ("9" . auto-install-from-dired)      ;自动从EmacsWiki安装标记的文件
   ("I" . image-dired)                  ;打开浏览模式
   ("W" . dired-x-find-file)            ;查找文件
   ("J" . awesome-tab-backward-tab)
   ("K" . awesome-tab-forward-tab)
   ("X" . traverse-cp-or-mv-extfiles-in-dir) ;拷贝或移动目录下指定扩展名的文件
   ("V" . traverse-dired-browse-archive)     ;浏览压缩文件
   ("," . dired-diff)                        ;比较文件
   ("SPC" . scroll-up)                       ;向下翻页
   ("e" . scroll-down)                       ;向上翻页
   ("c" . kill-this-buffer)                  ;关闭当前标签
   ("/" . copy-buffer-file-name-as-kill)     ;显示路径或名称
   ;;("s" . one-key-menu-dired-sort)           ;排序
   ;;("F" . one-key-menu-dired-filter)         ;过滤
   ("w" . wdired-change-to-wdired-mode)      ;切换到dired编辑模式
   )
 dired-mode-map
 )

(lazy-load-local-keys
 '(
   ("/" . copy-buffer-file-name-as-kill))
 dired-mode-map
 "buffer-extension")


(lazy-load-local-keys
 '(
   ("M-o" . dired-toggle-omit)          ;切换忽略状态
   ("?" . dired-get-size)               ;得到文件的大小
   ("[" . dired-rename-with-copy)       ;重命名函数
   ("'" . dired-up-directory-single)    ;返回上一级目录
   ("4" . dired-serial-rename)          ;批量重命名
   ("7" . dired-move-to-last-file)      ;移动到最后一个文件
   ("8" . dired-move-to-first-file)     ;移动到第一个文件
   ("k" . dired-previous-file-line)     ;上一行
   ("j" . dired-next-file-line)         ;下一行
   ;;("{" . dired-gnome-open-file)        ;用GNOME方式打开文件
   ("E" . dired-touch-now)              ;Touch命令
   ("f" . dired-find-file+)             ;打开当前文件或目录
   ("C-m" . dired-find-file+)           ;打开当前文件或目录
   )
 dired-mode-map
 "dired-extension")


(provide 'init-dired)

;;; init-dired.el ends here

#+end_src
* etc/init-eshell.el
#+begin_src emacs-lisp :tangle etc/init-eshell.el
;; init-eshell.el --- Initialize eshell configurations.	-*- lexical-binding: t -*-
;;; Commentary:
;;
;; Eshell configurations.
;;

;;; Code:

;; Emacs command shell
(use-package eshell
  :ensure nil
  :defines eshell-prompt-function
  :bind (:map eshell-mode-map
         ([remap recenter-top-bottom] . eshell/clear))
  :config
  (with-no-warnings
    (defun eshell/clear ()
      "Clear the eshell buffer."
      (interactive)
      (let ((inhibit-read-only t))
        (erase-buffer)
        (eshell-send-input)))

    (defun eshell/emacs (&rest args)
      "Open a file (ARGS) in Emacs.  Some habits die hard."
      (if (null args)
          ;; If I just ran "emacs", I probably expect to be launching
          ;; Emacs, which is rather silly since I'm already in Emacs.
          ;; So just pretend to do what I ask.
          (bury-buffer)
        ;; We have to expand the file names or else naming a directory in an
        ;; argument causes later arguments to be looked for in that directory,
        ;; not the starting directory
        (mapc #'find-file (mapcar #'expand-file-name (flatten-tree (reverse args))))))
    (defalias 'eshell/e #'eshell/emacs)
    (defalias 'eshell/ec #'eshell/emacs)

    (defun eshell/ebc (&rest args)
      "Compile a file (ARGS) in Emacs. Use `compile' to do background make."
      (if (eshell-interactive-output-p)
          (let ((compilation-process-setup-function
                 (list 'lambda nil
                       (list 'setq 'process-environment
                             (list 'quote (eshell-copy-environment))))))
            (compile (eshell-flatten-and-stringify args))
            (pop-to-buffer compilation-last-buffer))
        (throw 'eshell-replace-command
               (let ((l (eshell-stringify-list (flatten-tree args))))
                 (eshell-parse-command (car l) (cdr l))))))
    (put 'eshell/ebc 'eshell-no-numeric-conversions t)

    (defun eshell-view-file (file)
      "View FILE.  A version of `view-file' which properly rets the eshell prompt."
      (interactive "fView file: ")
      (unless (file-exists-p file) (error "%s does not exist" file))
      (let ((buffer (find-file-noselect file)))
        (if (eq (get (buffer-local-value 'major-mode buffer) 'mode-class)
                'special)
            (progn
              (switch-to-buffer buffer)
              (message "Not using View mode because the major mode is special"))
          (let ((undo-window (list (window-buffer) (window-start)
                                   (+ (window-point)
                                      (length (funcall eshell-prompt-function))))))
            (switch-to-buffer buffer)
            (view-mode-enter (cons (selected-window) (cons nil undo-window))
                             'kill-buffer)))))

    (defun eshell/less (&rest args)
      "Invoke `view-file' on a file (ARGS).

\"less +42 foo\" will go to line 42 in the buffer for foo."
      (while args
        (if (string-match "\\`\\+\\([0-9]+\\)\\'" (car args))
            (let* ((line (string-to-number (match-string 1 (pop args))))
                   (file (pop args)))
              (eshell-view-file file)
              (forward-line line))
          (eshell-view-file (pop args)))))
    (defalias 'eshell/more #'eshell/less))

  ;;  Display extra information for prompt
  (use-package eshell-prompt-extras
    :after esh-opt
    :defines eshell-highlight-prompt
    :autoload (epe-theme-lambda epe-theme-dakrone epe-theme-pipeline)
    :init (setq eshell-highlight-prompt nil
                eshell-prompt-function #'epe-theme-lambda))

  ;; `eldoc' support
  (use-package esh-help
    :init (setup-esh-help-eldoc))

  ;; `cd' to frequent directory in `eshell'
  (use-package eshell-z
    :hook (eshell-mode . (lambda () (require 'eshell-z)))))

(provide 'init-eshell)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-eshell.el ends here

#+end_src
* etc/init-ext-packages.el
#+begin_src emacs-lisp :tangle etc/init-ext-packages.el
;;; init-ext-package.el --- Initialize Extension Packages configurations.	-*- lexical-binding: t -*-

;;; Commentary:
;;
;; Emacs Package management configurations.
;;

;;; Code:

(eval-when-compile
  (require '+const)
  (require '+custom)
  (require 'init-package)
  )

;; Persistent the scratch buffer
(use-package persistent-scratch
  :diminish
  :bind (:map persistent-scratch-mode-map
			  ([remap kill-buffer] . (lambda (&rest _)
									   (interactive)
									   (user-error "Scratch buffer cannot be killed")))
			  ([remap revert-buffer] . persistent-scratch-restore)
			  ([remap revert-this-buffer] . persistent-scratch-restore))
  :hook ((after-init . persistent-scratch-autosave-mode)
         (lisp-interaction-mode . persistent-scratch-mode))
  :init (setq persistent-scratch-backup-file-name-format "%Y-%m-%d"
			  persistent-scratch-backup-directory
			  (expand-file-name "var/persistent-scratch" user-emacs-directory)))


;; Process
(use-package proced
  :ensure nil
  :init
  (setq-default proced-format 'verbose)
  (setq proced-auto-update-flag t
        proced-auto-update-interval 3))


;; IRC
(use-package erc
  :ensure nil
  :defines erc-autojoin-channels-alist
  :init (setq erc-interpret-mirc-color t
			  erc-lurker-hide-list '("JOIN" "PART" "QUIT")
			  erc-autojoin-channels-alist '(("freenode.net" "#emacs"))))

;; text mode directory tree
(use-package ztree
  :custom-face
  (ztreep-header-face ((t (:inherit diff-header))))
  (ztreep-arrow-face ((t (:inherit font-lock-comment-face))))
  (ztreep-leaf-face ((t (:inherit diff-index))))
  (ztreep-node-face ((t (:inherit font-lock-variable-name-face))))
  (ztreep-expand-sign-face ((t (:inherit font-lock-function-name-face))))
  (ztreep-diff-header-face ((t (:inherit (diff-header bold)))))
  (ztreep-diff-header-small-face ((t (:inherit diff-file-header))))
  (ztreep-diff-model-normal-face ((t (:inherit font-lock-doc-face))))
  (ztreep-diff-model-ignored-face ((t (:inherit font-lock-doc-face :strike-through t))))
  (ztreep-diff-model-diff-face ((t (:inherit diff-removed))))
  (ztreep-diff-model-add-face ((t (:inherit diff-nonexistent))))
  :pretty-hydra
  ((:title (pretty-hydra-title "Ztree" 'octicon "nf-oct-diff" :face 'nerd-icons-green)
		   :color pink :quit-key ("q" "C-g"))
   ("Diff"
    (("C" ztree-diff-copy "copy" :exit t)
     ("h" ztree-diff-toggle-show-equal-files "show/hide equals" :exit t)
     ("H" ztree-diff-toggle-show-filtered-files "show/hide ignores" :exit t)
     ("D" ztree-diff-delete-file "delete" :exit t)
     ("v" ztree-diff-view-file "view" :exit t)
     ("d" ztree-diff-simple-diff-files "simple diff" :exit t)
     ("r" ztree-diff-partial-rescan "partial rescan" :exit t)
     ("R" ztree-diff-full-rescan "full rescan" :exit t))
    "View"
    (("RET" ztree-perform-action "expand/collapse or view" :exit t)
     ("SPC" ztree-perform-soft-action "expand/collapse or view in other" :exit t)
     ("TAB" ztree-jump-side "jump side" :exit t)
     ("g" ztree-refresh-buffer "refresh" :exit t)
     ("x" ztree-toggle-expand-subtree "expand/collapse" :exit t)
     ("<backspace>" ztree-move-up-in-tree "go to parent" :exit t))))
  :bind (:map ztreediff-mode-map
			  ("C-<f5>" . ztree-hydra/body))
  :init (setq ztree-draw-unicode-lines t
			  ztree-show-number-of-children t))

;; Misc
(use-package disk-usage
  :ensure nil)
(use-package memory-usage
  :ensure nil)

(use-package list-environment
  :init
  (with-no-warnings
    (defun my-list-environment-entries ()
	  "Generate environment variable entries list for tabulated-list."
	  (mapcar (lambda (env)
                (let* ((kv (split-string env "="))
					   (key (car kv))
					   (val (mapconcat #'identity (cdr kv) "=")))
				  (list key (vector
                             `(,key face font-lock-keyword-face)
                             `(,val face font-lock-string-face)))))
			  process-environment))
    (advice-add #'list-environment-entries :override #'my-list-environment-entries)))

(unless sys/win32p
  (use-package daemons)                 ; system services/daemons
  (use-package tldr))

;; 一些我不知道用途的依赖
(use-package slime
  :ensure t)
(use-package anaconda-mode
  :ensure t)

(use-package auto-compile
  :ensure t)

(use-package multiple-cursors
  :ensure t)
(use-package rtags
  :ensure t)
(use-package window-purpose
  :ensure t)
(use-package password-store
  :ensure t)
(use-package historian
  :ensure t)
(use-package gitlab
  :ensure t)
(use-package bibtex-completion
  :ensure t)
(use-package ov
  :ensure t)
(use-package xml-rpc
  :ensure t)
(use-package deferred
  :ensure t)
(use-package frame-local
  :ensure t)
(use-package shell-split-string
  :ensure t)
(use-package pythonic
  :ensure t)
(use-package packed
  :ensure t)

(use-package alert
  :ensure t)

(provide 'init-ext-packages)

#+end_src
* etc/init-highlight.el
#+begin_src emacs-lisp :tangle etc/init-highlight.el
;; init-highlight.el --- Initialize highlighting configurations.	-*- lexical-binding: t -*-
;;; Commentary:
;;
;; Highlighting configurations.
;;

;;; Code:

(eval-when-compile
  (require '+const))

;; Highlight the current line
(use-package hl-line
  :ensure nil
  :hook ((after-init . global-hl-line-mode)
         ((dashboard-mode eshell-mode shell-mode term-mode vterm-mode) .
          (lambda () (setq-local global-hl-line-mode nil)))))

;; Highlight matching parens
(use-package paren
  :ensure nil
  :hook (after-init . show-paren-mode)
  :init (setq show-paren-when-point-inside-paren t
              show-paren-when-point-in-periphery t)
  :config
  (if emacs/>=29p
      (setq show-paren-context-when-offscreen
            (if (childframe-workable-p) 'child-frame 'overlay))
    (with-no-warnings
      ;; Display matching line for off-screen paren.
      (defun display-line-overlay (pos str &optional face)
        "Display line at POS as STR with FACE.

FACE defaults to inheriting from default and highlight."
        (let ((ol (save-excursion
                    (goto-char pos)
                    (make-overlay (line-beginning-position)
                                  (line-end-position)))))
          (overlay-put ol 'display str)
          (overlay-put ol 'face
                       (or face '(:inherit highlight)))
          ol))

      (defvar-local show-paren--off-screen-overlay nil)
      (defun show-paren-off-screen (&rest _args)
        "Display matching line for off-screen paren."
        (when (overlayp show-paren--off-screen-overlay)
          (delete-overlay show-paren--off-screen-overlay))
        ;; Check if it's appropriate to show match info,
        (when (and (overlay-buffer show-paren--overlay)
                   (not (or cursor-in-echo-area
                            executing-kbd-macro
                            noninteractive
                            (minibufferp)
                            this-command))
                   (and (not (bobp))
                        (memq (char-syntax (char-before)) '(?\) ?\$)))
                   (= 1 (logand 1 (- (point)
                                     (save-excursion
                                       (forward-char -1)
                                       (skip-syntax-backward "/\\")
                                       (point))))))
          ;; Rebind `minibuffer-message' called by `blink-matching-open'
          ;; to handle the overlay display.
          (cl-letf (((symbol-function #'minibuffer-message)
                     (lambda (msg &rest args)
                       (let ((msg (apply #'format-message msg args)))
                         (setq show-paren--off-screen-overlay
                               (display-line-overlay
                                (window-start) msg ))))))
            (blink-matching-open))))
      (advice-add #'show-paren-function :after #'show-paren-off-screen))))

;; Highlight symbols
(use-package symbol-overlay
  :diminish
  :custom-face
  (symbol-overlay-default-face ((t (:inherit region :background unspecified :foreground unspecified))))
  (symbol-overlay-face-1 ((t (:inherit nerd-icons-blue :background unspecified :foreground unspecified :inverse-video t))))
  (symbol-overlay-face-2 ((t (:inherit nerd-icons-pink :background unspecified :foreground unspecified :inverse-video t))))
  (symbol-overlay-face-3 ((t (:inherit nerd-icons-yellow :background unspecified :foreground unspecified :inverse-video t))))
  (symbol-overlay-face-4 ((t (:inherit nerd-icons-purple :background unspecified :foreground unspecified :inverse-video t))))
  (symbol-overlay-face-5 ((t (:inherit nerd-icons-red :background unspecified :foreground unspecified :inverse-video t))))
  (symbol-overlay-face-6 ((t (:inherit nerd-icons-orange :background unspecified :foreground unspecified :inverse-video t))))
  (symbol-overlay-face-7 ((t (:inherit nerd-icons-green :background unspecified :foreground unspecified :inverse-video t))))
  (symbol-overlay-face-8 ((t (:inherit nerd-icons-cyan :background unspecified :foreground unspecified :inverse-video t))))
  :bind (("M-i" . symbol-overlay-put)
         ("M-n" . symbol-overlay-jump-next)
         ("M-p" . symbol-overlay-jump-prev)
         ("M-N" . symbol-overlay-switch-forward)
         ("M-P" . symbol-overlay-switch-backward)
         ("M-C" . symbol-overlay-remove-all)
         ([M-f3] . symbol-overlay-remove-all))
  :hook (((prog-mode yaml-mode) . symbol-overlay-mode)
         (iedit-mode            . turn-off-symbol-overlay)
         (iedit-mode-end        . turn-on-symbol-overlay))
  :init (setq symbol-overlay-idle-time 0.1)
  :config
  (with-no-warnings
    ;; Disable symbol highlighting while selecting
    (defun turn-off-symbol-overlay (&rest _)
      "Turn off symbol highlighting."
      (interactive)
      (symbol-overlay-mode -1))
    (advice-add #'set-mark :after #'turn-off-symbol-overlay)

    (defun turn-on-symbol-overlay (&rest _)
      "Turn on symbol highlighting."
      (interactive)
      (when (derived-mode-p 'prog-mode 'yaml-mode)
        (symbol-overlay-mode 1)))
    (advice-add #'deactivate-mark :after #'turn-on-symbol-overlay)))

;; Highlight indentions
(use-package highlight-indent-guides
  :diminish
  :hook ((prog-mode yaml-mode) . (lambda ()
                                   "Highlight indentations in small files for better performance."
                                   (unless (too-long-file-p)
                                     (highlight-indent-guides-mode 1))))
  :init (setq highlight-indent-guides-method 'character
              highlight-indent-guides-responsive 'top
              highlight-indent-guides-suppress-auto-error t)
  :config
  (with-no-warnings
    ;; Don't display first level of indentation
    (defun my-indent-guides-for-all-but-first-column (level responsive display)
      (unless (< level 1)
        (highlight-indent-guides--highlighter-default level responsive display)))
    (setq highlight-indent-guides-highlighter-function
          #'my-indent-guides-for-all-but-first-column)

    ;; Disable in `macrostep' expanding
    (with-eval-after-load 'macrostep
      (advice-add #'macrostep-expand
                  :after (lambda (&rest _)
                           (when highlight-indent-guides-mode
                             (highlight-indent-guides-mode -1))))
      (advice-add #'macrostep-collapse
                  :after (lambda (&rest _)
                           (when (derived-mode-p 'prog-mode 'yaml-mode)
                             (highlight-indent-guides-mode 1)))))))

;; Colorize color names in buffers
(use-package rainbow-mode
  :diminish
  :defines helpful-mode-map
  :bind (:map help-mode-map
         ("w" . rainbow-mode))
  :hook ((html-mode php-mode helpful-mode) . rainbow-mode)
  :init (with-eval-after-load 'helpful
          (bind-key "w" #'rainbow-mode helpful-mode-map))
  :config
  (with-no-warnings
    ;; HACK: Use overlay instead of text properties to override `hl-line' faces.
    ;; @see https://emacs.stackexchange.com/questions/36420
    (defun my-rainbow-colorize-match (color &optional match)
      (let* ((match (or match 0))
             (ov (make-overlay (match-beginning match) (match-end match))))
        (overlay-put ov 'ovrainbow t)
        (overlay-put ov 'face `((:foreground ,(if (> 0.5 (rainbow-x-color-luminance color))
                                                  "white" "black"))
                                (:background ,color)))))
    (advice-add #'rainbow-colorize-match :override #'my-rainbow-colorize-match)

    (defun my-rainbow-clear-overlays ()
      "Clear all rainbow overlays."
      (remove-overlays (point-min) (point-max) 'ovrainbow t))
    (advice-add #'rainbow-turn-off :after #'my-rainbow-clear-overlays)))

;; Highlight brackets according to their depth
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

;; Highlight TODO and similar keywords in comments and strings
(use-package hl-todo
  :custom-face
  (hl-todo ((t (:inherit default :height 0.9 :width condensed :weight bold :underline nil :inverse-video t))))
  :bind (:map hl-todo-mode-map
         ([C-f3]    . hl-todo-occur)
         ("C-c t p" . hl-todo-previous)
         ("C-c t n" . hl-todo-next)
         ("C-c t o" . hl-todo-occur)
         ("C-c t r" . hl-todo-rg-project)
         ("C-c t i" . hl-todo-insert))
  :hook ((after-init . global-hl-todo-mode)
         (hl-todo-mode . (lambda ()
                           (add-hook 'flymake-diagnostic-functions
                                     #'hl-todo-flymake nil t))))
  :init (setq hl-todo-require-punctuation t
              hl-todo-highlight-punctuation ":")
  :config
  (dolist (keyword '("BUG" "DEFECT" "ISSUE"))
    (add-to-list 'hl-todo-keyword-faces `(,keyword . "#e45649")))
  (dolist (keyword '("TRICK" "WORKAROUND"))
    (add-to-list 'hl-todo-keyword-faces `(,keyword . "#d0bf8f")))
  (dolist (keyword '("DEBUG" "STUB"))
    (add-to-list 'hl-todo-keyword-faces `(,keyword . "#7cb8bb")))

  (defun hl-todo-rg (regexp &optional files dir)
    "Use `rg' to find all TODO or similar keywords."
    (interactive
     (progn
       (unless (require 'rg nil t)
         (error "`rg' is not installed"))
       (let ((regexp (replace-regexp-in-string "\\\\[<>]*" "" (hl-todo--regexp))))
         (list regexp
               (rg-read-files)
               (read-directory-name "Base directory: " nil default-directory t)))))
    (rg regexp files dir))

  (defun hl-todo-rg-project ()
    "Use `rg' to find all TODO or similar keywords in current project."
    (interactive)
    (unless (require 'rg nil t)
      (error "`rg' is not installed"))
    (rg-project (replace-regexp-in-string "\\\\[<>]*" "" (hl-todo--regexp)) "everything")))

;; Highlight uncommitted changes using VC
(use-package diff-hl
  :custom (diff-hl-draw-borders nil)
  :custom-face
  (diff-hl-change ((t (:inherit custom-changed :foreground unspecified :background unspecified))))
  (diff-hl-insert ((t (:inherit diff-added :background unspecified))))
  (diff-hl-delete ((t (:inherit diff-removed :background unspecified))))
  :bind (:map diff-hl-command-map
         ("SPC" . diff-hl-mark-hunk))
  :hook ((after-init . global-diff-hl-mode)
         (after-init . global-diff-hl-show-hunk-mouse-mode)
         (dired-mode . diff-hl-dired-mode))
  :config
  ;; Highlight on-the-fly
  (diff-hl-flydiff-mode 1)

  ;; Set fringe style
  (setq-default fringes-outside-margins t)

  (with-no-warnings
    (defun my-diff-hl-fringe-bmp-function (_type _pos)
      "Fringe bitmap function for use as `diff-hl-fringe-bmp-function'."
      (define-fringe-bitmap 'my-diff-hl-bmp
        (vector (if sys/linuxp #b11111100 #b11100000))
        1 8
        '(center t)))
    (setq diff-hl-fringe-bmp-function #'my-diff-hl-fringe-bmp-function)

    (unless (display-graphic-p)
      ;; Fall back to the display margin since the fringe is unavailable in tty
      (diff-hl-margin-mode 1)
      ;; Avoid restoring `diff-hl-margin-mode'
      (with-eval-after-load 'desktop
        (add-to-list 'desktop-minor-mode-table
                     '(diff-hl-margin-mode nil))))

    ;; Integration with magit
    (with-eval-after-load 'magit
      (add-hook 'magit-pre-refresh-hook #'diff-hl-magit-pre-refresh)
      (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh))))

;; Pulse current line
(use-package pulse
  :ensure nil
  :custom-face
  (pulse-highlight-start-face ((t (:inherit region :background unspecified))))
  (pulse-highlight-face ((t (:inherit region :background unspecified :extend t))))
  :hook (((dumb-jump-after-jump imenu-after-jump) . my-recenter-and-pulse)
         ((bookmark-after-jump magit-diff-visit-file next-error) . my-recenter-and-pulse-line))
  :init
  (with-no-warnings
    (defun my-pulse-momentary-line (&rest _)
      "Pulse the current line."
      (pulse-momentary-highlight-one-line (point)))

    (defun my-pulse-momentary (&rest _)
      "Pulse the region or the current line."
      (if (fboundp 'xref-pulse-momentarily)
          (xref-pulse-momentarily)
        (my-pulse-momentary-line)))

    (defun my-recenter-and-pulse(&rest _)
      "Recenter and pulse the region or the current line."
      (recenter)
      (my-pulse-momentary))

    (defun my-recenter-and-pulse-line (&rest _)
      "Recenter and pulse the current line."
      (recenter)
      (my-pulse-momentary-line))

    (dolist (cmd '(recenter-top-bottom
                   other-window switch-to-buffer
                   aw-select toggle-window-split
                   windmove-do-window-select
                   pager-page-down pager-page-up
                   treemacs-select-window
                   symbol-overlay-basic-jump))
      (advice-add cmd :after #'my-pulse-momentary-line))

    (dolist (cmd '(pop-to-mark-command
                   pop-global-mark
                   goto-last-change))
      (advice-add cmd :after #'my-recenter-and-pulse))))

;; Pulse modified region
(use-package goggles
  :diminish
  :hook ((prog-mode text-mode) . goggles-mode))

(provide 'init-highlight)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-highlight.el ends here

#+end_src
* etc/ide.el
#+begin_src emacs-lisp :tangle etc/init-ide.el
;;; init-ide.el --- IDE configuration

;;; Commentary:
;;
;; IDE configuration
;;

;;; Code:

(eval-when-compile
  (require '+const)
  (require '+custom)
  (require 'init-package))

;; format all, formatter for almost languages
;; great for programmers
(use-package format-all
  :hook (prog-mode . format-all-ensure-formatter)
  :bind ("C-c f" . #'format-all-buffer))

(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

;; 折叠和收缩代码
(use-package hideshow
  :ensure nil
  :diminish hs-minor-mode
  :pretty-hydra
  ((:title (pretty-hydra-title "HideShow" 'octicon "nf-oct-fold")
           :color amaranth :quit-key ("q" "C-g"))
   ("Fold"
    (("t" hs-toggle-all "toggle all")
     ("a" hs-show-all "show all")
     ("i" hs-hide-all "hide all")
     ("g" hs-toggle-hiding "toggle hiding")
     ("c" hs-cycle "cycle block")
     ("s" hs-show-block "show block")
     ("h" hs-hide-block "hide block")
     ("l" hs-hide-level "hide level"))
    "Move"
    (("C-a" mwim-beginning-of-code-or-line "⭰")
     ("C-e" mwim-end-of-code-or-line "⭲")
     ("C-b" backward-char "←")
     ("C-n" next-line "↓")
     ("C-p" previous-line "↑")
     ("C-f" forward-char "→")
     ("C-v" pager-page-down "↘")
     ("M-v" pager-page-up "↖")
     ("M-<" beginning-of-buffer "⭶")
     ("M->" end-of-buffer "⭸"))))
  :bind
  (:map hs-minor-mode-map
              ("C-~" . hideshow-hydra/body)
              ("C-S-<escape>" . hideshow-hydra/body)
              ("C-c ." . hs-toggle-hiding)
              ("C-c ," . hs-show-all)
              )
  :hook (prog-mode . hs-minor-mode)
  :config
  ;; More functions
  ;; @see https://karthinks.com/software/simple-folding-with-hideshow/
  (defun hs-cycle (&optional level)
    (interactive "p")
    (let (message-log-max
          (inhibit-message t))
      (if (= level 1)
          (pcase last-command
            ('hs-cycle
             (hs-hide-level 1)
             (setq this-command 'hs-cycle-children))
            ('hs-cycle-children
             (save-excursion (hs-show-block))
             (setq this-command 'hs-cycle-subtree))
            ('hs-cycle-subtree
             (hs-hide-block))
            (_
             (if (not (hs-already-hidden-p))
                 (hs-hide-block)
               (hs-hide-level 1)
               (setq this-command 'hs-cycle-children))))
        (hs-hide-level level)
        (setq this-command 'hs-hide-level))))

  (defun hs-toggle-all ()
    "Toggle hide/show all."
    (interactive)
    (pcase last-command
      ('hs-toggle-all
       (save-excursion (hs-show-all))
       (setq this-command 'hs-global-show))
      (_ (hs-hide-all))))

  ;; Display line counts
  (defun hs-display-code-line-counts (ov)
    "Display line counts when hiding codes."
    (when (eq 'code (overlay-get ov 'hs))
      (overlay-put ov 'display
                   (concat
                    " "
                    (propertize
                     (if (char-displayable-p ?⏷) "⏷" "...")
                     'face 'shadow)
                    (propertize
                     (format " (%d lines)"
                             (count-lines (overlay-start ov)
                                          (overlay-end ov)))
                     'face '(:inherit shadow :height 0.8))
                    " "))))
  (setq hs-set-up-overlay #'hs-display-code-line-counts))

;;代码折叠
(add-hook 'c-mode-common-hook   'hs-minor-mode)
(add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
(add-hook 'java-mode-hook       'hs-minor-mode)
(add-hook 'ess-mode-hook        'hs-minor-mode)
(add-hook 'perl-mode-hook       'hs-minor-mode)
(add-hook 'sh-mode-hook         'hs-minor-mode)
(add-hook 'python-mode-hook     'hs-minor-mode)

;; 代码片段
(require 'yasnippet)
(use-package yasnippet
  :load-path "~/.emacs.d/extensions/yasnippet"
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/share/snippets"))
  (yas-global-mode 1)
  (autoload 'yas-minor-mode-on "yasnippet")
  )


(dolist (x '(org-mode-hook prog-mode-hook snippet-mode-hook))
  (add-hook x #'yas-minor-mode-on))


(use-package projectile
  :ensure t
  :config
  ;;(setq projectile-completion-system 'ido)
  ;;(setq ido-enable-flex-matching t)
  (setq projectile-completion-system 'ivy)
  ;; Eanble Projectile globally
  (projectile-mode 1)
  ;; Set akeybinding for projectile commands
  (global-set-key (kbd "C-c p") 'projectile-commander))

;;(setq copilot-node-executable "C:\\green\\node-v20.10.0-win-x64\\node.exe")
;;(add-to-list 'load-path "C:\\green\\emacs-29.1\\.emacs.d\\extensions\\copilot\\copilot.el")

;;(require 'copilot)
;;(add-hook 'prog-mode-hook 'copilot-mode)

;; To customize the behavior of copilot-mode, please check copilot-enable-predicates and copilot-disable-predicates.
;; You need to bind copilot-complete to some key and call copilot-clear-overlay inside post-command-hook.
;;(define-key copilot-completion-map
;;            (kbd "<tab>")
;;            'copilot-accept-completion)
;;(define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)
;; (add-to-list 'copilot-major-mode-alist '("c" . "cpp" . "css" . "go" . "java" . "html" . "javascript" . "javascriptreact" . "json" . "python" . "sql" . "shellscript"))
;; Login to Copilot by M-x copilot-login. You can also check the status by M-x copilot-diagnose (NotAuthorized means you don't have a valid subscription).

;; Prettify Symbols
;; e.g. display “lambda” as “λ”
(use-package prog-mode
  :ensure nil
  :hook (prog-mode . prettify-symbols-mode)
  :init
  (setq-default prettify-symbols-alist suk-prettify-symbols-alist)
  (setq prettify-symbols-unprettify-at-point 'right-edge))

;; Tree-sitter support
(when (suk-treesit-available-p)
  (use-package treesit-auto
    :hook (after-init . global-treesit-auto-mode)
    :init (setq treesit-auto-install 'prompt)))


;; Show function arglist or variable docstring
;; (use-package eldoc
;;   :ensure nil
;;   :diminish
;;   :config
;;   (when (childframe-workable-p)
;;     (use-package eldoc-box
;;       :diminish (eldoc-box-hover-mode eldoc-box-hover-at-point-mode)
;;       :custom
;;       (eldoc-box-lighter nil)
;;       (eldoc-box-only-multi-line t)
;;       (eldoc-box-clear-with-C-g t)
;;       :custom-face
;;       (eldoc-box-border ((t (:inherit posframe-border :background unspecified))))
;;       (eldoc-box-body ((t (:inherit tooltip))))
;;       :hook ((eglot-managed-mode . eldoc-box-hover-at-point-mode))
;;       :config
;;       ;; Prettify `eldoc-box' frame
;;       (setf (alist-get 'left-fringe eldoc-box-frame-parameters) 8
;;             (alist-get 'right-fringe eldoc-box-frame-parameters) 8))))


;; Cross-referencing commands
(use-package xref
  :bind (("M-g ." . xref-find-definitions)
         ("M-g ," . xref-go-back))
  :init
  ;; Use faster search tool
  (when (executable-find "rg")
    (setq xref-search-program 'ripgrep))

  ;; Select from xref candidates in minibuffer
  (setq xref-show-definitions-function #'xref-show-definitions-completing-read
        xref-show-xrefs-function #'xref-show-definitions-completing-read))


;; Jump to definition
(use-package dumb-jump
  :pretty-hydra
  ((:title (pretty-hydra-title "Dump Jump" 'faicon "nf-fa-anchor")
    :color blue :quit-key ("q" "C-g"))
   ("Jump"
    (("j" dumb-jump-go "Go")
     ("o" dumb-jump-go-other-window "Go other window")
     ("e" dumb-jump-go-prefer-external "Go external")
     ("x" dumb-jump-go-prefer-external-other-window "Go external other window"))
    "Other"
    (("i" dumb-jump-go-prompt "Prompt")
     ("l" dumb-jump-quick-look "Quick look")
     ("b" dumb-jump-back "Back"))))
  :bind (("C-M-j" . dumb-jump-hydra/body))
  :init
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  (setq dumb-jump-selector 'completing-read))

;; Misc. programming modes
(use-package csv-mode)
(unless emacs/>=29p
  (use-package csharp-mode))
(use-package cmake-mode)
(use-package powershell)
(use-package vimrc-mode)
(use-package yaml-mode)
(use-package typescript-mode
 :load-path "~/.emacs.d/extensions/typescript")

(require 'init-treemacs)
(require 'init-lang-vcs)
(require 'init-lang-lsp)
(require 'init-lang-check)
(require 'init-lang-dap)
(require 'init-lang-web)
(require 'init-lang-elisp)
(require 'init-lang-c)
(require 'init-lang-python)

(provide 'init-ide)

;;; init-ide.el ends here

#+end_src
* etc/init-idle.el
#+begin_src emacs-lisp :tangle etc/init-idle.el
;;; init-idle.el --- Configure file that can load when emacs idle.

;;; Commentary:
;;
;; Configure file that can load when emacs idle.
;;

;;; Code:
(eval-when-compile
  (require '+const)
  (require '+custom)
  (require 'init-package)
  )
;; (require 'pretty-lambdada)
;; (pretty-lambda-for-modes)


(setq suggest-key-bindings 1)             ;当使用 M-x COMMAND 后，过 1 秒钟显示该 COMMAND 绑定的键。
(setq browse-kill-ring-quit-action        ;设置退出动作
      (quote save-and-restore))           ;保存还原窗口设置
(autoload 'hanconvert-region "hanconvert" ;简繁中文互相转换
  "Convert a region from simple chinese to tradition chinese or
from tradition chinese to simple chinese" t)
(setq max-lisp-eval-depth 40000)          ;lisp最大执行深度
(setq max-specpdl-size 10000)             ;最大容量
(setq kill-ring-max 1024)                 ;用一个很大的 kill ring. 这样防止我不小心删掉重要的东西
(setq mark-ring-max 1024)                 ;设置的mark ring容量
(setq eval-expression-print-length nil)   ;设置执行表达式的长度没有限制
(setq eval-expression-print-level nil)    ;设置执行表达式的深度没有限制
(auto-compression-mode 1)                 ;打开压缩文件时自动解压缩
(setq read-quoted-char-radix 16)          ;设置 引用字符 的基数
(setq global-mark-ring-max 1024)          ;设置最大的全局标记容量
(global-hl-line-mode 1)                   ;高亮当前行
(setq isearch-allow-scroll t)             ;isearch搜索时是可以滚动屏幕的
(setq enable-recursive-minibuffers t)     ;minibuffer 递归调用命令
(setq history-delete-duplicates t)        ;删除minibuffer的重复历史
(setq minibuffer-message-timeout 1)       ;显示消息超时的时间
(setq auto-revert-mode 1)                 ;自动更新buffer
(show-paren-mode t)                       ;显示括号匹配
(setq show-paren-style 'parentheses)      ;括号匹配显示但不是烦人的跳到另一个括号。
(setq blink-matching-paren nil)           ;当插入右括号时不显示匹配的左括号
(setq message-log-max t)                  ;设置message记录全部消息, 而不用截去
(setq require-final-newline nil)          ;不自动添加换行符到末尾, 有些情况会出现错误
(setq ediff-window-setup-function
	  (quote ediff-setup-windows-plain))  ;比较窗口设置在同一个frame里
(setq x-stretch-cursor t)                 ;光标在 TAB 字符上会显示为一个大方块
(put 'narrow-to-region 'disabled nil)     ;开启变窄区域
(setq print-escape-newlines t)            ;显示字符窗中的换行符为 \n
(setq tramp-default-method "ssh")         ;设置传送文件默认的方法
(setq void-text-area-pointer nil)         ;禁止显示鼠标指针
(setq auto-window-vscroll nil)            ;关闭自动调节行高
(setq mouse-yank-at-point nil)            ;让光标无法离开视线
(setq kill-whole-line t)                  ; C-k deletes the end of line
(setq delete-by-moving-to-trash t)        ; Deleting files go to OS's trash folder
(setq track-eol t)                        ; Keep cursor at end of lines. Require line-move-visual is nil.
(setq line-move-visual nil)
(setq inhibit-compacting-font-caches t)   ; Don’t compact font caches during GC.
(setq save-interprogram-paste-before-kill t) ; Save clipboard contents into kill-ring before replace them
;;(setq auto-save-default nil)              ; Disable auto save
(setq echo-keystrokes 0.1)              ;加快快捷键提示的速度
(setq byte-compile-warnings
      (quote (
              ;; 显示的警告
              free-vars                 ;不在当前范围的引用变量
              unresolved                ;不知道的函数
              callargs                  ;函数调用的参数和定义的不匹配
              obsolete                  ;荒废的变量和函数
              noruntime                 ;函数没有定义在运行时期
              interactive-only          ;正常不被调用的命令
              make-local                ;调用 `make-variable-buffer-local' 可能会不正确的
              mapcar                    ;`mapcar' 调用
              ;;
              ;; 抑制的警告
              (not redefine)            ;重新定义的函数 (比如参数数量改变)
              (not cl-functions)        ;`CL' 包中的运行时调用的函数
              )))

(setq-default cursor-type 'box) ; 设置光标样式

;;; ### Advice ###
;;; --- 各种emacs行为建议
;; 在特定地模式下粘贴时自动缩进
(defadvice yank (after indent-region activate)
  "To make yank content indent automatically."
  (if (member major-mode '(emacs-lisp-mode
                           scheme-mode
                           lisp-mode
                           lisp-interaction-mode
                           c-mode
                           c++-mode
                           objc-mode
                           latex-mode
                           plain-tex-mode))
      (indent-region (region-beginning) (region-end) nil)))

;;; ### Speedbar ###
(setq speedbar-show-unknown-files t)    ;显示文件

;;; ### Modeline-posn-column-limit ###
(setq modelinepos-column-limit 80)      ;设置列数限制, 并在mode-line上显示

;;; enable winner mode globally for undo/redo window layout changes
(winner-mode t)
(show-paren-mode t)
(tooltip-mode -1)                       ;不要显示任何 tooltips
(delete-selection-mode 1)               ; 选中文本后输入会覆盖
(auto-compression-mode 1)
(size-indication-mode 1)
(blink-cursor-mode -1)

;; 如果有两个重名buffer, 则再前面加上路径区别
(require 'uniquify)
;; (setq uniquify-buffer-name-style 'forward)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)

;; chmod +x
;; ref. http://th.nao.ac.jp/MEMBER/zenitani/elisp-j.html#chmod
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)

;; =========================================================
;;备份策略
;; =========================================================
(setq make-backup-files t)
(setq version-control t)     ; 允许多次备份
(setq kept-old-versions 2)   ; 保留最早的2个备份文件
(setq kept-new-version 100)  ; 保留最近的100个备份文件
(setq delete-old-versions t) ; 自动删除旧的备份文件

;; 回到关闭文件前光标的位置
(use-package saveplace
  :ensure nil
  :defer 1
  :hook (after-init . save-place-mode)
  :init (setq save-place-file (expand-file-name "saveplace" suk-emacs-var-dir) ; "~/.emacs.d/var/saveplace"
  ))

(use-package savehist
  :ensure nil
  :hook (after-init . savehist-mode)
  :init (setq enable-recursive-minibuffers t ; Allow commands in minibuffers
              history-length 1000
              savehist-additional-variables '(mark-ring
                                              global-mark-ring
                                              search-ring
                                              regexp-search-ring
                                              extended-command-history)
              savehist-autosave-interval 300
              savehist-file (expand-file-name "history" suk-emacs-var-dir) ; "~/.emacs.d/var/history"
))

;; =========================================================
;; Start server
;; =========================================================
(use-package server
   :ensure t
   :hook (after-init . server-mode))
;; Emacs可以做为一个server, 然后用emacsclient连接这个server,
;; 无需再打开两个Emacs，windows下还不支持daemon的方式。
;;(server-force-delete)
;;(server-start)

;; Misc.
(use-package simple
  :ensure nil
  :hook ((after-init . size-indication-mode)
         (text-mode . visual-line-mode)
         ((prog-mode markdown-mode conf-mode) . enable-trailing-whitespace))
  :init
  (setq column-number-mode t
        line-number-mode t
        kill-whole-line t               ; Kill line including '\n'
        line-move-visual nil
        track-eol t                     ; Keep cursor at end of lines. Require line-move-visual is nil.
        set-mark-command-repeat-pop t)  ; Repeating C-SPC after popping mark pops it again

  ;; Visualize TAB, (HARD) SPACE, NEWLINE
  (setq-default show-trailing-whitespace nil) ; Don't show trailing whitespace by default
  (defun enable-trailing-whitespace ()
    "Show trailing spaces and delete on saving."
    (setq show-trailing-whitespace t)
    (add-hook 'before-save-hook #'delete-trailing-whitespace nil t))

  ;; Prettify the process list
  (with-no-warnings
    (defun my-list-processes--prettify ()
      "Prettify process list."
      (when-let ((entries tabulated-list-entries))
        (setq tabulated-list-entries nil)
        (dolist (p (process-list))
          (when-let* ((val (cadr (assoc p entries)))
                      (name (aref val 0))
                      (pid (aref val 1))
                      (status (aref val 2))
                      (status (list status
                                    'face
                                    (if (memq status '(stop exit closed failed))
                                        'error
                                      'success)))
                      (buf-label (aref val 3))
                      (tty (list (aref val 4) 'face 'font-lock-doc-face))
                      (thread (list (aref val 5) 'face 'font-lock-doc-face))
                      (cmd (list (aref val 6) 'face 'completions-annotations)))
            (push (list p (vector name pid status buf-label tty thread cmd))
		          tabulated-list-entries)))))
    (advice-add #'list-processes--refresh :after #'my-list-processes--prettify)))

(when (or sys/mac-x-p sys/linux-x-p (daemonp))
  (use-package exec-path-from-shell
    :custom (exec-path-from-shell-arguments '("-l"))
    :init (exec-path-from-shell-initialize)))

;; Garbage Collector Magic Hack
(use-package gcmh
  :diminish
  :hook (emacs-startup . gcmh-mode)
  :init
  (setq gcmh-idle-delay 'auto
        gcmh-auto-idle-delay-factor 10
        gcmh-high-cons-threshold #x1000000)) ; 16MB

;; Sqlite
(when (fboundp 'sqlite-open)
  (use-package emacsql-sqlite-builtin))
;;===================================================
;; Proxy settings
;;===================================================
;;;###autoload
(defun suk/proxy-http-show ()
  "Show http/https proxy."
  (interactive)
  (if url-proxy-services
      (message "Current HTTP proxy is \"%s\"" suk-proxy)
    (message "No proxy")))

;;;###autoload
(defun suk/proxy-http-enable ()
  "Enable http/https proxy."
  (interactive)
  (setq url-proxy-services `(("http" . suk-proxy)
                             ("https" . suk-proxy)
                             ("no_proxy" . "^\\(localhost\\|192.168.*\\|10.*\\)")))
  (suk/proxy-http-show))

;;;###autoload
(defun suk/proxy-http-disable ()
  "Disable http/https proxy."
  (interactive)
  (setq url-proxy-services nil)
  (suk/proxy-http-show))

;;;###autoload
(defun suk/proxy-http-toggle ()
  "Toggle http/https proxy."
  (interactive)
  (if url-proxy-services
      (suk/proxy-http-disable)
    (suk/proxy-http-enable)))

;;;###autoload
(defun suk/proxy-socks-enable ()
  "Enable Socks proxy."
  (interactive)
  (setq url-gateway-method 'socks)
  (setq socks-noproxy '("localhost"))
  (setq socks-server '("Default server" "127.0.0.1" 1080 5))
  (message "Enable socks proxy."))

;;;###autoload
(defun suk/proxy-socks-disable ()
  "Disable Socks proxy."
  (interactive)
  (setq url-gateway-method 'native)
  (setq socks-noproxy nil)
  (message "Disable socks proxy."))

;;===================================================
;; Byte Compile
;;===================================================
;;;###autoload
(defun byte-compile-elpa ()
  "Compile packages in elpa directory. Useful if you switch Emacs versions."
  (interactive)
  (if (fboundp 'async-byte-recompile-directory)
      (async-byte-recompile-directory package-user-dir)
    (byte-recompile-directory package-user-dir 0 t)))

;;;###autoload
(defun byte-compile-extensions ()
  "Compile packages in extensions directory."
  (interactive)
  (let ((dir (locate-user-emacs-file "extensions")))
    (if (fboundp 'async-byte-recompile-directory)
        (async-byte-recompile-directory dir)
      (byte-recompile-directory dir 0 t))))

;;;###autoload
(defun native-compile-elpa ()
  "Native-compile packages in elpa directory."
  (interactive)
  (if (fboundp 'native-compile-async)
      (native-compile-async package-user-dir t)))

;;;###autoload
(defun native-compile-extensions ()
  "Native compile packages in extensions directory."
  (interactive)
  (let ((dir (locate-user-emacs-file "extensions")))
    (if (fboundp 'native-compile-async)
        (native-compile-async dir t))))

;;;###autoload
(defun suk-set-variable (variable value &optional no-save)
  "Set the VARIABLE to VALUE, and return VALUE.

  Save to option `custom-file' if NO-SAVE is nil."
  (customize-set-variable variable value)
  (when (and (not no-save)
             (file-writable-p custom-file))
    (with-temp-buffer
      (insert-file-contents custom-file)
      (goto-char (point-min))
      (while (re-search-forward
              (format "^[\t ]*[;]*[\t ]*(setq %s .*)" variable)
              nil t)
        (replace-match (format "(setq %s '%s)" variable value) nil nil))
      (write-region nil nil custom-file)
      (message "Saved %s (%s) to %s" variable value custom-file))))



;;===================================================
;; Update
;;===================================================
;;;###autoload
(defun update-config ()
  "Update Suk's Emacs configurations to the latest version."
  (interactive)
  (let ((dir (expand-file-name user-emacs-directory)))
    (unless (file-exists-p dir)
      (user-error "\"%s\" doesn't exist" dir))

    (message "Updating configurations...")
    (cd dir)
    (shell-command "git pull")
    (message "Updating configurations...done")))
(defalias 'suk-update-config #'update-config)

;;;###autoload
(defun update-packages ()
  "Refresh package contents and update all packages."
  (interactive)
  (message "Updating packages...")
  (package-upgrade-all)
  (message "Updating packages...done"))
(defalias 'suk-update-packages #'update-packages)

;;;###autoload
(defun update-config-and-packages()
  "Update confgiurations and packages."
  (interactive)
  (update-config)
  (update-packages))
(defalias 'suk-update #'update-config-and-packages)

;;;###autoload
(defun update-dotfiles ()
  "Update the dotfiles to the latest version."
  (interactive)
  (let ((dir (or (getenv "DOTFILES")
                 (expand-file-name "~/.dotfiles/"))))
    (if (file-exists-p dir)
        (progn
          (message "Updating dotfiles...")
          (cd dir)
          (shell-command "git pull")
          (message "Updating dotfiles...done"))
      (message "\"%s\" doesn't exist" dir))))
(defalias 'suk-update-dotfiles #'update-dotfiles)

;;;###autoload
(defun update-org ()
  "Update Org files to the latest version."
  (interactive)
  (let ((dir (expand-file-name "~/org/")))
    (if (file-exists-p dir)
        (progn
          (message "Updating org files...")
          (cd dir)
          (shell-command "git pull")
          (message "Updating org files...done"))
      (message "\"%s\" doesn't exist" dir))))
(defalias 'suk-update-org #'update-org)

;;;###autoload
(defun update-all()
  "Update dotfiles, org files, configurations and packages to the latest."
  (interactive)
  (update-org)
  (update-dotfiles)
  (update-config-and-packages))
(defalias 'suk-update-all #'update-all)

;; ==================================================
;; Terminate
;; ==================================================
;;;###autoload
(defun term()
  "Use Bash in windows."
  (interactive)
  (if sys/win32p
	  (let (
			(shell-file-name windows-bash-path)
			)
		(call-interactively 'shell))
    (let ((explicit-shell-file-name "/bin/bash"))
	  (call-interactively 'shell)))
  )


;; Misc
(if (boundp 'use-short-answers)
    (setq use-short-answers t)
  (fset 'yes-or-no-p 'y-or-n-p))





(provide 'init-idle)

;;; init-idle.el ends here

#+end_src
* etc/init-im.el
#+begin_src emacs-lisp :tangle  etc/init-im.el
;;; init-im -- 输入法
;;; summary:
;; 输入法
;; code:
;; 内置机制
;;(require 'zyoy)
;;(require 'rain)
;;(require 'he)
;;(require 'he-quick)
;; (require 'flypy)

;; pyim
;; 在windows下输入法都是正常的，就是linux比较恶心了。
(when sys/linuxp
  (require 'pyim-init))


(provide 'init-im)

#+end_src
* etc/init-key.el
#+begin_src emacs-lisp :tangle etc/init-key.el
(eval-when-compile
  (require '+const)
  (require '+custom))

;;; 全局 lazy-load-global-keys
;;; 模式 lazy-load-local-keys
;;; 支持最后一个参数传递前缀按键，
;;;
;;; 如果Emacs默认就加载了某个插件，而不需要在运行时动态加载，也可
;;; 以使用 lazy-load-set-keys
;;;
;;; 很多全局按键默认已经被 Emacs占用了，必须先卸载以后才能重新绑
;;; 定这些全局按键，比如 Ctrl + x, 下面这段代码就是用
;;; lazy-load-unset-keys 卸载默认绑定的全局按键

;; Mac平台下交换 Option 和 Command 键。
;;(when (featurep 'cocoa)
;;  (setq mac-option-modifier 'super)
;;  (setq mac-command-modifier 'meta))
;;

;;; ### Unset key ###
;;; --- 卸载按键
(lazy-load-unset-keys                   ;全局按键的卸载
 ;; '("C-z"  "s-W" "s-z" "M-h" "C-\\" "s-c" "s-x" "s-v"))
 '("C-z" ))

;;; ### sudo ###
(when sys/linuxp
  (progn
	(lazy-load-global-keys
	 '(("C-z C-s" . suk/sudo-actions-one-key))
	 "init-sudo"
	 )
	)
  )

;;; ### Sdcv ###
;;; --- 星际译王命令行
(lazy-load-global-keys
 '(("p" . sdcv-search-pointer)		   ;光标处的单词, buffer显示
   ("P" . sdcv-search-pointer+)		   ;光标处的单词, tooltip显示
   ("i" . sdcv-search-input)		   ;输入的单词, buffer显示
   (";" . sdcv-search-input+)
   ("y" . my-youdao-dictionary-search-at-point)
   ("Y" . youdao-dictionary-search-at-point)
   ("g" . google-translate-at-point)
   ("G" . google-translate-query-translate)
   ("s" . google-translate-smooth-translate)
   ("f" . fanyi-dwim)
   ("d" . fanyi-dwim2)
   ("h" . fanyi-from-history)
   )
 "init-translate"
 "C-z")

;;; ### Insert translated name ###
;; youdao / google
(setq insert-translated-name-translate-engine "google")
(lazy-load-global-keys
 '(
   ("," . insert-translated-name-insert-with-underline)
   ("." . insert-translated-name-insert-with-camel)
   ("/" . insert-translated-name-insert)
   )
 "insert-translated-name"
 "C-z"
 )


;;; ### Toolkit ###
;;; --- 工具函数
(lazy-load-set-keys
 '(
   ("C-," . bury-buffer)                ;隐藏当前buffer
   ("C-." . unbury-buffer)              ;反隐藏当前buffer
   ("s-[" . eval-expression)            ;执行表达式
   ("s-1" . sort-lines)                 ;排序
   ("s-2" . hanconvert-region)          ;转换简体或繁体中文
   ("s-3" . uniquify-all-lines-buffer)  ;删除重复的行
   ("s-<f12>" . calendar)
   ("C-<f12>" . lazycat-theme-toggle)
   ;;([c-t] . transpose-chars)
   ([S-f6] . hs-minor-mode)
   ([S-f5] . toggle-truncate-lines)
   ("C-x M-a" . align-regexp)
   ("C-c ." . hs-toggle-hiding)
   ("C-c ," . hs-show-all)
   )
 )


;;; ### basic-toolkit ###
(lazy-load-global-keys
 '(
   ("M-s-n" . comment-part-move-down)   ;向下移动注释
   ("M-s-p" . comment-part-move-up)     ;向上移动注释
   ("C-s-n" . comment-dwim-next-line)   ;移动到上一行并注释
   ("C-s-p" . comment-dwim-prev-line)   ;移动到下一行并注释
   ("M-2" . indent-buffer)              ;自动格式化当前Buffer
   ("M-z" . upcase-char) ;Upcase char handly with capitalize-word
   ;;("C-x u" . mark-line)              ;选中整行
   ("s-k" . kill-and-join-forward)      ;在缩进的行之间删除
   ("M-G" . goto-column)                ;到指定列
   ("C->" . remember-init)              ;记忆初始函数
   ("C-<" . remember-jump)              ;记忆跳转函数
   ("M-s-," . point-stack-pop)          ;buffer索引跳转
   ("M-s-." . point-stack-push)         ;buffer索引标记
   ("s-g" . goto-percent) ;跳转到当前Buffer的文本百分比, 单位为字符
   ("M-I" . backward-indent)            ;向后移动4个字符
                                        ;   ("s-J" . scroll-up-one-line)         ;向上滚动一行
                                        ;   ("s-K" . scroll-down-one-line)       ;向下滚动一行
   ("<f2>" . refresh-file)              ;自动刷新文件
   ("s-f" . find-file-root)             ;用root打开文件
   ("s-r" . find-file-smb)              ;访问sambao
   ("C-J" . joint-lines)                ;连接行
   )
 "basic-toolkit")

;;; ### goto-line-preview ###
(lazy-load-global-keys
 '(
   ("M-g p" . goto-line-preview))
 "goto-line-preview")

;;; ### Delete block ###
;;; --- 快速删除光标左右的内容
(lazy-load-global-keys
 '(
   ("M-," . delete-block-backward)
   ("M-." . delete-block-forward))
 "delete-block")

;;; ### watch other window ###
;;; --- 滚动其他窗口
(lazy-load-global-keys
 '(
   ("C-P" . other-window-move-up)		;向下滚动其他窗口
   ("C-N" . other-window-move-down)		;向上滚动其他窗口
   ("M-p" . window-move-up)				;向下滚动当前窗口
   ("M-n" . window-move-down)			;向上滚动当前窗口
   )
 "win-move")

;;; ### Buffer Move ###
;;; --- 缓存移动
(lazy-load-set-keys
 '(
   ;;("C-z i" . beginning-of-buffer)      ;缓存开始 M-<
   ;;("C-z k" . end-of-buffer)            ;缓存结尾 M->
   ("C-M-f" . forward-paragraph)        ;下一个段落
   ("C-M-b" . backward-paragraph)       ;上一个段落
   ("C-M-y" . backward-up-list)         ;向左跳出 LIST
   ("C-M-o" . up-list)                  ;向右跳出 LIST
   ("C-M-u" . backward-down-list)       ;向左跳进 LIST
   ("C-M-i" . down-list)                ;向右跳进 LIST
   ("C-M-a" . beginning-of-defun)       ;函数开头
   ("C-M-e" . end-of-defun)             ;函数末尾
   ))

;;; ### move text ###
(lazy-load-global-keys
 '(
   ("M-N" . move-text-down)	;把光标所在的整行文字(或标记)下移一行
   ("M-P" . move-text-up)	;把光标所在的整行文字(或标记)上移一行
   )
 "move-text")

;;; ### duplicate-line ###
(lazy-load-global-keys
 '(
   ("C-S-o" . duplicate-line-or-region-above) ;向上复制当前行或区域
   ("C-S-l" . duplicate-line-or-region-below) ;向下复制当前行或区域
   ("C-S-s-o" . duplicate-line-above-comment) ;复制当前行到上一行, 并注释当前行
   ("C-S-s-l" . duplicate-line-below-comment) ;复制当前行到下一行, 并注释当前行
   ("C-:" . comment-or-uncomment-region+)     ;注释当前行
   )
 "duplicate-line")

;;; ### open new line ###
(lazy-load-global-keys
 '(
   ("C-o" . open-newline-above)         ;在上面一行新建一行
   ("C-l" . open-newline-below)         ;在下面一行新建一行
   )
 "open-newline")



;;; ### Buffer Edit ###
;;; --- 缓存编辑
(lazy-load-set-keys
 '(
   ("C-x C-x" . exchange-point-and-mark)   ;交换当前点和标记点
   ("M-o" . backward-delete-char-untabify) ;向前删除字符
   ("C-M-S-h" . mark-paragraph)            ;选中段落
   ("M-SPC" . just-one-space)              ;只有一个空格在光标处
   ))

;;; ### Rect ###
;;; --- 矩形操作
(lazy-load-global-keys
 '(
   ("s-M" . rm-set-mark)				;矩形标记
   ("s-X" . rm-exchange-point-and-mark)	;矩形对角交换
   ("s-D" . rm-kill-region)				;矩形删除
   ("s-S" . rm-kill-ring-save)			;矩形保存
   ("s-Y" . yank-rectangle)				;粘帖矩形
   ("s-O" . open-rectangle)		  ;用空白填充矩形, 并向右移动文本
   ("s-C" . clear-rectangle)	  ;清空矩形
   ("s-T" . string-rectangle)	  ;用字符串替代矩形的每一行
   ("s-I" . string-insert-rectangle)	;插入字符串在矩形的每一行
   ("s-F" . delete-whitespace-rectangle) ;删除矩形中空格
   ("s-\"" . copy-rectangle-to-register) ;拷贝矩形到寄存器
   ("s-:" . mark-rectangle-to-end)       ;标记矩形到行末
   )
 "rect-extension")

;;; ### Font ###
;;; --- 字体命令
(lazy-load-set-keys
 '(
   ("C--" . text-scale-decrease)        ;减小字体大小
   ("C-=" . text-scale-increase)        ;增加字体大小
   ))

;;; ### 调整数字 ###
;;; --- 调整光标处数字
(lazy-load-global-keys
 '(
   ("M--" . shift-number-down)
   ("M-=" . shift-number-up))
 "shift-number")

;;; ### Window Operation ###
;;; --- 窗口操作
(lazy-load-set-keys
 '(
   ("C-c :" . split-window-vertically)   ;纵向分割窗口
   ("C-c |" . split-window-horizontally) ;横向分割窗口
   ("C-;" . kill-this-buffer)            ;关闭当前buffer
   ("C-x ;" . delete-other-windows)      ;关闭其它窗口
   ))
(lazy-load-global-keys
 '(
   ("C-c V" . delete-other-windows-vertically+)	;关闭上下的其他窗口
   ("C-c H" . delete-other-windows-horizontally+) ;关闭左右的其他窗口
   ("C-'" . delete-current-buffer-and-window) ;关闭当前buffer, 并关闭窗口
   ("C-\"" . delete-current-buffer-window) ;删除当前buffer的窗口
   ("M-s-o" . toggle-one-window)		   ;切换一个窗口
   ("C-x O" . toggle-window-split)
   )
 "window-extension")

(lazy-load-global-keys
 '(
   ("C-c C-m" . rg-menu)
   ("C-c C-/" . webjump)
   ("C-c g" . github-code-search)
   ("C-c G" . google-search)
   )
 "init-search")

;;; ### Functin key ###
;;; --- 功能函数
(lazy-load-set-keys
 '(
   ("<f9>" . emacs-session-save )
   ("C-4" . insert-changelog-date)      ;插入日志时间 (%Y/%m/%d)
   ("C-&" . switch-to-messages)         ;跳转到 *Messages* buffer
   ))

;;; ### Awesome-Pair ###
;;; --- 结构化编程

;;; ### Thingh-edit ###
;;; --- 增强式编辑当前光标的对象
(lazy-load-global-keys
 '(
   ("C-c w" . thing-copy-word)
   ("C-c s" . thing-copy-symbol)
   ("C-c m" . thing-copy-email)
   ("C-c f" . thing-copy-filename)
   ("C-c u" . thing-copy-url)
   ("C-c x" . thing-copy-sexp)
   ("C-c g" . thing-copy-page)
   ("C-c t" . thing-copy-sentence)
   ("C-c o" . thing-copy-witespace)
   ("C-c i" . thing-copy-list)
   ("C-c c" . thing-copy-comment)
   ("C-c h" . thing-copy-defun)
   ("C-c p" . thing-copy-parentheses)
   ("C-c l" . thing-copy-line)
   ("C-c a" . thing-copy-to-line-begining)
   ("C-c e" . thing-copy-to-line-end)
   ("C-c W" . thing-cut-word)
   ("C-c S" . thing-cut-symbol)
   ("C-c M" . thing-cut-email)
   ("C-c F" . thing-cut-filename)
   ("C-c G" . thing-cut-page)
   ("C-c T" . thing-cut-sentence)
   ("C-c O" . thing-cut-whitespace)
   ("C-c I" . thing-cut-list)
   ("C-c C" . thing-cut-comment)
   ("C-c H" . thing-cut-defun)
   ("C-c P" . thing-cut-parentheses)
   ("C-c L" . thing-cut-line)
   ("C-c A" . thing-cut-to-line-beginning)
   ("C-c E" . thing-cut-to-line-end)
   )
 "thing-edit"
 "C-z"
 )

;;; ### Isearch ###
;;; --- 交互式搜索
(lazy-load-set-keys
 '(
   ("TAB" . isearch-complete)               ;isearch补全
   ("C-s" . isearch-repeat-forward)         ;重复向前搜索, 第一次可以用来搜索上一次的历史哟
   ("C-r" . isearch-repeat-backward)        ;重复向后搜索
   ("C-g" . isearch-abort)                  ;中止搜索
   ("C-w" . isearch-yank-word-or-char)      ;粘帖光标后的词或字符作为搜索对象
   ("C-y" . isearch-yank-line)              ;粘帖光标后的行作为搜索对象
   ("M-o" . isearch-delete-char)            ;删除
   ("M-p" . isearch-ring-retreat)           ;搜索历史向后
   ("M-n" . isearch-ring-adjust)            ;搜索历史向前
   ("M-y" . isearch-yank-kill)              ;从 kill ring 中粘帖最后一项到搜索对象后
   ("M-h" . isearch-yank-char)              ;粘帖光标后的字符到搜索对象
   ("M-e" . isearch-edit-string)            ;编辑搜索对象
   ("M-c" . isearch-toggle-case-fold)       ;切换大小写
   ("M-r" . isearch-toggle-regexp)          ;切换正则表达式
   ("M-w" . isearch-toggle-word)            ;切换词
   ("M->" . isearch-beginning-of-buffer)    ;跳转到buffer开头并重新搜索, 搜索最前面一个
   ("M-<" . isearch-end-of-buffer)          ;跳转到buffer末尾并重新搜索, 搜索最后面一个
   ("M-%" . isearch-query-replace)          ;替换
   ("M-d" . isearch-find-duplicate-word)    ;查找重复的单词
   ("M-z" . isearch-find-duplicate-line)    ;查找重复的行
   ("C-M-%" . isearch-query-replace-regexp) ;正则表达式替换
   )
 isearch-mode-map
 )


;;; ### expand-region ###
(lazy-load-global-keys
 '(
   ("C-+" . er/expand-region))
 "expand-region")

;; ### vdiff ###
(lazy-load-global-keys
 '(
   ("M-s-u" . vdiff-buffers))
 "vdiff")

;;; ### Ace jump ###
(lazy-load-global-keys
 '(
   ("C-c w" . ace-jump-word-mode)
   ("C-c c" . ace-jump-char-mode)
   ("C-c l" . ace-jump-line-mode)
   )
 "ace-jump-mode"
 "C-z"
 )


;;; ### Company en words ###
;;; --- 英文助手
(lazy-load-global-keys
 '(
   ("M-r" . toggle-company-english-helper) ;英文助手
   )
 "company-english-helper")



(lazy-load-set-keys
 '(
   ("C-z S g" . suk/google-search)
   ("C-z S c" .  suk/github-code-search)
   )
 )

;;; --- 笔记管理和组织
;; (define-prefix-command 'F9-map)
;; (global-set-key (kbd "<f9>") 'F9-map)
;; (lazy-load-global-keys
;;  '(("a" . org-agenda)
;;    ("A" . org-attach)
;;    ("s" . show-org-agenda)
;;    ("c" . org-capture)
;;    ("i" . org-toggle-inline-images)
;;    ("l" . org-toggle-link-display)
;;    ("d" . calendar)
;;    ("f" . boxquote-insert-file)
;;    ("r" . boxquote-region)
;;    ("v" . visible-mode))
;;  "init-org"
;;  "<f9>")

;;; ### String Inflection ###
;; --- 单词语法风格快速转换
(lazy-load-global-keys
 '(
   ("C-c C-u" . one-key-string-inflection)
   )
 "init-string-inflection")

;;; Dash.
;;(lazy-load-global-keys
;; '(("y" . dash-at-point)
;;   )
;; "dash-at-point"
;; "C-x"
;; )


;;; ### Keyboard Macro ###
;;; --- 键盘宏
(lazy-load-global-keys
 '(
   ("M-s-s" . kmacro-start-macro-or-insert-counter) ;开始键盘宏或插入 F3
   ("M-s-d" . kmacro-end-or-call-macro)	   ;结束键盘宏或调用 F4
   ("M-s-c" . kmacro-delete-ring-head)	   ;删除当前的键盘宏
   ("M-s-w" . kmacro-cycle-ring-next)	   ;下一个键盘宏
   ("M-s-e" . kmacro-cycle-ring-previous)  ;上一个键盘宏
   ("M-s-a" . kmacro-edit-macro)		   ;编辑键盘宏
   ("M-s-v" . name-last-kbd-macro)		   ;命令当前键盘宏
   ("M-s-f" . insert-kbd-macro)			   ;插入键盘宏
   ("M-s-q" . apply-macro-to-region-lines) ;应用键盘宏到选择的区域
   )
 "macros+")

;;(global-set-key  [C-f7] 'suk/ska-point-to-register)
;;(global-set-key  [f7] 'suk/ska-jump-to-register)
(lazy-load-global-keys
 '(
   ("C-<f7>" . suk/ska-point-to-register)
   ("<f7>"   . suk/ska-jump-to-register )
   )
 "init-bookmark")

;; f3 start macro(kmacro-start-macro-or-insert-counter),
;; f4 done macro or run marcro (kmacro-end-or-call-macro).
;; C-x ( start macro (kmacro-start-macro),
;; C-x ) end done marco,
;; C-x e run marco(kmacro-end-macro)
;; 先定义一个宏
;; 然后 name-last-kbd-macro
;; 然后 insert-kbd-macro
;; 等到如下类似的配置
;; (fset 'delete-empty-lines (kbd "M-x flush-lines RET ^\s-*$ RET"))
;;




;; global-set-key examples:
;; (global-set-key (kbd "C-x C-\\") 'next-line)
;; (global-set-key [?\C-x ?\C-\\] 'next-line)
;; (global-set-key [(control ?x) (control ?\\)] 'next-line)

;;(global-set-key (kbd "C-(") 'backward-sexp)
;;(global-set-key (kbd "C-)") 'forward-sexp)

;;(global-set-key (kbd "C-x t T") 'suk/toggle-transparency)
;;(global-set-key (kbd "C-x t p") 'suk/toggle-toggle-proxy)
;;(global-set-key (kbd "C-x t f") 'global-flycheck-mode)
;;(global-set-key (kbd "C-x R") 'recentf)
;; M-x global-set-key RET 交互式的绑定你的键。
;; C-x Esc Esc 调出上一条“复杂命令”
;; 使用方式
;; (suk-set-key-bindings 'global-set-key
;;   (list
;;      '([f2]              calendar)
;;      '([(shift f2)]      remember)
;;      '([f5]              revert-buffer)
;;      (list (kbd "C-c l") 'copy-line)))



;; 设置绑定
(defun suk-set-key-bindings (ACTION BINDINGLIST)
  "Map keys.
ACTION usually is 'global-set-key', and BINDINGLIST is key and command LIST."

     (mapcar (lambda(lst)
            ""
            (let ((x (car lst))
                  (y (car (last lst))))
              (funcall ACTION x y))) BINDINGLIST ))


  (suk-set-key-bindings 'global-set-key
                        (list
                         (list (kbd "C-x M-a") 'align-regexp)
                         ;;                      '([C-t]               transpose-chars)
                         ;;                      '([S-f6]              hs-minor-mode)
                         ;;                      '([S-f5]              toggle-truncate-lines)
                         ;; '([S-f11]          insert-translated-name-insert) ;; Chinese to English
                         ;; '([S-f12]          toggle-company-english-helper) ;; popup English tips

                         ;; '([S-f2]           suk/new-empty-buffer)
                         ;; '([f2]                hs-toggle-hiding)
                         ;;'([M-f12]             vterm)
                         ;; '([S-f1]              snails)
                         (list (kbd "C-(") 'backward-sexp)
                         (list (kbd "C-)") 'forward-sexp)
                         (list (kbd "C-x t T") 'suk/toggle-transparency)
                         (list (kbd "C-x t p") 'suk/toggle-toggle-proxy)
                         (list (kbd "C-x t f") 'global-flycheck-mode)
                         (list (kbd "C-x R") 'recentf-open)
                         (list (kbd "C-<f11>")  'toggle-frame-fullscreen)
                         ;; (list (kbd "C-S-f")  'toggle-frame-fullscreen) ; Compatible with macOS
                         (list (kbd "M-S-<return>")  'toggle-frame-fullscreen)
                         ;; 创建新行的动作
                         (list (kbd "RET") 'newline-and-indent) ;; 回车时创建新行并且对齐
                         (list (kbd "S-<return>") 'comment-indent-new-line) ;; 取消对齐创建的新行

                         ))



  ;; bind-keys 是由 use-package 宏提供的一个功能，允许在一个声明中绑定多个键。虽然
  ;; bind-keys 可以独立于 use-package 使用，但它通常与 use-package 结合使用，以提
  ;; 供更清晰和模块化的键绑定配置。

  ;; Toggle fullscreen <F11> also bind to fullscreen
  ;; (bind-keys ("C-<f11>" . toggle-frame-fullscreen)
  ;;            ("C-S-f" . toggle-frame-fullscreen) ; Compatible with macOS
  ;;            ("M-S-<return>" . toggle-frame-fullscreen) ; Compatible with Windos
  ;;            )

  (unless sys/win32p
    (global-set-key  (kbd "C-S-SPC") 'set-mark-command))

  ;; C-c TAB indent-region
  ;; C-u C-c TAB => (un)indent-region



  ;; has set to f7, c-f7
  ;;(global-set-key (kbd "<C-f6>") '(lambda () (interactive) (bookmark-set "SAVED")))
  ;;(global-set-key (kbd "<f6>") '(lambda () (interactive) (bookmark-jump "SAVED")))

  ;; default keys: C-x LEFT/RIGHT C-, C-.
  (global-set-key (kbd "<C-S-iso-lefttab>") 'previous-buffer)
  (global-set-key (kbd "<C-tab>") 'next-buffer)
  ;;(global-set-key (kbd "C-x C-b") 'buffer-menu)
  ;;(global-set-key (kbd "C-x C-b") 'ibuffer)

;;;
  ;; 演示了如何定义一个新的按键前缀. 这里定义了M-c作为按键前缀.
  ;; (define-prefix-command 'comma-map)
  ;; (global-set-key (kbd ",") 'comma-map)
  ;; (global-set-key [(meta c)] 'meta-c-map)

  ;; 演示了如何在一个模式下(这里是isearch模式), 定义快捷键. 退出isearch-mode, 所有按键失效.
  ;; (add-hook 'isearch-mode-hook
  ;;        '(lambda ()
  ;;           ;; 搜索下一个结果
  ;;           (define-key isearch-mode-map [(meta n)] 'isearch-repeat-forward)
  ;;           ;; 搜索前一个结果
  ;;           (define-key isearch-mode-map [(meta p)] 'isearch-repeat-backward)
  ;;           ;; 替换
  ;;           (define-key isearch-mode-map [(control r)] 'isearch-query-replace)
  ;;           ;; 正则替换
  ;;           (define-key isearch-mode-map [(meta 5)] 'isearch-query-replace-regexp)
  ;;           (define-key isearch-mode-map [(meta f)] 'isearch-yank-word-or-char)
  ;;           ;; 剪切板作为搜索内容
  ;;           (define-key isearch-mode-map [(meta y)] 'isearch-yank-kill)
  ;;           ;; 将光标到行尾作为搜索内容
  ;;           (define-key isearch-mode-map [(meta k)] 'isearch-yank-line)
  ;;           (define-key isearch-mode-map [(hyper l)] 'isearch-yank-char)
  ;;           ;; 向左或向右(选择/取消)单个字符作为搜索内容
  ;;           (define-key isearch-mode-map [(hyper j)] 'isearch-delete-char)
  ;;           ;; 显示occur视图
  ;;           (define-key isearch-mode-map [(meta o)] 'isearch-occur)
  ;;           ;; 单词搜索
  ;;           (define-key isearch-mode-map [(meta w)] 'isearch-forward-word)
  ;;           (define-key isearch-mode-map [(meta s)] 'isearch-repeat-forward)
  ;;           ))



  ;;Emacs 自动排版
  ;;很简单：C-x h C-M-\
  ;;其中C-x h 是全选
  ;;C-M-\ 是排版

  ;; C-x C-q set/unset readonly

  ;; (require 'undo-tree)
  ;;(define-key undo-tree-map (kbd "C-x u") #'(lambda ()
  ;;   (interactive)
  ;;   (undo-tree-visualize)
  ;;   (undo-tree-visualize-undo)))
  ;; c-/ c-_  undo | c-x u undo-tree | c-s-/ s-? M-_ redo

  ;; 大小写转换： M-u, M-l, M-c

  ;; M-x align-regexp 可以方便的对齐一些文字

;;; rectangle
  ;; C-x r k
  ;; Kill the text of the region-rectangle, saving its contents as the last killed rectangle (kill-rectangle).
  ;; C-x r M-w
  ;; Save the text of the region-rectangle as the last killed rectangle (copy-rectangle-as-kill).
  ;; C-x r d
  ;; Delete the text of the region-rectangle (delete-rectangle).
  ;; C-x r y
  ;; Yank the last killed rectangle with its upper left corner at point (yank-rectangle).
  ;; C-x r o
  ;; Insert blank space to fill the space of the region-rectangle (open-rectangle). This pushes the previous contents of the region-rectangle to the right.
  ;; C-x r N
  ;; Insert line numbers along the left edge of the region-rectangle (rectangle-number-lines). This pushes the previous contents of the region-rectangle to the right.
  ;; C-x r c
  ;; Clear the region-rectangle by replacing all of its contents with spaces (clear-rectangle).
  ;; M-x delete-whitespace-rectangle
  ;; Delete whitespace in each of the lines on the specified rectangle, starting from the left edge column of the rectangle.
  ;; C-x r t string <RET>
  ;; Replace rectangle contents with string on each line (string-rectangle).
  ;; M-x string-insert-rectangle <RET> string <RET>
  ;; Insert string on each line of the rectangle.
  ;; C-x <SPC>
  ;; Toggle Rectangle Mark mode (rectangle-mark-mode). When this mode is active, the region-rectangle is highlighted and can be shrunk/grown, and the standard kill and yank commands operate on it.
  ;; The rectangle operations fall into two classes: commands to erase or insert rectangles, and comm

  ;; f3 start macro(kmacro-start-macro-or-insert-counter),
  ;; f4 done macro or run marcro (kmacro-end-or-call-macro).
  ;; C-x ( start macro (kmacro-start-macro),
  ;; C-x ) end done marco,
  ;; C-x e run marco(kmacro-end-macro)
  ;; 先定义一个宏
  ;; 然后 name-last-kbd-macro
  ;; 然后 insert-kbd-macro
  ;; 等到如下类似的配置
  (fset 'delete-empty-lines (kbd "M-x flush-lines RET ^\s-*$ RET"))

  (define-prefix-command 'leader-key)
  (global-set-key (kbd "M-s-SPC") 'leader-key)


  (provide 'init-key)

#+end_src
* etc/init-lang-c.el
#+begin_src emacs-lisp :tangle etc/init-lang-c.el
;; init-c.el --- Initialize c configurations.	-*- lexical-binding: t -*-
;;; Commentary:
;;
;; C/C++ configuration.
;;

;;; Code:

(eval-when-compile
  (require '+custom))

;; C/C++ Mode
(use-package cc-mode
  :ensure nil
  :bind (:map c-mode-base-map
         ("<f12>" . compile))
  :init (setq-default c-basic-offset 4))

(when (suk-treesit-available-p)
  (use-package c-ts-mode
    :init (setq c-ts-mode-indent-offset 4)))

(provide 'init-lang-c)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-c.el ends here

#+end_src
* etc/init-lang-check.el
#+begin_src emacs-lisp :tangle etc/init-lang-check.el
;; init-check.el --- Initialize check configurations.	-*- lexical-binding: t -*-
;;; Commentary:
;;
;; Check configurations.
;;

;;; Code:
(eval-when-compile
  (require 'init-package))


;; 语法检查包
(use-package flycheck
  :ensure t
  :defer 3)


(use-package flymake
  :diminish
  :functions my-elisp-flymake-byte-compile
  :bind ("C-c f" . flymake-show-buffer-diagnostics)
  :hook (prog-mode . flymake-mode)
  :init (setq flymake-no-changes-timeout nil
              flymake-fringe-indicator-position 'right-fringe)
  :config
  ;; Check elisp with `load-path'
  (defun my-elisp-flymake-byte-compile (fn &rest args)
    "Wrapper for `elisp-flymake-byte-compile'."
    (let ((elisp-flymake-byte-compile-load-path
           (append elisp-flymake-byte-compile-load-path load-path)))
      (apply fn args)))
  (advice-add 'elisp-flymake-byte-compile :around #'my-elisp-flymake-byte-compile))

;; (use-package sideline-flymake
;;   :ensure nil
;;   :diminish sideline-mode
;;   :hook (flymake-mode . sideline-mode)
;;   :init (setq sideline-flymake-display-mode 'point
;;               sideline-backends-right '(sideline-flymake)))

(provide 'init-lang-check)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-check.el ends here

#+end_src
* etc/init-lang-dap.el
#+begin_src emacs-lisp :tangle etc/init-lang-dap.el
;; init-dap.el --- Initialize DAP configurations.	-*- lexical-binding: t -*-

;;; Commentary:
;;
;; Debug Adapter Protocol (DAP) configurations.
;;

;;; Code:

(eval-when-compile
  (require '+const)
  (require 'init-package))

(when emacs/>=29p
  (use-package dape
    :load-path "~/.emacs.d/extensions/dapes"
    :bind (("<f5>" . dape)
           ("M-<f5>" . dape-hydra/body))
    :custom (dape-buffer-window-arrangment 'right)
    :pretty-hydra
    ((:title (pretty-hydra-title "Debug" 'codicon "nf-cod-debug")
      :color pink :quit-key ("q" "C-g"))
     ("Stepping"
      (("n" dape-next "next")
       ("s" dape-step-in "step in")
       ("o" dape-step-out "step out")
       ("c" dape-continue "continue")
       ("p" dape-pause "pause")
       ("k" dape-kill "kill")
       ("r" dape-restart "restart")
       ("D" dape-disconnect-quit "disconnect"))
      "Switch"
      (("m" dape-read-memory "memory")
       ("t" dape-select-thread "thread")
       ("w" dape-watch-dwim "watch")
       ("S" dape-select-stack "stack")
       ("i" dape-info "info")
       ("R" dape-repl "repl"))
      "Breakpoints"
      (("b" dape-breakpoint-toggle "toggle")
       ("l" dape-breakpoint-log "log")
       ("e" dape-breakpoint-expression "expression")
       ("B" dape-breakpoint-remove-all "clear"))
      "Debug"
      (("d" dape "dape")
       ("Q" dape-quit "quit" :exit t))))
    :config
    ;; Save buffers on startup, useful for interpreted languages
    (add-hook 'dape-on-start-hooks
              (defun dape--save-on-start ()
                (save-some-buffers t t)))
    ;; Display hydra on startup
    (add-hook 'dape-on-start-hooks #'dape-hydra/body)))

(provide 'init-lang-dap)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-dap.el ends here

#+end_src
* etc/init-lang-elisp.el
#+begin_src emacs-lisp :tangle etc/init-lang-elisp.el
  ;; init-elisp.el --- Initialize Emacs Lisp configurations.	-*- lexical-binding: t -*-

  ;;; Commentary:
  ;;
  ;; Emacs Lisp configurations.
  ;;

  ;;; Code:

  ;; Emacs lisp mode
  (use-package elisp-mode
    :ensure nil
    :bind (:map emacs-lisp-mode-map
           ("C-c C-x" . ielm)
           ("C-c C-c" . eval-defun)
           ("C-c C-b" . eval-buffer))
    :config
    (with-no-warnings
      ;; Align indent keywords
      ;; @see https://emacs.stackexchange.com/questions/10230/how-to-indent-keywords-aligned
      (defun my-lisp-indent-function (indent-point state)
        "This function is the normal value of the variable `lisp-indent-function'.
  The function `calculate-lisp-indent' calls this to determine
  if the arguments of a Lisp function call should be indented specially.

  INDENT-POINT is the position at which the line being indented begins.
  Point is located at the point to indent under (for default indentation);
  STATE is the `parse-partial-sexp' state for that position.

  If the current line is in a call to a Lisp function that has a non-nil
  property `lisp-indent-function' (or the deprecated `lisp-indent-hook'),
  it specifies how to indent.  The property value can be:

  ,* `defun', meaning indent `defun'-style
    \(this is also the case if there is no property and the function
    has a name that begins with \"def\", and three or more arguments);

  ,* an integer N, meaning indent the first N arguments specially
    (like ordinary function arguments), and then indent any further
    arguments like a body;

  ,* a function to call that returns the indentation (or nil).
    `lisp-indent-function' calls this function with the same two arguments
    that it itself received.

  This function returns either the indentation to use, or nil if the
  Lisp function does not specify a special indentation."
        (let ((normal-indent (current-column))
              (orig-point (point)))
          (goto-char (1+ (elt state 1)))
          (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
          (cond
           ;; car of form doesn't seem to be a symbol, or is a keyword
           ((and (elt state 2)
                 (or (not (looking-at "\\sw\\|\\s_"))
                     (looking-at ":")))
            (if (not (> (save-excursion (forward-line 1) (point))
                        calculate-lisp-indent-last-sexp))
                (progn (goto-char calculate-lisp-indent-last-sexp)
                       (beginning-of-line)
                       (parse-partial-sexp (point)
                                           calculate-lisp-indent-last-sexp 0 t)))
            ;; Indent under the list or under the first sexp on the same
            ;; line as calculate-lisp-indent-last-sexp.  Note that first
            ;; thing on that line has to be complete sexp since we are
            ;; inside the innermost containing sexp.
            (backward-prefix-chars)
            (current-column))
           ((and (save-excursion
                   (goto-char indent-point)
                   (skip-syntax-forward " ")
                   (not (looking-at ":")))
                 (save-excursion
                   (goto-char orig-point)
                   (looking-at ":")))
            (save-excursion
              (goto-char (+ 2 (elt state 1)))
              (current-column)))
           (t
            (let ((function (buffer-substring (point)
                                              (progn (forward-sexp 1) (point))))
                  method)
              (setq method (or (function-get (intern-soft function)
                                             'lisp-indent-function)
                               (get (intern-soft function) 'lisp-indent-hook)))
              (cond ((or (eq method 'defun)
                         (and (null method)
                              (length> function 3)
                              (string-match "\\`def" function)))
                     (lisp-indent-defform state indent-point))
                    ((integerp method)
                     (lisp-indent-specform method state
                                           indent-point normal-indent))
                    (method
                     (funcall method indent-point state))))))))
      (add-hook 'emacs-lisp-mode-hook
                (lambda () (setq-local lisp-indent-function #'my-lisp-indent-function)))

      ;; Add remove buttons for advices
      (add-hook 'help-mode-hook 'cursor-sensor-mode)

      (defun function-advices (function)
        "Return FUNCTION's advices."
        (let ((flist (indirect-function function)) advices)
          (while (advice--p flist)
            (setq advices `(,@advices ,(advice--car flist)))
            (setq flist (advice--cdr flist)))
          advices))

      (defun add-remove-advice-button (advice function)
        (when (and (functionp advice) (functionp function))
          (let ((inhibit-read-only t)
                (msg (format "Remove advice `%s'" advice)))
            (insert "\t")
            (insert-button
             "Remove"
             'face 'custom-button
             'cursor-sensor-functions `((lambda (&rest _) ,msg))
             'help-echo msg
             'action (lambda (_)
                       (when (yes-or-no-p msg)
                         (message "%s from function `%s'" msg function)
                         (advice-remove function advice)
                         (if (eq major-mode 'helpful-mode)
                             (helpful-update)
                           (revert-buffer nil t))))
             'follow-link t))))

      (defun add-button-to-remove-advice (buffer-or-name function)
        "Add a button to remove advice."
        (with-current-buffer buffer-or-name
          (save-excursion
            (goto-char (point-min))
            (let ((ad-list (function-advices function)))
              (while (re-search-forward "^\\(?:This function has \\)?:[-a-z]+ advice: \\(.+\\)$" nil t)
                (let ((advice (car ad-list)))
                  (add-remove-advice-button advice function)
                  (setq ad-list (delq advice ad-list))))))))

      (define-advice describe-function-1 (:after (function) advice-remove-button)
        (add-button-to-remove-advice (help-buffer) function))
      (with-eval-after-load 'helpful
        (define-advice helpful-update (:after () advice-remove-button)
          (when helpful--callable-p
            (add-button-to-remove-advice (current-buffer) helpful--sym))))

      ;; Remove hooks
      (defun remove-hook-at-point ()
        "Remove the hook at the point in the *Help* buffer."
        (interactive)
        (unless (memq major-mode '(help-mode helpful-mode))
          (error "Only for help-mode or helpful-mode"))

        (let ((orig-point (point)))
          (save-excursion
            (when-let
                ((hook (progn (goto-char (point-min)) (symbol-at-point)))
                 (func (when (and
                              (or (re-search-forward (format "^Value:?[\s|\n]") nil t)
                                  (goto-char orig-point))
                              (sexp-at-point))
                         (end-of-sexp)
                         (backward-char 1)
                         (catch 'break
                           (while t
                             (condition-case _err
                                 (backward-sexp)
                               (scan-error (throw 'break nil)))
                             (let ((bounds (bounds-of-thing-at-point 'sexp)))
                               (when (<= (car bounds) orig-point (cdr bounds))
                                 (throw 'break (sexp-at-point)))))))))
              (when (yes-or-no-p (format "Remove %s from %s? " func hook))
                (remove-hook hook func)
                (if (eq major-mode 'helpful-mode)
                    (helpful-update)
                  (revert-buffer nil t)))))))
      (bind-key "r" #'remove-hook-at-point help-mode-map)))

  ;; Interactive macro expander
  (use-package macrostep
    :bind (:map emacs-lisp-mode-map
           ("C-c e" . macrostep-expand)
           :map lisp-interaction-mode-map
           ("C-c e" . macrostep-expand)))


  (provide 'init-lang-elisp)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-elisp.el ends here

#+end_src
* etc/init-lang-lsp.el
#+begin_src emacs-lisp :tangle etc/init-lang-lsp.el
  ;; init-lsp.el --- Initialize LSP configurations.	-*- lexical-binding: t -*-

  ;;; Commentary:
  ;;
  ;; Language Server Protocol (LSP) configurations.
  ;;

  ;;; Code:

  (eval-when-compile
    (require '+custom)
    (require 'init-basic)
    )

  (pcase suk-lsp
    ('eglot
     (use-package eglot
       :hook ((prog-mode . (lambda ()
                             (unless (derived-mode-p 'emacs-lisp-mode 'lisp-mode 'makefile-mode 'snippet-mode)
                               (eglot-ensure))))
              ((markdown-mode yaml-mode yaml-ts-mode) . eglot-ensure))
       :init
       (setq read-process-output-max (* 1024 1024)) ; 1MB
       (setq eglot-autoshutdown t
             eglot-send-changes-idle-time 0.5)
       :config
       (use-package consult-eglot
         :load-path "~/.emacs.d/extensions/consult-eglot"
         :bind (:map eglot-mode-map
                ("C-M-." . consult-eglot-symbols)))
       (use-package eglot-java
         :hook((java-mode . eglot-java-mode)
               (elgot-java-mode . (lambda()
                                    (define-key eglot-java-mode-map (kbd "C-c l n") #'eglot-java-file-new)
                                    (define-key eglot-java-mode-map (kbd "C-c l x") #'eglot-java-run-main)
                                    (define-key eglot-java-mode-map (kbd "C-c l t") #'eglot-java-run-test)
                                    (define-key eglot-java-mode-map (kbd "C-c l N") #'eglot-java-project-new)
                                    (define-key eglot-java-mode-map (kbd "C-c l T") #'eglot-java-project-build-task)
                                    (define-key eglot-java-mode-map (kbd "C-c l R") #'eglot-java-project-build-refresh))))
         )
       )
     )
    ('lsp-mode
     ;; Performace tuning
     ;; @see https://emacs-lsp.github.io/lsp-mode/page/performance/
     (setq read-process-output-max (* 1024 1024)) ; 1MB
     (setenv "LSP_USE_PLISTS" "true")

     ;; Emacs client for the Language Server Protocol
     ;; https://github.com/emacs-lsp/lsp-mode#supported-languages
     (use-package lsp-mode
       :diminish
       :defines (lsp-diagnostics-disabled-modes lsp-clients-python-library-directories)
       :autoload lsp-enable-which-key-integration
       :commands (lsp-format-buffer lsp-organize-imports)
       :hook ((prog-mode . (lambda ()
                             (unless (derived-mode-p 'emacs-lisp-mode 'lisp-mode 'makefile-mode 'snippet-mode)
                               (lsp-deferred))))
              ((markdown-mode yaml-mode yaml-ts-mode) . lsp-deferred)
              (lsp-mode . (lambda ()
                            ;; Integrate `which-key'
                            (lsp-enable-which-key-integration)

                            ;; Format and organize imports
                            (when (and suk-lsp-format-on-save
                                       (not (apply #'derived-mode-p suk-lsp-format-on-save-ignore-modes)))
                              (add-hook 'before-save-hook #'lsp-format-buffer t t)
                              (add-hook 'before-save-hook #'lsp-organize-imports t t))))
              (java-mode . lsp-deferred))
       :bind (:map lsp-mode-map
              ("C-c C-d" . lsp-describe-thing-at-point)
              ([remap xref-find-definitions] . lsp-find-definition)
              ([remap xref-find-references] . lsp-find-references))
       :init (setq lsp-keymap-prefix "C-c l"
                   lsp-keep-workspace-alive nil
                   lsp-signature-auto-activate nil
                   lsp-modeline-code-actions-enable nil
                   lsp-modeline-diagnostics-enable nil
                   lsp-modeline-workspace-status-enable nil

                   lsp-semantic-tokens-enable t
                   lsp-progress-spinner-type 'progress-bar-filled

                   lsp-enable-file-watchers nil
                   lsp-enable-folding nil
                   lsp-enable-symbol-highlighting nil
                   lsp-enable-text-document-color nil

                   lsp-enable-indentation nil
                   lsp-enable-on-type-formatting nil

                   ;; For diagnostics
                   lsp-diagnostics-disabled-modes '(markdown-mode gfm-mode)

                   ;; For clients
                   lsp-clients-python-library-directories '("/usr/local/" "/usr/"))
       :config
       (defvar user-home-dir (getenv "HOME"))
       (if sys/win32p
           (defvar user-home-dir (getenv "USERPROFILE")))

       (setq lsp-maven-path (concat user-home-dir "/.m2/settings.xml"))  ;; maven setting path
       (setq lsp-java-java-path (concat (getenv "JAVA_HOME") "/bin/java"))    ;; java11 exec path

       (use-package consult-lsp
         :bind (:map lsp-mode-map
                ("C-M-." . consult-lsp-symbols)))

       (with-no-warnings
         ;; Disable `lsp-mode' in `git-timemachine-mode'
         (defun my-lsp--init-if-visible (fn &rest args)
           (unless (bound-and-true-p git-timemachine-mode)
             (apply fn args)))
         (advice-add #'lsp--init-if-visible :around #'my-lsp--init-if-visible)

         ;; Enable `lsp-mode' in sh/bash/zsh
         (defun my-lsp-bash-check-sh-shell (&rest _)
           (and (memq major-mode '(sh-mode bash-ts-mode))
                (memq sh-shell '(sh bash zsh))))
         (advice-add #'lsp-bash-check-sh-shell :override #'my-lsp-bash-check-sh-shell)
         (add-to-list 'lsp-language-id-configuration '(bash-ts-mode . "shellscript"))

         ;; Display icons
         (when (icons-displayable-p)
           (defun my-lsp-icons-get-symbol-kind (fn &rest args)
             (and (icons-displayable-p) (apply fn args)))
           (advice-add #'lsp-icons-get-by-symbol-kind :around #'my-lsp-icons-get-symbol-kind)

           ;; For `lsp-headerline'
           (defun my-lsp-icons-get-by-file-ext (fn &rest args)
             (and (icons-displayable-p) (apply fn args)))
           (advice-add #'lsp-icons-get-by-file-ext :around #'my-lsp-icons-get-by-file-ext)

           (defun my-lsp-icons-get-by-file-ext (file-ext &optional feature)
             (when (and file-ext
                        (lsp-icons--enabled-for-feature feature))
               (nerd-icons-icon-for-extension file-ext)))
           (advice-add #'lsp-icons-get-by-file-ext :override #'my-lsp-icons-get-by-file-ext)

           (defvar lsp-symbol-alist
             '((misc          nerd-icons-codicon "nf-cod-symbol_namespace" :face font-lock-warning-face)
               (document      nerd-icons-codicon "nf-cod-symbol_file" :face font-lock-string-face)
               (namespace     nerd-icons-codicon "nf-cod-symbol_namespace" :face font-lock-type-face)
               (string        nerd-icons-codicon "nf-cod-symbol_string" :face font-lock-doc-face)
               (boolean-data  nerd-icons-codicon "nf-cod-symbol_boolean" :face font-lock-builtin-face)
               (numeric       nerd-icons-codicon "nf-cod-symbol_numeric" :face font-lock-builtin-face)
               (method        nerd-icons-codicon "nf-cod-symbol_method" :face font-lock-function-name-face)
               (field         nerd-icons-codicon "nf-cod-symbol_field" :face font-lock-variable-name-face)
               (localvariable nerd-icons-codicon "nf-cod-symbol_variable" :face font-lock-variable-name-face)
               (class         nerd-icons-codicon "nf-cod-symbol_class" :face font-lock-type-face)
               (interface     nerd-icons-codicon "nf-cod-symbol_interface" :face font-lock-type-face)
               (property      nerd-icons-codicon "nf-cod-symbol_property" :face font-lock-variable-name-face)
               (indexer       nerd-icons-codicon "nf-cod-symbol_enum" :face font-lock-builtin-face)
               (enumerator    nerd-icons-codicon "nf-cod-symbol_enum" :face font-lock-builtin-face)
               (enumitem      nerd-icons-codicon "nf-cod-symbol_enum_member" :face font-lock-builtin-face)
               (constant      nerd-icons-codicon "nf-cod-symbol_constant" :face font-lock-constant-face)
               (structure     nerd-icons-codicon "nf-cod-symbol_structure" :face font-lock-variable-name-face)
               (event         nerd-icons-codicon "nf-cod-symbol_event" :face font-lock-warning-face)
               (operator      nerd-icons-codicon "nf-cod-symbol_operator" :face font-lock-comment-delimiter-face)
               (template      nerd-icons-codicon "nf-cod-symbol_snippet" :face font-lock-type-face)))

           (defun my-lsp-icons-get-by-symbol-kind (kind &optional feature)
             (when (and kind
                        (lsp-icons--enabled-for-feature feature))
               (let* ((icon (cdr (assoc (lsp-treemacs-symbol-kind->icon kind) lsp-symbol-alist)))
                      (args (cdr icon)))
                 (apply (car icon) args))))
           (advice-add #'lsp-icons-get-by-symbol-kind :override #'my-lsp-icons-get-by-symbol-kind)

           (setq lsp-headerline-arrow (nerd-icons-octicon "nf-oct-chevron_right"
                                                          :face 'lsp-headerline-breadcrumb-separator-face)))))

     (use-package lsp-ui
       :custom-face
       (lsp-ui-sideline-code-action ((t (:inherit warning))))
       :pretty-hydra
       ((:title (pretty-hydra-title "LSP UI" 'faicon "nf-fa-rocket" :face 'nerd-icons-green)
         :color amaranth :quit-key ("q" "C-g"))
        ("Doc"
         (("d e" (progn
                   (lsp-ui-doc-enable (not lsp-ui-doc-mode))
                   (setq lsp-ui-doc-enable (not lsp-ui-doc-enable)))
           "enable" :toggle lsp-ui-doc-mode)
          ("d s" (setq lsp-ui-doc-include-signature (not lsp-ui-doc-include-signature))
           "signature" :toggle lsp-ui-doc-include-signature)
          ("d t" (setq lsp-ui-doc-position 'top)
           "top" :toggle (eq lsp-ui-doc-position 'top))
          ("d b" (setq lsp-ui-doc-position 'bottom)
           "bottom" :toggle (eq lsp-ui-doc-position 'bottom))
          ("d p" (setq lsp-ui-doc-position 'at-point)
           "at point" :toggle (eq lsp-ui-doc-position 'at-point))
          ("d h" (setq lsp-ui-doc-header (not lsp-ui-doc-header))
           "header" :toggle lsp-ui-doc-header)
          ("d f" (setq lsp-ui-doc-alignment 'frame)
           "align frame" :toggle (eq lsp-ui-doc-alignment 'frame))
          ("d w" (setq lsp-ui-doc-alignment 'window)
           "align window" :toggle (eq lsp-ui-doc-alignment 'window)))
         "Sideline"
         (("s e" (progn
                   (lsp-ui-sideline-enable (not lsp-ui-sideline-mode))
                   (setq lsp-ui-sideline-enable (not lsp-ui-sideline-enable)))
           "enable" :toggle lsp-ui-sideline-mode)
          ("s h" (setq lsp-ui-sideline-show-hover (not lsp-ui-sideline-show-hover))
           "hover" :toggle lsp-ui-sideline-show-hover)
          ("s d" (setq lsp-ui-sideline-show-diagnostics (not lsp-ui-sideline-show-diagnostics))
           "diagnostics" :toggle lsp-ui-sideline-show-diagnostics)
          ("s s" (setq lsp-ui-sideline-show-symbol (not lsp-ui-sideline-show-symbol))
           "symbol" :toggle lsp-ui-sideline-show-symbol)
          ("s c" (setq lsp-ui-sideline-show-code-actions (not lsp-ui-sideline-show-code-actions))
           "code actions" :toggle lsp-ui-sideline-show-code-actions)
          ("s i" (setq lsp-ui-sideline-ignore-duplicate (not lsp-ui-sideline-ignore-duplicate))
           "ignore duplicate" :toggle lsp-ui-sideline-ignore-duplicate))
         "Action"
         (("h" backward-char "←")
          ("j" next-line "↓")
          ("k" previous-line "↑")
          ("l" forward-char "→")
          ("C-a" mwim-beginning-of-code-or-line nil)
          ("C-e" mwim-end-of-code-or-line nil)
          ("C-b" backward-char nil)
          ("C-n" next-line nil)
          ("C-p" previous-line nil)
          ("C-f" forward-char nil)
          ("M-b" backward-word nil)
          ("M-f" forward-word nil)
          ("c" lsp-ui-sideline-apply-code-actions "apply code actions"))))
       :bind (("C-c u" . lsp-ui-imenu)
              :map lsp-ui-mode-map
              ("M-<f6>" . lsp-ui-hydra/body)
              ("s-<return>" . lsp-ui-sideline-apply-code-actions)
              ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
              ([remap xref-find-references] . lsp-ui-peek-find-references))
       :hook (lsp-mode . lsp-ui-mode)
       :init
       (setq lsp-ui-sideline-show-diagnostics nil
             lsp-ui-sideline-ignore-duplicate t
             lsp-ui-doc-delay 0.1
             lsp-ui-doc-show-with-cursor (not (display-graphic-p))
             lsp-ui-imenu-auto-refresh 'after-save
             lsp-ui-imenu-colors `(,(face-foreground 'font-lock-keyword-face)
                                   ,(face-foreground 'font-lock-string-face)
                                   ,(face-foreground 'font-lock-constant-face)
                                   ,(face-foreground 'font-lock-variable-name-face)))
       ;; Set correct color to borders
       (defun my-lsp-ui-doc-set-border ()
         "Set the border color of lsp doc."
         (setq lsp-ui-doc-border
               (if (facep 'posframe-border)
                   (face-background 'posframe-border nil t)
                 (face-background 'region nil t))))
       (my-lsp-ui-doc-set-border)
       (add-hook 'after-load-theme-hook #'my-lsp-ui-doc-set-border t)
       :config
       (with-no-warnings
         ;; Display peek in child frame if possible
         ;; @see https://github.com/emacs-lsp/lsp-ui/issues/441
         (defvar lsp-ui-peek--buffer nil)
         (defun lsp-ui-peek--peek-display (fn src1 src2)
           (if (childframe-workable-p)
               (-let* ((win-width (frame-width))
                       (lsp-ui-peek-list-width (/ (frame-width) 2))
                       (string (-some--> (-zip-fill "" src1 src2)
                                 (--map (lsp-ui-peek--adjust win-width it) it)
                                 (-map-indexed 'lsp-ui-peek--make-line it)
                                 (-concat it (lsp-ui-peek--make-footer)))))
                 (setq lsp-ui-peek--buffer (get-buffer-create " *lsp-peek--buffer*"))
                 (posframe-show lsp-ui-peek--buffer
                                :string (mapconcat 'identity string "")
                                :min-width (frame-width)
                                :internal-border-color (face-background 'posframe-border nil t)
                                :internal-border-width 1
                                :poshandler #'posframe-poshandler-frame-center))
             (funcall fn src1 src2)))
         (defun lsp-ui-peek--peek-destroy (fn)
           (if (childframe-workable-p)
               (progn
                 (when (bufferp lsp-ui-peek--buffer)
                   (posframe-hide lsp-ui-peek--buffer))
                 (setq lsp-ui-peek--last-xref nil))
             (funcall fn)))
         (advice-add #'lsp-ui-peek--peek-new :around #'lsp-ui-peek--peek-display)
         (advice-add #'lsp-ui-peek--peek-hide :around #'lsp-ui-peek--peek-destroy)

         ;; Handle docs
         (defun my-lsp-ui-doc--handle-hr-lines nil
           (let (bolp next before after)
             (goto-char 1)
             (while (setq next (next-single-property-change (or next 1) 'markdown-hr))
               (when (get-text-property next 'markdown-hr)
                 (goto-char next)
                 (setq bolp (bolp)
                       before (char-before))
                 (delete-region (point) (save-excursion (forward-visible-line 1) (point)))
                 (setq after (char-after (1+ (point))))
                 (insert
                  (concat
                   (and bolp (not (equal before ?\n)) (propertize "\n" 'face '(:height 0.5)))
                   (propertize "\n" 'face '(:height 0.5))
                   (propertize " "
                               ;; :align-to is added with lsp-ui-doc--fix-hr-props
                               'display '(space :height (1))
                               'lsp-ui-doc--replace-hr t
                               'face `(:background ,(face-foreground 'font-lock-comment-face nil t)))
                   ;; :align-to is added here too
                   (propertize " " 'display '(space :height (1)))
                   (and (not (equal after ?\n)) (propertize " \n" 'face '(:height 0.5)))))))))
         (advice-add #'lsp-ui-doc--handle-hr-lines :override #'my-lsp-ui-doc--handle-hr-lines)))

     ;; `lsp-mode' and `treemacs' integration
     (use-package lsp-treemacs
       :after lsp-mode
       :bind (:map lsp-mode-map
              ("C-<f8>" . lsp-treemacs-errors-list)
              ("M-<f8>" . lsp-treemacs-symbols)
              ("s-<f8>" . lsp-treemacs-java-deps-list))
       :init (lsp-treemacs-sync-mode 1)
       :config
       (with-eval-after-load 'ace-window
         (when (boundp 'aw-ignored-buffers)
           (push 'lsp-treemacs-symbols-mode aw-ignored-buffers)
           (push 'lsp-treemacs-java-deps-mode aw-ignored-buffers)))

       (with-no-warnings
         (when (icons-displayable-p)
           (treemacs-create-theme "lsp-nerd-icons"
             :config
             (progn
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-repo" :face 'nerd-icons-blue))
                :extensions (root))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_boolean" :face 'nerd-icons-lblue))
                :extensions (boolean-data))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_class" :face 'nerd-icons-orange))
                :extensions (class))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_color"))
                :extensions (color-palette))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_constant"))
                :extensions (constant))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_file"))
                :extensions (document))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_misc" :face 'nerd-icons-orange))
                :extensions (enumerator))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_enum_member" :face 'nerd-icons-lblue))
                :extensions (enumitem))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_event" :face 'nerd-icons-orange))
                :extensions (event))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_field" :face 'nerd-icons-lblue))
                :extensions (field))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_misc"))
                :extensions (indexer))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_keyword"))
                :extensions (intellisense-keyword))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_interface" :face 'nerd-icons-lblue))
                :extensions (interface))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_variable" :face 'nerd-icons-lblue))
                :extensions (localvariable))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_method" :face 'nerd-icons-purple))
                :extensions (method))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_namespace" :face 'nerd-icons-lblue))
                :extensions (namespace))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_numeric"))
                :extensions (numeric))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_operator"))
                :extensions (operator))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_property"))
                :extensions (property))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_snippet"))
                :extensions (snippet))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_string"))
                :extensions (string))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_structure" :face 'nerd-icons-orange))
                :extensions (structure))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_snippet"))
                :extensions (template))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-chevron_right" :face 'nerd-icons-dsilver))
                :extensions (collapsed) :fallback "+")
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-chevron_down" :face 'nerd-icons-dsilver))
                :extensions (expanded) :fallback "-")
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-file_binary" :face 'nerd-icons-dsilver))
                :extensions (classfile))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-folder_opened" :face 'nerd-icons-blue))
                :extensions (default-folder-opened))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-folder" :face 'nerd-icons-blue))
                :extensions (default-folder))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-folder_opened" :face 'nerd-icons-green))
                :extensions (default-root-folder-opened))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-folder" :face 'nerd-icons-green))
                :extensions (default-root-folder))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-file_binary" :face 'nerd-icons-dsilver))
                :extensions ("class"))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-file_zip" :face 'nerd-icons-dsilver))
                :extensions (file-type-jar))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-folder_opened" :face 'nerd-icons-dsilver))
                :extensions (folder-open))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-folder" :face 'nerd-icons-dsilver))
                :extensions (folder))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-folder_opened" :face 'nerd-icons-orange))
                :extensions (folder-type-component-opened))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-folder" :face 'nerd-icons-orange))
                :extensions (folder-type-component))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-folder_opened" :face 'nerd-icons-green))
                :extensions (folder-type-library-opened))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-folder" :face 'nerd-icons-green))
                :extensions (folder-type-library))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-folder_opened" :face 'nerd-icons-pink))
                :extensions (folder-type-maven-opened))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-folder" :face 'nerd-icons-pink))
                :extensions (folder-type-maven))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-folder_opened" :face 'nerd-icons-orange))
                :extensions (folder-type-package-opened))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-folder" :face 'nerd-icons-orange))
                :extensions (folder-type-package))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-add" :face 'nerd-icons-dsilver))
                :extensions (icon-create))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-list_flat" :face 'nerd-icons-dsilver))
                :extensions (icon-flat))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-symbol_class" :face 'nerd-icons-blue))
                :extensions (icon-hierarchical))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-link" :face 'nerd-icons-dsilver))
                :extensions (icon-link))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-refresh" :face 'nerd-icons-dsilver))
                :extensions (icon-refresh))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-faicon "nf-fa-unlink" :face 'nerd-icons-dsilver))
                :extensions (icon-unlink))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-devicon "nf-dev-java" :face 'nerd-icons-orange))
                :extensions (jar))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-library" :face 'nerd-icons-green))
                :extensions (library))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-folder_opened" :face 'nerd-icons-lblue))
                :extensions (packagefolder-open))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-folder" :face 'nerd-icons-lblue))
                :extensions (packagefolder))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-archive" :face 'nerd-icons-dsilver))
                :extensions (package))
               (treemacs-create-icon
                :icon (format "%s " (nerd-icons-codicon "nf-cod-repo" :face 'nerd-icons-blue))
                :extensions (java-project))))

           (setq lsp-treemacs-theme "lsp-nerd-icons"))))

     ;; Python
     (use-package lsp-pyright
       :preface
       ;; Use yapf to format
       (defun lsp-pyright-format-buffer ()
         (interactive)
         (when (and (executable-find "yapf") buffer-file-name)
           (call-process "yapf" nil nil nil "-i" buffer-file-name)))
       :hook (((python-mode python-ts-mode) . (lambda ()
                                                (require 'lsp-pyright)
                                                (add-hook 'after-save-hook #'lsp-pyright-format-buffer t t))))
       :init (when (executable-find "python3")
               (setq lsp-pyright-python-executable-cmd "python3")))

     ;; C/C++/Objective-C
     (use-package ccls
       :hook ((c-mode c++-mode objc-mode cuda-mode) . (lambda () (require 'ccls)))
       :config
       (with-no-warnings
         ;; FIXME: fail to call ccls.xref
         ;; @see https://github.com/emacs-lsp/emacs-ccls/issues/109
         (cl-defmethod my-lsp-execute-command
           ((_server (eql ccls)) (command (eql ccls.xref)) arguments)
           (when-let ((xrefs (lsp--locations-to-xref-items
                              (lsp--send-execute-command (symbol-name command) arguments))))
             (xref--show-xrefs xrefs nil)))
         (advice-add #'lsp-execute-command :override #'my-lsp-execute-command)))

     ;; Swift
     (use-package lsp-sourcekit)

     ;; Julia
     (use-package lsp-julia
       :hook (julia-mode . (lambda () (require 'lsp-julia))))

     ;; Java
     (use-package lsp-java
       :hook ((java-mode java-ts-mode jdee-mode) . (lambda () (require 'lsp-java))))))

  (when suk-lsp
    ;; Enable LSP in org babel
    ;; https://github.com/emacs-lsp/lsp-mode/issues/377
    (cl-defmacro lsp-org-babel-enable (lang)
      "Support LANG in org source code block."
      (cl-check-type lang string)
      (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
             (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
        `(progn
           (defun ,intern-pre (info)
             (setq buffer-file-name (or (->> info caddr (alist-get :file))
                                        "org-src-babel.tmp"))
             (pcase suk-lsp
               ('eglot
                (when (fboundp 'eglot-ensure)
                  (eglot-ensure)))
               ('lsp-mode
                (when (fboundp 'lsp-deferred)
                  ;; Avoid headerline conflicts
                  (setq-local lsp-headerline-breadcrumb-enable nil)
                  (lsp-deferred)))
               (_
                (user-error "LSP:: invalid `suk-lsp' type"))))
           (put ',intern-pre 'function-documentation
                (format "Enable `%s' in the buffer of org source block (%s)."
                        suk-lsp (upcase ,lang)))

           (if (fboundp ',edit-pre)
               (advice-add ',edit-pre :after ',intern-pre)
             (progn
               (defun ,edit-pre (info)
                 (,intern-pre info))
               (put ',edit-pre 'function-documentation
                    (format "Prepare local buffer environment for org source block (%s)."
                            (upcase ,lang))))))))

    (defconst org-babel-lang-list
      '("go" "python" "ipython" "ruby" "js" "css" "sass" "c" "rust" "java" "cpp" "c++" "shell")
      "The supported programming languages for interactive Babel.")
    (dolist (lang org-babel-lang-list)
      (eval `(lsp-org-babel-enable ,lang))))

  (provide 'init-lang-lsp)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-lsp.el ends here

#+end_src
* etc/init-lang-python.el
#+begin_src emacs-lisp :tangle etc/init-lang-python.el
  ;; init-python.el --- Initialize python configurations.	-*- lexical-binding: t -*-
  ;;

  ;;; Commentary:
  ;;
  ;; Python configurations.
  ;;

  ;;; Code:

  ;; Python Mode
  ;; Install: pip install pyflakes autopep8
  (use-package python
    :ensure nil
    :hook (inferior-python-mode . (lambda ()
                                    (process-query-on-exit-flag
                                     (get-process "Python"))))
    :init
    ;; Disable readline based native completion
    (setq python-shell-completion-native-enable nil)
    :config
    ;; Default to Python 3. Prefer the versioned Python binaries since some
    ;; systems stupidly make the unversioned one point at Python 2.
    (when (and (executable-find "python3")
               (string= python-shell-interpreter "python"))
      (setq python-shell-interpreter "python3"))

    ;; Env vars
    (with-eval-after-load 'exec-path-from-shell
      (exec-path-from-shell-copy-env "PYTHONPATH")))

  (provide 'init-lang-python)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-python.el ends here

#+end_src
* etc/init-lang-vcs.el
#+begin_src emacs-lisp :tangle etc/init-lang-vcs.el
  ;; init-vcs.el --- Initialize version control system configurations.	-*- lexical-binding: t -*-
  ;;; Code:

  (eval-when-compile
    (require '+const))

  ;; Git
  ;; See `magit-define-global-key-bindings'
  (use-package magit
    :init (setq magit-diff-refine-hunk t)
    :config
    (when sys/win32p
      (setenv "GIT_ASKPASS" "git-gui--askpass"))

    ;; Unbind M-1, M-2, M-3, and M-4 shortcuts due to conflict with `ace-window'
    (unbind-key "M-1" magit-mode-map)
    (unbind-key "M-2" magit-mode-map)
    (unbind-key "M-3" magit-mode-map)
    (unbind-key "M-4" magit-mode-map)

    ;; Access Git forges from Magit
    (use-package forge
      :demand t
      :custom-face
      (forge-topic-label ((t (:inherit variable-pitch :height 0.9 :width condensed :weight regular :underline nil))))
      :init (setq forge-topic-list-columns
                  '(("#" 5 forge-topic-list-sort-by-number (:right-align t) number nil)
                    ("Title" 60 t nil title  nil)
                    ("State" 6 t nil state nil)
                    ("Updated" 10 t nil updated nil)))))

  ;; Display transient in child frame
  (when (childframe-completion-workable-p)
    (use-package transient-posframe
      :diminish
      :defines posframe-border-width
      :custom-face
      (transient-posframe ((t (:inherit tooltip))))
      (transient-posframe-border ((t (:inherit posframe-border :background unspecified))))
      :hook (after-init . transient-posframe-mode)
      :init
      (setq transient-posframe-border-width posframe-border-width
            transient-posframe-min-height nil
            transient-posframe-min-width 80
            transient-posframe-poshandler 'posframe-poshandler-frame-center
            transient-posframe-parameters '((left-fringe . 8)
                                            (right-fringe . 8)))
      :config
      (with-no-warnings
        (defun my-transient-posframe--hide ()
          "Hide transient posframe."
          (posframe-hide transient--buffer-name))
        (advice-add #'transient-posframe--delete :override #'my-transient-posframe--hide))))

  ;; Walk through git revisions of a file
  (use-package git-timemachine
    :custom-face
    (git-timemachine-minibuffer-author-face ((t (:inherit success :foreground unspecified))))
    (git-timemachine-minibuffer-detail-face ((t (:inherit warning :foreground unspecified))))
    :bind (:map vc-prefix-map
           ("t" . git-timemachine))
    :hook ((git-timemachine-mode . (lambda ()
                                     "Improve `git-timemachine' buffers."
                                     ;; Display different colors in mode-line
                                     (if (facep 'mode-line-active)
                                         (face-remap-add-relative 'mode-line-active 'custom-state)
                                       (face-remap-add-relative 'mode-line 'custom-state))

                                     ;; Highlight symbols in elisp
                                     (and (derived-mode-p 'emacs-lisp-mode)
                                          (fboundp 'highlight-defined-mode)
                                          (highlight-defined-mode t))

                                     ;; Display line numbers
                                     (and (derived-mode-p 'prog-mode 'yaml-mode)
                                          (fboundp 'display-line-numbers-mode)
                                          (display-line-numbers-mode t))))
           (before-revert . (lambda ()
                              (when (bound-and-true-p git-timemachine-mode)
                                (user-error "Cannot revert the timemachine buffer"))))))

  ;; Pop up last commit information of current line
  (use-package git-messenger
    :bind (:map vc-prefix-map
           ("p" . git-messenger:popup-message)
           :map git-messenger-map
           ("m" . git-messenger:copy-message))
    :init (setq git-messenger:show-detail t
                git-messenger:use-magit-popup t)
    :config
    (with-no-warnings
      (with-eval-after-load 'hydra
        (defhydra git-messenger-hydra (:color blue)
          ("s" git-messenger:popup-show "show")
          ("c" git-messenger:copy-commit-id "copy hash")
          ("m" git-messenger:copy-message "copy message")
          ("," (catch 'git-messenger-loop (git-messenger:show-parent)) "go parent")
          ("q" git-messenger:popup-close "quit")))

      (defun my-git-messenger:format-detail (vcs commit-id author message)
        (if (eq vcs 'git)
            (let ((date (git-messenger:commit-date commit-id))
                  (colon (propertize ":" 'face 'font-lock-comment-face)))
              (concat
               (format "%s%s %s \n%s%s %s\n%s  %s %s \n"
                       (propertize "Commit" 'face 'font-lock-keyword-face) colon
                       (propertize (substring commit-id 0 8) 'face 'font-lock-comment-face)
                       (propertize "Author" 'face 'font-lock-keyword-face) colon
                       (propertize author 'face 'font-lock-string-face)
                       (propertize "Date" 'face 'font-lock-keyword-face) colon
                       (propertize date 'face 'font-lock-string-face))
               (propertize (make-string 38 ?─) 'face 'font-lock-comment-face)
               message
               (propertize "\nPress q to quit" 'face '(:inherit (font-lock-comment-face italic)))))
          (git-messenger:format-detail vcs commit-id author message)))

      (defun my-git-messenger:popup-message ()
        "Popup message with `posframe', `pos-tip', `lv' or `message', and dispatch actions with `hydra'."
        (interactive)
        (let* ((hydra-hint-display-type 'message)
               (vcs (git-messenger:find-vcs))
               (file (buffer-file-name (buffer-base-buffer)))
               (line (line-number-at-pos))
               (commit-info (git-messenger:commit-info-at-line vcs file line))
               (commit-id (car commit-info))
               (author (cdr commit-info))
               (msg (git-messenger:commit-message vcs commit-id))
               (popuped-message (if (git-messenger:show-detail-p commit-id)
                                    (my-git-messenger:format-detail vcs commit-id author msg)
                                  (cl-case vcs
                                    (git msg)
                                    (svn (if (string= commit-id "-")
                                             msg
                                           (git-messenger:svn-message msg)))
                                    (hg msg)))))
          (setq git-messenger:vcs vcs
                git-messenger:last-message msg
                git-messenger:last-commit-id commit-id)
          (run-hook-with-args 'git-messenger:before-popup-hook popuped-message)
          (git-messenger-hydra/body)
          (cond ((and (fboundp 'posframe-workable-p) (posframe-workable-p))
                 (let ((buffer-name "*git-messenger*"))
                   (posframe-show buffer-name
                                  :string (concat (propertize "\n" 'face '(:height 0.3))
                                                  popuped-message
                                                  "\n"
                                                  (propertize "\n" 'face '(:height 0.3)))
                                  :left-fringe 8
                                  :right-fringe 8
                                  :max-width (round (* (frame-width) 0.62))
                                  :max-height (round (* (frame-height) 0.62))
                                  :internal-border-width 1
                                  :internal-border-color (face-background 'posframe-border nil t)
                                  :background-color (face-background 'tooltip nil t))
                   (unwind-protect
                       (push (read-event) unread-command-events)
                     (posframe-hide buffer-name))))
                ((and (fboundp 'pos-tip-show) (display-graphic-p))
                 (pos-tip-show popuped-message))
                ((fboundp 'lv-message)
                 (lv-message popuped-message)
                 (unwind-protect
                     (push (read-event) unread-command-events)
                   (lv-delete-window)))
                (t (message "%s" popuped-message)))
          (run-hook-with-args 'git-messenger:after-popup-hook popuped-message)))
      (advice-add #'git-messenger:popup-close :override #'ignore)
      (advice-add #'git-messenger:popup-message :override #'my-git-messenger:popup-message)))

  ;; Resolve diff3 conflicts
  (use-package smerge-mode
    :ensure nil
    :diminish
    :pretty-hydra
    ((:title (pretty-hydra-title "Smerge" 'octicon "nf-oct-diff")
      :color pink :quit-key ("q" "C-g"))
     ("Move"
      (("n" smerge-next "next")
       ("p" smerge-prev "previous"))
      "Keep"
      (("b" smerge-keep-base "base")
       ("u" smerge-keep-upper "upper")
       ("l" smerge-keep-lower "lower")
       ("a" smerge-keep-all "all")
       ("RET" smerge-keep-current "current")
       ("C-m" smerge-keep-current "current"))
      "Diff"
      (("<" smerge-diff-base-upper "upper/base")
       ("=" smerge-diff-upper-lower "upper/lower")
       (">" smerge-diff-base-lower "upper/lower")
       ("R" smerge-refine "refine")
       ("E" smerge-ediff "ediff"))
      "Other"
      (("C" smerge-combine-with-next "combine")
       ("r" smerge-resolve "resolve")
       ("k" smerge-kill-current "kill")
       ("ZZ" (lambda ()
               (interactive)
               (save-buffer)
               (bury-buffer))
        "Save and bury buffer" :exit t))))
    :bind (:map smerge-mode-map
           ("C-c m" . smerge-mode-hydra/body))
    :hook ((find-file . (lambda ()
                          (save-excursion
                            (goto-char (point-min))
                            (when (re-search-forward "^<<<<<<< " nil t)
                              (smerge-mode 1)))))
           (magit-diff-visit-file . (lambda ()
                                      (when smerge-mode
                                        (smerge-mode-hydra/body))))))

  ;; Open github/gitlab/bitbucket page
  (use-package browse-at-remote
    :bind (:map vc-prefix-map
           ("B" . browse-at-remote)))

  ;; Git configuration modes
  (use-package git-modes)

  (provide 'init-lang-vcs)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-vcs.el ends here

#+end_src
* etc/init-lang-web.el
#+begin_src emacs-lisp :tangle etc/init-lang-web.el
  ;; init-web.el --- Initialize web configurations.	-*- lexical-binding: t -*-
  ;;; Commentary:
  ;;
  ;; Web configurations.
  ;;

  ;;; Code:

  (eval-when-compile
    (require '+custom)
     (require 'init-package)
    )

  ;; eww
  (use-package eww
    :ensure nil
    :init
    ;; Install: npm install -g readability-cli
    (when (executable-find "readable")
      (setq eww-retrieve-command '("readable"))))

  ;; Webkit browser
  (use-package xwidget
    :ensure nil
    :if (featurep 'xwidget-internal)
    :bind (("C-c C-z w" . xwidget-webkit-browse-url)
           :map xwidget-webkit-mode-map
           ("h"         . xwidget-hydra/body))
    :pretty-hydra
    ((:title (pretty-hydra-title "Webkit" 'faicon "nf-fa-chrome" :face 'nerd-icons-blue)
      :color amaranth :quit-key ("q" "C-g"))
     ("Navigate"
      (("b" xwidget-webkit-back "back")
       ("f" xwidget-webkit-forward "forward")
       ("r" xwidget-webkit-reload "refresh")
       ("SPC" xwidget-webkit-scroll-up "scroll up")
       ("DEL" xwidget-webkit-scroll-down "scroll down")
       ("S-SPC" xwidget-webkit-scroll-down "scroll down"))
      "Zoom"
      (("+" xwidget-webkit-zoom-in "zoom in")
       ("=" xwidget-webkit-zoom-in "zoom in")
       ("-" xwidget-webkit-zoom-out "zoom out"))
      "Misc"
      (("g" xwidget-webkit-browse-url "browse url" :exit t)
       ("u" xwidget-webkit-current-url "show url" :exit t)
       ("v" xwwp-follow-link "follow link" :exit t)
       ("w" xwidget-webkit-current-url-message-kill "copy url" :exit t)
       ("?" describe-mode "help" :exit t)
       ("Q" quit-window "quit" :exit t)))))

  ;; CSS
  (use-package css-mode
    :init (setq css-indent-offset 2))

  ;; SCSS
  (use-package scss-mode
    :init (setq scss-compile-at-save nil))

  ;; LESS
  (unless (fboundp 'less-css-mode)
    (use-package less-css-mode))

  ;; JSON
  (unless (fboundp 'js-json-mode)
    (use-package json-mode
     :load-path "~/.emacs.d/extensions/json-mode"))

  ;; JavaScript
  (use-package js
    :init (setq js-indent-level 2))

  (use-package js2-mode
    :mode (("\\.js\\'" . js2-mode)
           ("\\.jsx\\'" . js2-jsx-mode))
    :interpreter (("node" . js2-mode)
                  ("node" . js2-jsx-mode))
    :hook ((js2-mode . js2-imenu-extras-mode)
           (js2-mode . js2-highlight-unused-variables-mode))
    :config
    ;; Use default keybindings for lsp
    (when suk-lsp
      (unbind-key "M-." js2-mode-map)))

  (use-package rjsx-mode
    :load-path "~/.emacs.d/extensions/rjsx-mode"
    :mode ("\\.js\\'")
    :config
    (add-hook 'rjsx-mode-hook (lambda()
                                (flycheck-add-mode 'javascript-eslint 'rjsx-mode)
                                (flycheck-select-checker 'javascript-eslint)))
    )

  ;; ¿ìËÙ±àÐ´ HTML ´úÂë
  (use-package emmet-mode
    :defer 3
    :init (setq emmet-expand-jsx-className? t)
    :hook (web-mode typescript-mode js-mode js2-mode rjsx-mode css-mode scss-mode sgml-mode))


  ;; Format HTML, CSS and JavaScript/JSON
  ;; Install: npm -g install prettier
  (when (executable-find "prettier")
    (use-package prettier
      :diminish
      :hook ((js-mode js2-mode css-mode sgml-mode web-mode) . prettier-mode)
      :init (setq prettier-pre-warm 'none)))
  (use-package prettier-js
    :ensure t
    :defer 3
    :hook ((css-mode web-mode typescript-mode js-mode json-mode js2-mode) . prettier-js-mode))



  ;; Major mode for editing web templates
  (use-package web-mode
    :mode "\\.\\(phtml\\|php\\|[gj]sp\\|as[cp]x\\|erb\\|djhtml\\|html?\\|hbs\\|ejs\\|jade\\|swig\\|tm?pl\\|vue\\)$"
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2))

  ;; Adds node_modules/.bin directory to `exec_path'
  (use-package add-node-modules-path
    :hook ((web-mode js-mode js2-mode) . add-node-modules-path))

  (use-package haml-mode)

  ;; REST
  (use-package restclient
    :mode ("\\.http\\'" . restclient-mode)
    :config
    (use-package restclient-test
      :diminish
      :hook (restclient-mode . restclient-test-mode)))

  (provide 'init-lang-web)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-web.el ends here

#+end_src
* etc/init-line-number.el
#+begin_src emacs-lisp :tangle etc/init-line-number.el
   ;;; init-line-number.el --- Configuration for display line number
   ;;; Commentary:
   ;;
   ;; Configuration for display line number
   ;;; Code:
  (require 'display-line-numbers)
  (global-display-line-numbers-mode 1)
  ;; Alternatively, to use it only in programming modes:
  ;;(add-hook 'prog-mode-hook #'display-line-numbers-mode)

  ;; Line numbers are not displayed when large files are used.
  (setq line-number-display-limit large-file-warning-threshold)
  (setq line-number-display-limit-width 1000)

  (dolist (hook (list
                 'c-mode-common-hook
                 'c-mode-hook
                 'emacs-lisp-mode-hook
                 'lisp-interaction-mode-hook
                 'lisp-mode-hook
                 'java-mode-hook
                 'asm-mode-hook
                 'haskell-mode-hook
                 'rcirc-mode-hook
                 'erc-mode-hook
                 'sh-mode-hook
                 'makefile-gmake-mode-hook
                 'python-mode-hook
                 'js-mode-hook
                 'html-mode-hook
                 'css-mode-hook
                 'tuareg-mode-hook
                 'go-mode-hook
                 'coffee-mode-hook
                 'qml-mode-hook
                 'markdown-mode-hook
                 'slime-repl-mode-hook
                 'package-menu-mode-hook
                 'cmake-mode-hook
                 'php-mode-hook
                 'web-mode-hook
                 'coffee-mode-hook
                 'sws-mode-hook
                 'jade-mode-hook
                 'vala-mode-hook
                 'rust-mode-hook
                 'ruby-mode-hook
                 'qmake-mode-hook
                 'lua-mode-hook
                 'swift-mode-hook
                 'llvm-mode-hook
                 'conf-toml-mode-hook
                 'nxml-mode-hook
                 'nim-mode-hook
                 'typescript-mode-hook
                 'elixir-mode-hook
                 'clojure-mode-hook
                 'dart-mode-hook
                 'zig-mode-hook

                 'c-ts-mode-hook
                 'c++-ts-mode-hook
                 'cmake-ts-mode-hook
                 'toml-ts-mode-hook
                 'css-ts-mode-hook
                 'js-ts-mode-hook
                 'json-ts-mode-hook
                 'python-ts-mode-hook
                 'bash-ts-mode-hook
                 'typescript-ts-mode-hook
                 'rust-ts-mode-hook
                 'java-ts-mode-hook
                 'kotlin-mode-hook
                 ))
    (add-hook hook (lambda () (display-line-numbers-mode))))

    (provide 'init-line-number)

    ;;; init-line-number.el ends here

#+end_src
* etc/init-markdown.el
#+begin_src emacs-lisp :tangle etc/init-markdown.el
  ;; init-markdown.el --- Initialize markdown configurations.	-*- lexical-binding: t -*-
  ;;; Commentary:
  ;;
  ;; Markdown configurations.
  ;;

  ;;; Code:

  (use-package markdown-mode
    :mode (("README\\.md\\'" . gfm-mode))
    :init
    (setq markdown-enable-wiki-links t
          markdown-italic-underscore t
          markdown-asymmetric-header t
          markdown-make-gfm-checkboxes-buttons t
          markdown-gfm-uppercase-checkbox t
          markdown-fontify-code-blocks-natively t

          markdown-content-type "application/xhtml+xml"
          markdown-css-paths '("https://cdn.jsdelivr.net/npm/github-markdown-css/github-markdown.min.css"
                               "https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/styles/github.min.css")
          markdown-xhtml-header-content "
  <meta name='viewport' content='width=device-width, initial-scale=1, shrink-to-fit=no'>
  <style>
  body {
    box-sizing: border-box;
    max-width: 740px;
    width: 100%;
    margin: 40px auto;
    padding: 0 10px;
  }
  </style>

  <link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/styles/default.min.css'>
  <script src='https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/highlight.min.js'></script>
  <script>
  document.addEventListener('DOMContentLoaded', () => {
    document.body.classList.add('markdown-body');
    document.querySelectorAll('pre code').forEach((code) => {
      if (code.className != 'mermaid') {
        hljs.highlightBlock(code);
      }
    });
  });
  </script>

  <script src='https://unpkg.com/mermaid@8.4.8/dist/mermaid.min.js'></script>
  <script>
  mermaid.initialize({
    theme: 'default',  // default, forest, dark, neutral
    startOnLoad: true
  });
  </script>
  "
          markdown-gfm-additional-languages "Mermaid")

    ;; `multimarkdown' is necessary for `highlight.js' and `mermaid.js'
    (when (executable-find "multimarkdown")
      (setq markdown-command "multimarkdown"))
    :config
    ;; Support `mermaid'
    (add-to-list 'markdown-code-lang-modes '("mermaid" . mermaid-mode))

    (with-no-warnings
      ;; Use `which-key' instead
      (advice-add #'markdown--command-map-prompt :override #'ignore)
      (advice-add #'markdown--style-map-prompt   :override #'ignore)

      ;; Preview with built-in webkit
      (defun my-markdown-export-and-preview (fn)
        "Preview with `xwidget' if applicable, otherwise with the default browser."
        (if (featurep 'xwidget-internal)
            (suk-webkit-browse-url (concat "file://" (markdown-export)) t)
          (funcall fn)))
      (advice-add #'markdown-export-and-preview :around #'my-markdown-export-and-preview))

    ;; Preview via `grip'
    ;; Install: pip install grip
    (use-package grip-mode
      :defines org-mode-map
      :bind (:map markdown-mode-command-map
             ("g" . grip-mode))
      :init
      (with-eval-after-load 'org
        (bind-key "C-c g" #'grip-mode org-mode-map))

      (setq grip-update-after-change nil)
      (when-let ((credential (auth-source-user-and-password "api.github.com")))
        (setq grip-github-user (car credential)
              grip-github-password (cadr credential))))

    ;; Table of contents
    (use-package markdown-toc
      :diminish
      :bind (:map markdown-mode-command-map
             ("r" . markdown-toc-generate-or-refresh-toc))
      :hook (markdown-mode . markdown-toc-mode)
      :init (setq markdown-toc-indentation-space 2
                  markdown-toc-header-toc-title "\n## Table of Contents"
                  markdown-toc-user-toc-structure-manipulation-fn 'cdr)
      :config
      (with-no-warnings
        (define-advice markdown-toc-generate-toc (:around (fn &rest args) lsp)
          "Generate or refresh toc after disabling lsp."
          (cond
           ((bound-and-true-p lsp-managed-mode)
            (lsp-managed-mode -1)
            (apply fn args)
            (lsp-managed-mode 1))
           ((bound-and-true-p eglot--manage-mode)
            (eglot--manage-mode -1)
            (apply fn args)
            (eglot--manage-mode 1))
           (t
            (apply fn args)))))))

  (provide 'init-markdown)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-markdown.el ends here

#+end_src
* etc/init-mode.el
#+begin_src emacs-lisp :tangle etc/init-mode.el
  ;;; init-mode.el --- File mode setup
  ;;; ### auto-mode-alist ###
  ;;; --- 绑定扩展名到特定的模式
  (defun add-to-alist (alist-var elt-cons &optional no-replace)
    "Add to the value of ALIST-VAR an element ELT-CONS if it isn't there yet.
  If an element with the same car as the car of ELT-CONS is already present,
  replace it with ELT-CONS unless NO-REPLACE is non-nil; if a matching
  element is not already present, add ELT-CONS to the front of the alist.
  The test for presence of the car of ELT-CONS is done with `equal'."
    (let ((existing-element (assoc (car elt-cons) (symbol-value alist-var))))
      (if existing-element
          (or no-replace
              (rplacd existing-element (cdr elt-cons)))
        (set alist-var (cons elt-cons (symbol-value alist-var)))))
    (symbol-value alist-var))

  (dolist (elt-cons '(
                      ("\\.markdown" . markdown-mode)
                      ("\\.md" . markdown-mode)
                      ("\\.coffee$" . coffee-mode)
                      ("\\.iced$" . coffee-mode)
                      ("Cakefile" . coffee-mode)
                      ("\\.stumpwmrc\\'" . lisp-mode)
                      ("\\.[hg]s\\'" . haskell-mode)
                      ("\\.hi\\'" . haskell-mode)
                      ("\\.hs-boot\\'" . haskell-mode)
                      ("\\.chs\\'" . haskell-mode)
                      ("\\.l[hg]s\\'" . literate-haskell-mode)
                      ("\\.inc\\'" . asm-mode)
                      ("\\.max\\'" . maxima-mode)
                      ("\\.org\\'" . org-mode)
                      ("\\.cron\\(tab\\)?\\'" . crontab-mode)
                      ("cron\\(tab\\)?\\." . crontab-mode)
                      ("\\.a90\\'" . intel-hex-mode)
                      ("\\.hex\\'" . intel-hex-mode)
                      ("\\.py$" . python-mode)
                      ("/\\.php_cs\\(?:\\.dist\\)?\\'" . php-mode)
                      ("\\.\\(?:php\\.inc\\|stub\\)\\'" . php-mode)
                      ("\\.\\(?:php[s345]?\\|phtml\\)\\'" . php-mode-maybe)
                      ("SConstruct". python-mode)
                      ("\\.ml\\'" . tuareg-mode)
                      ("\\.mli\\'" . tuareg-mode)
                      ("\\.mly\\'" . tuareg-mode)
                      ("\\.mll\\'" . tuareg-mode)
                      ("\\.mlp\\'" . tuareg-mode)
                      ("\\.qml\\'" . qml-mode)
                      ("\\.jl\\'" . lisp-mode)
                      ("\\.asdf\\'" . lisp-mode)
                      ("CMakeLists\\.txt\\'" . cmake-mode)
                      ("\\.cmake\\'" . cmake-mode)
                      ("\\.vue" . web-mode)
                      ("\\.wxml" . web-mode)
                      ("\\.phtml\\'" . web-mode)
                      ("\\.jsp\\'" . web-mode)
                      ("\\.as[cp]x\\'" . web-mode)
                      ("\\.erb\\'" . web-mode)
                      ("\\.mustache\\'" . web-mode)
                      ("\\.djhtml\\'" . web-mode)
                      ("\\.html?\\'" . web-mode)
                      ("\\.coffee\\'" . coffee-mode)
                      ("\\.coffee.erb\\'" . coffee-mode)
                      ("\\.js.erb\\'" . js-mode)
                      ("\\.iced\\'" . coffee-mode)
                      ("\\.css\\'" . css-mode)
                      ("\\.wxss\\'" . css-mode)
                      ("Cakefile\\'" . coffee-mode)
                      ("\\.styl$" . sws-mode)
                      ("\\.jade" . jade-mode)
                      ("\\.go$" . go-mode)
                      ("\\.vala$" . vala-mode)
                      ("\\.vapi$" . vala-mode)
                      ("\\.rs$" . rust-mode)
                      ("\\.pro$" . qmake-mode)
                      ("\\.js$" . js-mode)
                      ("\\.wxs$" . js-mode)
                      ("\\.jsx$" . web-mode)
                      ("\\.lua$" . lua-mode)
                      ("\\.swift$" . swift-mode)
                      ("\\.l$" . flex-mode)
                      ("\\.y$" . bison-mode)
                      ("\\.pdf$" . pdf-view-mode)
                      ("\\.ts$" . typescript-mode)
                      ("\\.tsx$" . typescript-mode)
                      ("\\.cpp$" . c++-mode)
                      ("\\.h$" . c++-mode)
                      ("\\.ll$" . llvm-mode)
                      ("\\.bc$" . hexl-mode)
                      ("\\.nim$" . nim-mode)
                      ("\\.nims$" . nim-mode)
                      ("\\.nimble$" . nim-mode)
                      ("\\.nim.cfg$" . nim-mode)
                      ("\\.exs$" . elixir-mode)
                      ("\\.json$" . json-mode)
                      ("\\.clj$" . clojure-mode)
                      ("\\.dart$" . dart-mode)
                      ("\\.zig$" . zig-mode)
                      ("\\.kt$" . kotlin-mode)
                      ))
    (add-to-alist 'auto-mode-alist elt-cons))

  (add-to-list 'interpreter-mode-alist '("coffee" . coffee-mode))


  ;;; Mode load.
  (autoload 'cmake-mode "cmake-mode")
  (autoload 'qml-mode "qml-mode")
  (autoload 'markdown-mode "init-markdown-mode")
  (autoload 'php-mode "php-mode")
  (autoload 'php-mode-maybe "php-mode")
  (autoload 'web-mode "init-web-mode")
  (autoload 'coffee-mode "coffee-mode")
  (autoload 'sws-mode "sws-mode")
  (autoload 'jade-mode "jade-mode")
  (autoload 'css-mode "init-css-mode")
  (autoload 'go-mode "init-golang")
  (autoload 'vala-mode "vala-mode")
  (autoload 'rust-mode "rust-mode")
  (autoload 'qmake-mode "qmake-mode")
  (autoload 'ruby-mode "init-ruby")
  (autoload 'python-mode "init-python")
  (autoload 'lua-mode "init-lua")
  (autoload 'swift-mode "swift-mode")
  (autoload 'haskell-mode "init-haskell")
  (autoload 'js-mode "init-web-mode")
  (autoload 'rjsx-mode "rjsx-mode")
  (autoload 'flex-mode "flex")
  (autoload 'bison-mode "bison")
  (autoload 'llvm-mode "llvm-mode")
  (autoload 'nim-mode "init-nim")
  (autoload 'typescript-mode "typescript-mode")
  (autoload 'elixir-mode "elixir-mode")
  (autoload 'json-mode "json-mode")
  (autoload 'clojure-mode "clojure-mode")
  (autoload 'dart-mode "dart-mode")
  (autoload 'zig-mode "zig-mode")
  (autoload 'kotlin-mode "kotlin-mode")

  ;;; ### Auto-fill ###
  ;;; --- 自动换行
  (setq default-fill-column 100)          ;默认显示 100列就换行
  (dolist (hook (list
                 'after-text-mode-hook
                 'message-mode-hook
                 ))
    (add-hook hook #'(lambda () (auto-fill-mode 1))))

  (provide 'init-mode)

  ;;; init-mode.el ends here

#+end_src
* etc/init-org.el
#+begin_src emacs-lisp :tangle etc/init-org.el
  ;;; Commentary:
  ;;
  ;; Org configurations.
  ;;

  ;;; Code:
  (eval-when-compile
    (require '+const)
    (require '+custom)
    (require 'init-package)
    )
  ;;(message org-files-directory)
  (require 'org)
  (setq org-agenda-diary-file (expand-file-name "diary.org" org-files-directory))
  ;; setup agenda files
  ;; org-mode manages the org-agenda-files variable automatically
  ;; using C-c [ and C-c ] to add and remove files respectively.
  ;; They can be files or directories.
  (setq org-agenda-files
        `(,(expand-file-name "gtd.org" org-files-directory)
          ,(expand-file-name "work.org" org-files-directory)
          ,(expand-file-name "finished.org" org-files-directory)
          ,(expand-file-name "cancel.org" org-files-directory)
          ,(expand-file-name "journal.org" org-files-directory)
          ,(expand-file-name "trash.org" org-files-directory)
          ;;,(expand-file-name "folder" org-files-directory)
          ))

  ;; To speed up startup, don't put to init section
  (setq org-modules nil)
  (setq org-startup-indented t)
  (setq org-startup-folded t)
  (setq org-ellipsis  "\t→ ")
  (setq org-pretty-entities t)
  (setq org-hide-emphasis-markers t)
  (setq org-hide-leading-stars nil)
  (setq org-startup-indented t)
  (setq org-blank-before-new-entry '((heading) (plain-list-item . auto)))
  (setq org-insert-heading-respect-content nil)
  (setq org-yank-adjusted-subtrees t)
  ;; Use the current window for C-c ' source editing
  (setq org-src-window-setup 'current-window)
  ;; Use the current window for indirect buffer display
  (setq org-indirect-buffer-display 'current-window)
  (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))
  (setq org-agenda-block-separator ?─)
  (setq org-agenda-time-grid
        '((daily today require-timed)
          (800 1000 1200 1400 1600 1800 2000)
          " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
  (setq org-agenda-current-time-string
        "⭠ now ─────────────────────────────────────────────────")
  (setq org-tags-column -80)
  (setq org-log-done 'time)
  (setq org-catch-invisible-edits 'smart)
  (setq org-startup-indented t)
  (setq org-pretty-entities nil)
  (setq org-hide-emphasis-markers t)
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Agenda
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (setq org-alphabetical-lists t)
  ;; Keep tasks with dates on the global todo lists
  (setq org-agenda-todo-ignore-with-date nil)
  ;; Keep tasks with deadlines on the global todo lists
  (setq org-agenda-todo-ignore-deadlines nil)
  ;; Keep tasks with scheduled dates on the global todo lists
  (setq org-agenda-todo-ignore-scheduled nil)
  ;; Keep tasks with timestamps on the global todo lists
  (setq org-agenda-todo-ignore-timestamp nil)
  ;; Remove completed deadline tasks from the agenda view
  (setq org-agenda-skip-deadline-if-done t)
  ;; Remove completed scheduled tasks from the agenda view
  (setq org-agenda-skip-scheduled-if-done t)
  ;; Remove completed items from search results
  (setq org-agenda-skip-timestamp-if-done t)
  (setq org-agenda-include-diary nil)
  (setq org-agenda-insert-diary-extract-time t)
  ;; Include agenda archive files when searching for things
  (setq org-agenda-text-search-extra-files (quote (agenda-archives)))
  ;; Show all future entries for repeating tasks
  (setq org-agenda-repeating-timestamp-show-all t)
  ;; Show all agenda dates - even if they are empty
  (setq org-agenda-show-all-dates t)
  ;; Sorting order for tasks on the agenda
  (setq org-agenda-sorting-strategy
        '((agenda habit-down time-up user-defined-up effort-up category-keep)
          (todo category-up effort-up)
          (tags category-up effort-up)
          (search category-up)))
  ;; Start the weekly agenda on Monday
  (setq org-agenda-start-on-weekday 1)
  (setq org-agenda-diary-file (expand-file-name "diary.org" org-files-directory))

  (setq org-agenda-persistent-filter t)
  ;; Do not dim blocked tasks
  (setq org-agenda-dim-blocked-tasks nil)
  ;; Compact the block agenda view
  (setq org-agenda-compact-blocks t)
  ;; capture template
  (setq org-default-notes-file (expand-file-name "notes.org" org-files-directory))
  ;; Capture templates for: TODO tasks, Notes,
  ;; appointments, phone calls, meetings, and (setq
  ;; org-protocol)
  (setq org-capture-templates
        '(
          ("t" "Todo"
           entry (file+headline (expand-file-name "gtd.org" org-files-directory) "Tasks")
           "* TODO %?\n%U\n%a\n"
           :clock-in t
           :clock-resume t)
          ("n" "note"
           entry (file (expand-file-name "notes.org" org-files-directory))
           "* %? :NOTE:\n%U\n%a\n"
           :clock-in t
           :clock-resume t)
          ("r" "respond"
           entry (file (expand-file-name "gtd.org" org-files-directory))
           "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n"
           :clock-in t
           :clock-resume t
           :immediate-finish t)
          ("j" "Journal"
           entry (file+datetree (expand-file-name "journal.org" org-files-directory))
           "* %?\nEntered on %U\n  %i\n  %a")
          ("w" "Review"
           entry (file (expand-file-name "gtd.org" org-files-directory))
           "* TODO Review %c\n%U\n"
           :immediate-finish t)
          ("m" "Meeting"
           entry (file (expand-file-name "gtd.org" org-files-directory))
           "* MEETING with %? :MEETING:\n%U"
           :clock-in t
           :clock-resume t)
          ("p" "Phone call"
           entry (file (expand-file-name "gtd.org" org-files-directory))
           "* PHONE %? :PHONE:\n%U"
           :clock-in t
           :clock-resume t)
          ("h" "Habit"
           entry (file (expand-file-name "gtd.org" org-files-directory))
           "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")
          ))
  ;; 设置打开某种文件类型
  (setq org-file-apps
        '((auto-mode . emacs)
          ("\\.mm\\'" . system)
          ("\\.x?html?\\'" . system)
          ("\\.pdf\\'" . system)))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; TODO
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (setq org-use-fast-todo-selection t)
  ;; ! 的含义是记录某项更改为状态的时间。我不把这个添加到完成的状态，是因为它们已
  ;; 经被记录了。

  ;; @ 符号表示带理由的提示，所以当切换到 WAITTING 时，Org 模式会问我为什么，并将
  ;; 这个添加到笔记中。
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n!)" "HANGUP(h)"  "|" "DONE(d!)" "CANCELLED(c@/!)")
          (sequence "⚑(T)" "🏴(N)" "❓(H)" "|" "✔(D)" "✘(C)")
          (sequence "WAITTING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING")))
  (setq org-todo-keyword-faces
        '(("TODO" :foreground "red" :weight bold)
          ("NEXT" :foreground "blue" :weight bold)
          ("DONE" :foreground "forest green" :weight bold)
          ("WAITTING" :foreground "orange" :weight bold)
          ("HOLD" :foreground "magenta" :weight bold)
          ("CANCELLED" :foreground "forest grey" :weight bold)
          ("ABORT" :foreground "forest yellow" :weight bold)
          ("HANGUP" :foreground "orange" :weight bold)
          ("❓" :foreground "orange" :weight bold)
          ("MEETING" :foreground "forest brown" :weight bold)
          ("PHONE" :foreground "forest pink" :weight bold) ))


  (setq org-priority-faces
        '((?A . error)
          (?B . warning)
          (?C . success)))

  ;; The triggers break down to the following rules:
  ;;   Moving a task to CANCELLED adds a CANCELLED tag
  ;;   Moving a task to WAITTING adds a WAITTING tag
  ;;   Moving a task to HOLD adds WAITTING and HOLD tags
  ;;   Moving a task to a done state removes WAITTING and HOLD tags
  ;;   Moving a task to TODO removes WAITTING, CANCELLED, and HOLD tags
  ;;   Moving a task to NEXT removes WAITTING, CANCELLED, and HOLD tags
  ;;   Moving a task to DONE removes WAITTING, CANCELLED, and HOLD tags
  (setq org-todo-state-tags-triggers
        '(("CANCELLED" ("CANCELLED" . t))
          ("WAITTING" ("WAITTING" . t))
          ("HOLD" ("WAITTING") ("HOLD" . t))
          ("DONE" ("WAITTING") ("HOLD"))
          ("TODO" ("WAITTING") ("CANCELLED") ("HOLD"))
          ("NEXT" ("WAITTING") ("CANCELLED") ("HOLD"))
          ("DONE" ("WAITTING") ("CANCELLED") ("HOLD"))))

  ;; Filetags look like this:
  ;; #+FILETAGS: NORANG @office
  ;; Allow setting single tags without the menu
  (setq org-fast-tag-selection-single-key (quote expert))
  (setq org-tags-match-list-sublevels t)
  ;; allows changing todo states with S-left and S-right skipping all of the
  ;; normal processing when entering or leaving a todo state. This cycles
  ;; through the todo states but skips setting timestamps and entering notes
  ;; which is very convenient when all you want to do is fix up the status of an
  ;; entry.
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
  (setq org-deadline-warning-days 30)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-log-state-notes-insert-after-drawers nil)
  ;; Sometimes I change tasks I'm clocking quickly
  ;; - this removes clocked tasks with 0:00 duration
  (setq org-clock-out-remove-zero-time-clocks t)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; EXPORTER
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
  ;; Inline images in HTML instead of producting links to the image
  (setq org-html-inline-images t)
  ;; Use (setq org-manual.css from the norang website for export document stylesheets)
  ;; (setq org-html-head-extra "<link rel=\"stylesheet\" href=\"org-manual.css\" type=\"text/css\" />")
  (setq org-html-head-include-default-style nil)
  ;; Do not generate internal css formatting for HTML exports
  (setq org-export-htmlize-output-type (quote css))
  ;; Increase default number of headings to export
  (setq org-export-headline-levels 6)
  (setq org-export-coding-system 'utf-8)
  (setq org-table-export-default-format "orgtbl-to-csv")
  ;; Do not generate internal css formatting for HTML exports
  (setq org-export-htmlize-output-type 'css)
  (setq org-export-with-timestamps nil)

  ;; Embed inline CSS read from a file.
  ;;;###autoload
  (defun my-org-inline-css-hook (exporter)
    "Insert custom inline css"
    (when (eq exporter 'html)
      (let* ((dir (ignore-errors (file-name-directory (buffer-file-name))))
             ;;(path (concat dir "style.css"))
             (path  org-css-file)
             (homestyle (and (or (null dir) (null (file-exists-p path)))
                             (not (null-or-unboundp 'my-org-inline-css-file))))
             (final (if homestyle my-org-inline-css-file path)))
        (if (file-exists-p final)
            (progn
              (setq-local org-html-head-include-default-style nil)
              (setq-local org-html-head
                          (concat
                           "<style type=\"text/css\">\n"
                           "<!--/*--><![CDATA[/*><!--*/\n"
                           (with-temp-buffer
                             (insert-file-contents final)
                             (buffer-string))
                           "/*]]>*/-->\n"
                           "</style>\n")))))))

  (add-hook 'org-export-before-processing-hook #'my-org-inline-css-hook)
  (add-hook 'org-mode-hook
            (lambda ()
              "Beautify org symbols."
              (when suk-prettify-org-symbols-alist
                (if prettify-symbols-alist
                    (push suk-prettify-org-symbols-alist prettify-symbols-alist)
                  (setq prettify-symbols-alist suk-prettify-org-symbols-alist)))
              (prettify-symbols-mode 1)
              (abbrev-mode 1)
              (org-indent-mode)
              (setq truncate-lines nil)
              (set-fill-column 70)
              (turn-on-font-lock)
              (load-org-font)
              ))

  (add-hook 'org-agenda-mode-hook
            (lambda() (hl-line-mode 1)))
  (add-hook 'org-clock-out-hook
            (lambda()
              (save-excursion
                (beginning-of-line 0)
                (org-remove-empty-drawer-at "LOGBOOK" (point)))))


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Refile settings
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Exclude DONE state tasks from refile targets
  ;;;###autoload
  (defun suk/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets."
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))

  ;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
  (setq org-refile-targets (quote ((nil :maxlevel . 9) (org-agenda-files :maxlevel . 9))))
  ;; Use full outline paths for refile targets
  (setq org-refile-use-outline-path t)
  (setq org-refile-target-verify-function 'suk/verify-refile-target)
  ;; Allow refile to create parent tasks with confirmation
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; Attachments
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (setq org-id-method (quote uuidgen))
  ;; Say you want to attach a file x.sql to your current task. Create
  ;; the file data in /tmp/x.sql and save it.
  ;;
  ;; Attach the file with C-c C-a a and enter the filename: x.sql.
  ;; This generates a unique ID for the task and adds the file in the
  ;; attachment directory.
  ;;
  ;; * Attachments                                     :ATTACH:
  ;;   :PROPERTIES:
  ;;   :Attachments: x.sql
  ;;   :ID:       f1d38e9a-ff70-4cc4-ab50-e8b58b2aaa7b
  ;;   :END:
  ;;
  ;; The attached file is saved in
  ;; data/f1/d38e9a-ff70-4cc4-ab50-e8b58b2aaa7b/. Where it goes
  ;; exactly isn't important for me 鈥?as long as it is saved and
  ;; retrievable easily. Org-mode copies the original file /tmp/x.sql
  ;; into the appropriate attachment directory.
  ;;
  ;; Tasks with attachments automatically get an ATTACH tag so you can
  ;; easily find tasks with attachments with a tag search.
  ;;
  ;; To open the attachment for a task use C-c C-a o. This prompts for
  ;; the attachment to open and TAB completion works here.
  ;;
  ;; The ID changes for every task header when a new ID is generated.
  ;;
  ;; It's possible to use named directories for attachments but I
  ;; haven't needed this functionality yet 鈥?it's there if you need
  ;; it.
  ;;
  ;; I store my org-mode attachments with my org files in a
  ;; subdirectory data. These are automatically added to my git
  ;; repository along with any other org-mode changes I've made.

  ;; 运行 Org Babel Tangle 命令：`M-x org-babel-tangle`。
  ;; 从 org 文件中生成 el 配置文件
  ;; 保存 user-emacs-directory(~/.emacs.d/) 文件下的 org 时，
  ;; 导出文件中 elisp 代码到文件中。
  (defun suk/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory)) ; ~/.emacs.d
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'after-save-hook #'suk/org-babel-tangle-config)))
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; 快捷键设置 keys are set in init-key.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; I use C-c c to start capture mode
  (global-set-key (kbd "C-c c") #'org-capture)
  ;; ;; (global-set-key (kbd "C-c C") 'org-capture)
  (global-set-key "\C-cl" #'org-store-link)
  (global-set-key "\C-ca" #'org-agenda)
  (global-set-key "\C-cb" #'org-iswitchb)

  ;; C-',  C-, is org-cycle-agenda-files keys
  ;; 新版的org-mode使用C-c C-, 替换了 <sTAB 提供的模板功能。

  ;; 会把字体的设定搞乱。
  ;; https://github.com/Fuco1/org-pretty-table
  ;;(require 'org-pretty-table)
  ;;(add-hook 'org-mode-hook (lambda () (org-pretty-table-mode)))

  ;; Prettify UI
  (use-package org-modern
    :hook ((org-mode . org-modern-mode)
           (org-agenda-finalize . org-modern-agenda)
           (org-modern-mode . (lambda ()
                                "Adapt `org-modern-mode'."
                                ;; Disable Prettify Symbols mode
                                (setq prettify-symbols-alist nil)
                                (prettify-symbols-mode -1)))))

  ;; Export text/html MIME emails
  (use-package org-mime
    :bind (:map message-mode-map
                ("C-c M-o" . org-mime-htmlize)
                :map org-mode-map
                ("C-c M-o" . org-mime-org-buffer-htmlize)))

  ;; covert to html
  (use-package htmlize
    :defer 2)

  (provide 'init-org)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-org.el ends here

#+end_src
* etc/init-package.el
#+begin_src emacs-lisp :tangle etc/init-package.el
;;; init-package.el --- Initialize package configurations.	-*- lexical-binding: t -*-
;;; Commentary:
;;
;; Emacs Package management configurations.
;;

;;; Code:

(eval-when-compile
  (require '+const)
  (require '+custom))

;; HACK: DO NOT copy package-selected-packages to init/custom file forcibly.
;; https://github.com/jwiegley/use-package/issues/383#issuecomment-247801751
(defun my-save-selected-packages (&optional value)
  "Set `package-selected-packages' to VALUE but don't save to `custom-file'."
  (when value
    (setq package-selected-packages value)))
(advice-add 'package--save-selected-packages :override #'my-save-selected-packages)

(require 'package)
;; gnu：
;; http://elpa.gnu.org/packages/
;; https://elpa.emacs-china.org/gnu/ http://1.15.88.122/gnu/
;; https://mirrors.163.com/elpa/gnu/
;; https://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/
;; melpa:
;; http://melpa.org/packages/
;; https://www.mirrorservice.org/sites/melpa.org/packages/
;; https://elpa.emacs-china.org/melpa/ http://1.15.88.122/melpa/
;; https://mirrors.163.com/elpa/melpa/
;; https://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/

;;(setq package-archives '(("melpa" . "http://melpa.org/packages/")
;;                         ("gnu" . "http://elpa.gnu.org/packages/")
;;                         ("nongnu" . "https://elpa.nongnu.org/nongnu/"))

(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives
   '("org" . "https://orgmode.org/elpa/"))
(add-to-list 'package-archives
             '("gnu" . " https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives
   '("nongnu" . "https://elpa.nongnu.org/nongnu/"))

;; (setq package-check-signature nil) ; 个别时候会出现签名校验失败

;; Initialize packages
;; (unless (bound-and-true-p package--initialized) ; To avoid warnings in 27
;;   (setq package-enable-at-startup nil)          ; To prevent initializing twice
;;   (package-initialize))

(unless (bound-and-true-p package--initialized)
  (package-initialize))

;; Setup `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; Should set before loading `use-package'
;; make use-package default behavior better
;; with `use-package-always-ensure' you won't need ":ensure t" all the time
;; with `use-package-always-defer' you won't need ":defer t" all the time
(setq use-package-always-ensure nil
      use-package-always-defer t
      use-package-enable-imenu-support t
      use-package-expand-minimally t)

(require 'use-package)

(provide 'init-package)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-package.el ends here

#+end_src
* etc/init-reader.el
#+begin_src emacs-lisp :tangle etc/init-reader.el
  ;; init-reader.el --- Initialize readers.	-*- lexical-binding: t -*-

  ;;; Commentary:
  ;;
  ;; PDF/EPUB/RSS readers.
  ;;

  ;;; Code:

  (eval-when-compile
    (require '+const))

  (bind-key "M-<f7>" #'suk-read-mode)

  ;; PDF reader
  (when (display-graphic-p)
    (use-package pdf-view
      :ensure pdf-tools
      :diminish (pdf-view-themed-minor-mode
                 pdf-view-midnight-minor-mode
                 pdf-view-printer-minor-mode)
      :defines pdf-annot-activate-created-annotations
      :hook ((pdf-tools-enabled . pdf-view-auto-slice-minor-mode)
             (pdf-tools-enabled . pdf-isearch-minor-mode))
      :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
      :magic ("%PDF" . pdf-view-mode)
      :bind (:map pdf-view-mode-map
             ("C-s" . isearch-forward))
      :init (setq pdf-view-use-scaling t
                  pdf-view-use-imagemagick nil
                  pdf-annot-activate-created-annotations t)
      :config
      ;; Activate the package
      (pdf-tools-install t nil t nil)

      ;; Recover last viewed position
      (use-package saveplace-pdf-view
        :when (ignore-errors (pdf-info-check-epdfinfo) t)
        :autoload (saveplace-pdf-view-find-file-advice saveplace-pdf-view-to-alist-advice)
        :init
        (advice-add 'save-place-find-file-hook :around #'saveplace-pdf-view-find-file-advice)
        (advice-add 'save-place-to-alist :around #'saveplace-pdf-view-to-alist-advice))))

  ;; Epub reader
  (use-package nov
    :mode ("\\.epub\\'" . nov-mode)
    :hook (nov-mode . my-nov-setup)
    :init
    (defun my-nov-setup ()
      "Setup `nov-mode' for better reading experience."
      (visual-line-mode 1)
      (suk-read-mode)
      (face-remap-add-relative 'variable-pitch :family "Times New Roman" :height 1.5))
    :config
    (with-no-warnings
      ;; WORKAROUND: errors while opening `nov' files with Unicode characters
      ;; @see https://github.com/wasamasa/nov.el/issues/63
      (defun my-nov-content-unique-identifier (content)
        "Return the the unique identifier for CONTENT."
        (let* ((name (nov-content-unique-identifier-name content))
               (selector (format "package>metadata>identifier[id='%s']"
                                 (regexp-quote name)))
               (id (car (esxml-node-children (esxml-query selector content)))))
          (and id (intern id))))
      (advice-add #'nov-content-unique-identifier :override #'my-nov-content-unique-identifier))

    ;; Fix encoding issue on Windows
    (when sys/win32p
      (setq process-coding-system-alist
            (cons `(,nov-unzip-program . (gbk . gbk))
                  process-coding-system-alist))))

  ;; Atom/RSS reader
  (use-package elfeed
    :pretty-hydra
    ((:title (pretty-hydra-title "Elfeed" 'faicon "nf-fa-rss_square" :face 'nerd-icons-orange)
      :color amaranth :quit-key ("q" "C-g"))
     ("Search"
      (("c" elfeed-db-compact "compact db")
       ("g" elfeed-search-update--force "refresh")
       ("G" elfeed-search-fetch "update")
       ("y" elfeed-search-yank "copy URL")
       ("+" elfeed-search-tag-all "tag all")
       ("-" elfeed-search-untag-all "untag all"))
      "Filter"
      (("l" elfeed-search-live-filter "live filter")
       ("s" elfeed-search-set-filter "set filter")
       ("*" (elfeed-search-set-filter "@6-months-ago +star") "starred")
       ("a" (elfeed-search-set-filter "@6-months-ago") "all")
       ("t" (elfeed-search-set-filter "@1-day-ago") "today"))
      "Article"
      (("b" elfeed-search-browse-url "browse")
       ("n" next-line "next")
       ("p" previous-line "previous")
       ("u" elfeed-search-tag-all-unread "mark unread")
       ("r" elfeed-search-untag-all-unread "mark read")
       ("RET" elfeed-search-show-entry "show"))))
    :bind (("C-x w" . elfeed)
           :map elfeed-search-mode-map
           ("?" . elfeed-hydra/body)
           :map elfeed-show-mode-map
           ("q" . delete-window))
    :hook (elfeed-show-mode . suk-read-mode)
    :init (setq url-queue-timeout 30
                elfeed-db-directory (locate-user-emacs-file ".elfeed")
                elfeed-show-entry-switch #'pop-to-buffer
                elfeed-show-entry-delete #'delete-window
                elfeed-feeds '(("https://planet.emacslife.com/atom.xml" planet emacslife)
                               ("http://www.masteringemacs.org/feed/" mastering)
                               ("https://oremacs.com/atom.xml" oremacs)
                               ("https://pinecast.com/feed/emacscast" emacscast)
                               ("https://emacstil.com/feed.xml" Emacs TIL)
                               ;; ("https://www.reddit.com/r/emacs.rss" reddit)
                               ))
    :config
    ;; Ignore db directory in recentf
    (push elfeed-db-directory recentf-exclude)

    ;; Add icons via tags
    (when (icons-displayable-p)
      (defun nerd-icon-for-tags (tags)
        "Generate Nerd Font icon based on tags.
    Returns default if no match."
        (cond ((member "youtube" tags)  (nerd-icons-faicon "nf-fa-youtube_play" :face '(:foreground "#FF0200")))
              ((member "instagram" tags) (nerd-icons-faicon "nf-fa-instagram" :face '(:foreground "#FF00B9")))
              ((or (member "emacs" tags) (member "emacslife" tags) (member "mastering" tags))
               (nerd-icons-sucicon "nf-custom-emacs" :face '(:foreground "#9A5BBE")))
              ((member "github" tags) (nerd-icons-faicon "nf-fa-github"))
              (t (nerd-icons-faicon "nf-fae-feedly" :face '(:foreground "#2AB24C")))))

      (defun lucius/elfeed-search-print-entry--better-default (entry)
        "Print ENTRY to the buffer."
        (let* ((date (elfeed-search-format-date (elfeed-entry-date entry)))
               (date-width (car (cdr elfeed-search-date-format)))
               (title (concat (or (elfeed-meta entry :title)
                                  (elfeed-entry-title entry) "")
                              ;; NOTE: insert " " for overlay to swallow
                              " "))
               (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
               (feed (elfeed-entry-feed entry))
               (feed-title (when feed (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
               (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
               (tags-str (mapconcat (lambda (s) (propertize s 'face 'elfeed-search-tag-face)) tags ","))
               (title-width (- (frame-width)
                               ;; (window-width (get-buffer-window (elfeed-search-buffer) t))
                               date-width elfeed-search-trailing-width))
               (title-column (elfeed-format-column
                              title (elfeed-clamp
                                     elfeed-search-title-min-width
                                     title-width
                                     elfeed-search-title-max-width) :left))

               ;; Title/Feed ALIGNMENT
               (align-to-feed-pixel (+ date-width
                                       (max elfeed-search-title-min-width
                                            (min title-width elfeed-search-title-max-width)))))
          (insert (propertize date 'face 'elfeed-search-date-face) " ")
          (insert (propertize title-column 'face title-faces 'kbd-help title))
          (put-text-property (1- (point)) (point) 'display `(space :align-to ,align-to-feed-pixel))
          ;; (when feed-title (insert " " (propertize feed-title 'face 'elfeed-search-feed-face) " "))
          (when feed-title
            (insert " " (concat (nerd-icon-for-tags tags) " ")
                    (propertize feed-title 'face 'elfeed-search-feed-face) " "))
          (when tags (insert "(" tags-str ")"))))

      (setq  elfeed-search-print-entry-function #'lucius/elfeed-search-print-entry--better-default))

    ;; Use xwidget if possible
    (with-no-warnings
      (defun my-elfeed-show-visit (&optional use-generic-p)
        "Visit the current entry in your browser using `browse-url'.
  If there is a prefix argument, visit the current entry in the
  browser defined by `browse-url-generic-program'."
        (interactive "P")
        (let ((link (elfeed-entry-link elfeed-show-entry)))
          (when link
            (message "Sent to browser: %s" link)
            (cond
             ((featurep 'xwidget-internal)
              (suk-webkit-browse-url link))
             (use-generic-p
              (browse-url-generic link))
             (t (browse-url link))))))
      (advice-add #'elfeed-show-visit :override #'my-elfeed-show-visit)

      (defun my-elfeed-search-browse-url (&optional use-generic-p)
        "Visit the current entry in your browser using `browse-url'.
  If there is a prefix argument, visit the current entry in the
  browser defined by `browse-url-generic-program'."
        (interactive "P")
        (let ((entries (elfeed-search-selected)))
          (cl-loop for entry in entries
                   do (elfeed-untag entry 'unread)
                   when (elfeed-entry-link entry)
                   do (cond
                       ((featurep 'xwidget-internal)
                        (suk-webkit-browse-url it t))
                       (use-generic-p
                        (browse-url-generic it))
                       (t (browse-url it))))
          (mapc #'elfeed-search-update-entry entries)
          (unless (or elfeed-search-remain-on-entry (use-region-p))
            (forward-line))))
      (advice-add #'elfeed-search-browse-url :override #'my-elfeed-search-browse-url)))

  ;; Another Atom/RSS reader
  (use-package newsticker
    :ensure nil
    :bind ("C-x W" . newsticker-show-news)
    :hook (newsticker-treeview-item-mode . suk-read-mode)
    :init (setq newsticker-url-list
                '(("Planet Emacslife" "https://planet.emacslife.com/atom.xml")
                  ("Mastering Emacs" "http://www.masteringemacs.org/feed/")
                  ("Oremacs" "https://oremacs.com/atom.xml")
                  ("EmacsCast" "https://pinecast.com/feed/emacscast")
                  ("Emacs TIL" "https://emacstil.com/feed.xml")
                  ;; ("Emacs Reddit" "https://www.reddit.com/r/emacs.rss")
                  )))

  (provide 'init-reader)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-reader.el ends here

#+end_src
* etc/init-recentf.el
#+begin_src emacs-lisp :tangle etc/init-recentf.el
  ;; Recentf
  (use-package recentf
    :ensure nil
    :defer 1
    :init
    (setq recentf-save-file (concat suk-emacs-var-dir "/recentf"))
    ;;(setq recentf-save-file "~/.emacs.d/var/recentf")
    ;;(add-hook 'after-init-hook #'recentf-mode)
    (setq recentf-max-saved-items 500)
    (setq recentf-max-saved-items 17)
    (recentf-mode)
    (recentf-track-opened-file)

    :config
    (add-to-list 'recentf-exclude (expand-file-name package-user-dir))
    (add-to-list 'recentf-exclude ".cache")
    (add-to-list 'recentf-exclude ".cask")
    (add-to-list 'recentf-exclude ".elfeed")
    (add-to-list 'recentf-exclude "bookmarks")
    (add-to-list 'recentf-exclude "cache")
    (add-to-list 'recentf-exclude "persp-confs")
    (add-to-list 'recentf-exclude "recentf")
    (add-to-list 'recentf-exclude "url")
    (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'")
    (defun suk/recentf-exclude-p (file)
      (let ((file-dir (file-truename (file-name-directory file))))
        (-any-p (lamdba (dir)
                        (string-prefix-p dir file-dir))
                (mapcar 'file-truename (list var package-user-dir)))))
    (add-to-list 'recentf-exclude #'suk/recentf-exclude-p)
    )

  (provide 'init-recentf)
#+end_src
* etc/init-search.el
#+begin_src emacs-lisp :tangle etc/init-recentf.el
  ;; init-search.el --- Initialize searchser configurations.	-*- lexical-binding: t -*-
  ;;; Commentary:
  ;;
  ;; Basic configuration.
  ;;

  ;;; Code:
  ;; Search tools

  (eval-when-compile
    (require 'init-package)
    )

  ;;;###autoload
  (defun github-code-search ()
    "Search code on github for a given language."
    (interactive)
    (let ((language (completing-read
                     "Language: "
                     '("Java" "C/C++" "Emacs Javascript" "Lisp"  "Python" "Rust")))
          (code (read-string "Code: ")))
      (browse-url
       (concat "https://github.com/search?l=" language
               "&type=code&q=" code))))

  ;;;###autoload
  (defun google-search-str (str)
    (browse-url
     (concat "https://www.google.com/search?q=" str)))

  ;;;###autoload
  (defun google-search ()
    "Google search region, if active, or ask for search string."
    (interactive)
    (if (region-active-p)
        (google-search-str
         (buffer-substring-no-properties (region-beginning)
                                         (region-end)))
      (google-search-str (read-from-minibuffer "Search: "))))


  ;; Writable `grep' buffer
  (use-package wgrep
    :init
    (setq wgrep-auto-save-buffer t
          wgrep-change-readonly-file t))

  ;; Search tool
  (use-package grep
    :ensure nil
    :autoload grep-apply-setting
    :init
    (when (executable-find "rg")
      (grep-apply-setting
       'grep-command "rg --color=auto --null -nH --no-heading -e ")
      (grep-apply-setting
       'grep-template "rg --color=auto --null --no-heading -g '!*/' -e <R> <D>")
      (grep-apply-setting
       'grep-find-command '("rg --color=auto --null -nH --no-heading -e ''" . 38))
      (grep-apply-setting
       'grep-find-template "rg --color=auto --null -nH --no-heading -e <R> <D>")))


  ;; Fast search tool `ripgrep'
  (use-package rg
    :hook (after-init . rg-enable-default-bindings)
    :bind (:map rg-global-map
                ("c" . rg-dwim-current-dir)
                ("f" . rg-dwim-current-file)
                ("m" . rg-menu))
    :init (setq rg-group-result t
                rg-show-columns t)
    :config
    (cl-pushnew '("tmpl" . "*.tmpl") rg-custom-type-aliases))



  (provide 'init-search)

#+end_src
* etc/init-sesion.el
#+begin_src emacs-lisp :tangle etc/init-session.el
  ;;; init-session.el --- Init for session save/restore
  ;;; Require
  (require 'auto-save)
  (require 'basic-toolkit)

  ;;; Code:

  (setq desktop-load-locked-desktop t) ; don't popup dialog ask user, load anyway
  (setq desktop-restore-frames nil)    ; don't restore any frame

  (defun emacs-session-restore ()
    "Restore emacs session."
    (interactive)
    (ignore-errors
      ;; Kill other windows.
      (delete-other-windows)
      ;; Kill unused buffers.
      (kill-unused-buffers)
      ;; Restore session.
      (desktop-read "~/.emacs.d/var/")
      ))

  (defun emacs-session-save (&optional arg)
    "Save emacs session."
    (interactive "p")
    (ignore-errors
      (if (equal arg 4)
          ;; Kill all buffers if with prefix argument.
          (mapc 'kill-buffer (buffer-list))
        ;; Kill unused buffers.
        (kill-unused-buffers)
        ;; Save all buffers before exit.
        (auto-save-buffers))
      ;; Save session.
      (make-directory "~/.emacs.d/var/" t)
      (desktop-save "~/.emacs.d/var/")
      ;; Exit emacs.
      (kill-emacs)))

  (provide 'init-session)

  ;;; init-session.el ends here

#+end_src
* etc/init-shell.el
#+begin_src emacs-lisp :tangle etc/init-shell.el
  ;; init-shell.el --- Initialize shell configurations.	-*- lexical-binding: t -*-
  ;;; Commentary:
  ;;
  ;; Shell configurations.
  ;;

  ;;; Code:

  (use-package shell
    :ensure nil
    :hook ((shell-mode . my-shell-mode-hook)
           (comint-output-filter-functions . comint-strip-ctrl-m))
    :init
    (setq system-uses-terminfo nil)

    (with-no-warnings
      (defun my-shell-simple-send (proc command)
        "Various PROC COMMANDs pre-processing before sending to shell."
        (cond
         ;; Checking for clear command and execute it.
         ((string-match "^[ \t]*clear[ \t]*$" command)
          (comint-send-string proc "\n")
          (erase-buffer))
         ;; Checking for man command and execute it.
         ((string-match "^[ \t]*man[ \t]*" command)
          (comint-send-string proc "\n")
          (setq command (replace-regexp-in-string "^[ \t]*man[ \t]*" "" command))
          (setq command (replace-regexp-in-string "[ \t]+$" "" command))
          ;;(message (format "command %s command" command))
          (funcall 'man command))
         ;; Send other commands to the default handler.
         (t (comint-simple-send proc command))))

      (defun my-shell-mode-hook ()
        "Shell mode customization."
        (local-set-key '[up] 'comint-previous-input)
        (local-set-key '[down] 'comint-next-input)
        (local-set-key '[(shift tab)] 'comint-next-matching-input-from-input)

        (ansi-color-for-comint-mode-on)
        (setq comint-input-sender 'my-shell-simple-send))))

  ;; ANSI & XTERM 256 color support
  (use-package xterm-color
    :defines (compilation-environment
              eshell-preoutput-filter-functions
              eshell-output-filter-functions)
    :functions (compilation-filter my-advice-compilation-filter)
    :init
    ;; For shell and interpreters
    (setenv "TERM" "xterm-256color")
    (setq comint-output-filter-functions
          (remove 'ansi-color-process-output comint-output-filter-functions))
    (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter)
    (add-hook 'shell-mode-hook
              (lambda ()
                ;; Disable font-locking to improve performance
                (font-lock-mode -1)
                ;; Prevent font-locking from being re-enabled
                (make-local-variable 'font-lock-function)
                (setq font-lock-function #'ignore)))

    ;; For eshell
    (with-eval-after-load 'esh-mode
      (add-hook 'eshell-before-prompt-hook
                (lambda ()
                  (setq xterm-color-preserve-properties t)))
      (add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
      (setq eshell-output-filter-functions
            (remove 'eshell-handle-ansi-color eshell-output-filter-functions)))

    ;; For compilation buffers
    (setq compilation-environment '("TERM=xterm-256color"))
    (defun my-advice-compilation-filter (f proc string)
      (funcall f proc
               (if (eq major-mode 'rg-mode) ; compatible with `rg'
                   string
                 (xterm-color-filter string))))
    (advice-add 'compilation-filter :around #'my-advice-compilation-filter)
    (advice-add 'gud-filter :around #'my-advice-compilation-filter))

  ;; Better terminal emulator
  ;; @see https://github.com/akermu/emacs-libvterm#installation
  (when (and module-file-suffix           ; dynamic module
             (executable-find "cmake")
             (executable-find "libtool")  ; libtool-bin
             (executable-find "make"))
    (use-package vterm
      :bind (:map vterm-mode-map
             ([f9] . (lambda ()
                       (interactive)
                       (and (fboundp 'shell-pop-toggle)
                            (shell-pop-toggle)))))
      :init (setq vterm-always-compile-module t))

    (use-package multi-vterm
      :bind ("C-<f9>" . multi-vterm)
      :custom (multi-vterm-buffer-name "vterm")
      :config
      (with-no-warnings
        ;; Use `pop-to-buffer' instead of `switch-to-buffer'
        (defun my-multi-vterm ()
          "Create new vterm buffer."
          (interactive)
          (let ((vterm-buffer (multi-vterm-get-buffer)))
            (setq multi-vterm-buffer-list
                  (nconc multi-vterm-buffer-list (list vterm-buffer)))
            (set-buffer vterm-buffer)
            (multi-vterm-internal)
            (pop-to-buffer vterm-buffer)))
        (advice-add #'multi-vterm :override #'my-multi-vterm))))

  ;; Shell Pop: leverage `popper'
  (with-no-warnings
    (defvar shell-pop--frame nil)
    (defvar shell-pop--window nil)

    (defun shell-pop--shell (&optional arg)
      "Run shell and return the buffer."
      (cond ((fboundp 'vterm) (vterm arg))
            (sys/win32p (eshell arg))
            (t (shell))))

    (defun shell-pop--hide-frame ()
      "Hide child frame and refocus in parent frame."
      (when (and (childframe-workable-p)
                 (frame-live-p shell-pop--frame)
                 (frame-visible-p shell-pop--frame))
        (make-frame-invisible shell-pop--frame)
        (select-frame-set-input-focus (frame-parent shell-pop--frame))
        (setq shell-pop--frame nil)))

    (defun shell-pop-toggle ()
      "Toggle shell."
      (interactive)
      (shell-pop--hide-frame)
      (if (window-live-p shell-pop--window)
          (progn
            (delete-window shell-pop--window)
            (setq shell-pop--window nil))
        (setq shell-pop--window
              (get-buffer-window (shell-pop--shell)))))
    (bind-keys ([f9]  . shell-pop-toggle)
               ("C-`" . shell-pop-toggle))

    (when (childframe-workable-p)
      (defun shell-pop-posframe-hidehandler (_)
        "Hidehandler used by `shell-pop-posframe-toggle'."
        (not (eq (selected-frame) shell-pop--frame)))

      (defun shell-pop-posframe-toggle ()
        "Toggle shell in child frame."
        (interactive)
        (let* ((buffer (shell-pop--shell))
               (window (get-buffer-window buffer)))
          ;; Hide window: for `popper'
          (when (window-live-p window)
            (delete-window window))

          (if (and (frame-live-p shell-pop--frame)
                   (frame-visible-p shell-pop--frame))
              (progn
                ;; Hide child frame and refocus in parent frame
                (make-frame-invisible shell-pop--frame)
                (select-frame-set-input-focus (frame-parent shell-pop--frame))
                (setq shell-pop--frame nil))
            (let ((width  (max 100 (round (* (frame-width) 0.62))))
                  (height (round (* (frame-height) 0.62))))
              ;; Shell pop in child frame
              (setq shell-pop--frame
                    (posframe-show
                     buffer
                     :poshandler #'posframe-poshandler-frame-center
                     :hidehandler #'shell-pop-posframe-hidehandler
                     :left-fringe 8
                     :right-fringe 8
                     :width width
                     :height height
                     :min-width width
                     :min-height height
                     :internal-border-width 3
                     :internal-border-color (face-background 'posframe-border nil t)
                     :background-color (face-background 'tooltip nil t)
                     :override-parameters '((cursor-type . t))
                     :respect-mode-line t
                     :accept-focus t))

              ;; Focus in child frame
              (select-frame-set-input-focus shell-pop--frame)

              (with-current-buffer buffer
                (setq-local cursor-type 'box) ; blink cursor
                (goto-char (point-max))
                (when (fboundp 'vterm-reset-cursor-point)
                  (vterm-reset-cursor-point)))))))
      (bind-key "C-`" #'shell-pop-posframe-toggle)))

  (provide 'init-shell)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-shell.el ends here

#+end_src
* etc/init-speedbar.el
#+begin_src emacs-lisp :tangle etc/init-speedbar.el
  ;;; init-speedbar.el --- Init speedbar
  ;;; Commentary:
  ;;
  ;; Init speedbar
  ;;

  ;;; Installation:
  ;;
  ;; Put init-speedbar.el to your load-path.
  ;; The load-path is usually ~/elisp/.
  ;; It's set in your ~/.emacs like this:
  ;; (add-to-list 'load-path (expand-file-name "~/elisp"))
  ;;
  ;; And the following to your ~/.emacs startup file.
  ;;
  ;; (require 'init-speedbar)
  ;;
  ;; No need more.

  ;;; Customize:
  ;;
  ;;
  ;;
  ;; All of the above can customize by:
  ;;      M-x customize-group RET init-speedbar RET
  ;;

  ;;; Change log:
  ;;
  ;; 2013/12/30
  ;;      * First released.
  ;;

  ;;; Acknowledgements:
  ;;
  ;;
  ;;

  ;;; TODO
  ;;
  ;;
  ;;

  ;;; Require

  (require 'speedbar)
  (require 'sr-speedbar)

  ;;; Code:

  (setq speedbar-show-unknown-files t)    ;显示文件
  (setq sr-speedbar-skip-other-window-p t)
  (setq sr-speedbar-right-side nil)
  (setq speedbar-buffers-key-map nil)     ;卸载一些按键
  (setq speedbar-file-key-map nil)
  (lazy-load-set-keys
   '(
     ;; 导航操作
     ("f" . speedbar-edit-line)             ;进入当前条目
     ("C-m" . speedbar-edit-line)           ;进入当前条目
     ("j" . speedbar-next)                  ;下一行
     ("k" . speedbar-prev)                  ;上一行
     ("n" . speedbar-forward-list)          ;下一条目
     ("p" . speedbar-backward-list)         ;上一条目
     ("u" . speedbar-forced-contract)       ;跳到上一级
     ("F" . speedbar-files)                 ;切换文件视图
     ("B" . speedbar-buffers)               ;切换缓存视图
     ("q" . sr-speedbar-toggle)             ;退出
     ;; 树操作
     ("x" . speedbar-expand-line)           ;展开当前行
     ("z" . speedbar-contract-line)         ;收缩当前行
     ("v" . speedbar-toggle-line-expansion) ;切换当前行的状态
     ;; 文件操作
     ("g" . speedbar-refresh)             ;刷新
     ("'" . speedbar-up-directory)        ;上一级目录
     ("i" . speedbar-item-info)           ;显示信息
     ("b" . speedbar-item-byte-compile)   ;编译
     ("l" . speedbar-item-load)           ;加载
     ("c" . speedbar-item-copy)           ;拷贝
     ("d" . speedbar-item-delete)         ;删除
     ("o" . speedbar-item-object-delete)  ;删除对象
     ("r" . speedbar-item-rename)         ;重命令
     ("m" . speedbar-create-directory)    ;创建目录
     ("K" . speedbar-buffer-kill-buffer)  ;关闭当前buffer
     )
   speedbar-key-map
   )

  (provide 'init-speedbar)

  ;;; init-speedbar.el ends here

#+end_src
* etc/init-string-inflection.el
#+begin_src emacs-lisp :tangle etc/init-string-inflection.el
  ;;; init-string-inflection.el --- Config for string-inflection.el
  ;;; Commentary:
  ;;
  ;; Config for string-inflection.el
  ;;

  ;;; Installation:
  ;;
  ;; Put init-string-inflection.el to your load-path.
  ;; The load-path is usually ~/elisp/.
  ;; It's set in your ~/.emacs like this:
  ;; (add-to-list 'load-path (expand-file-name "~/elisp"))
  ;;
  ;; And the following to your ~/.emacs startup file.
  ;;
  ;; (require 'init-string-inflection)
  ;;
  ;; No need more.

  ;;; Customize:
  ;;
  ;;
  ;;
  ;; All of the above can customize by:
  ;;      M-x customize-group RET init-string-inflection RET
  ;;

  ;;; Change log:
  ;;
  ;; 2018/06/12
  ;;      * First released.
  ;;

  ;;; Acknowledgements:
  ;;
  ;;
  ;;

  ;;; TODO
  ;;
  ;;
  ;;

  ;;; Require
  (require 'string-inflection)

  ;;; Code:

  (defvar one-key-string-inflection-alist nil
    "The `one-key' menu alist for DIRECTORY.")

  (setq one-key-string-inflection-alist
        '(
          (("c" . "FooBar") . (lambda () (interactive) (string-inflection-camelcase)))
          (("l" . "fooBar") . (lambda () (interactive) (string-inflection-lower-camelcase)))
          (("_" . "foo_bar") . (lambda () (interactive) (string-inflection-underscore)))
          (("u" . "FOO_BAR") . (lambda () (interactive) (string-inflection-upcase)))
          (("k" . "foo-bar") . (lambda () (interactive) (string-inflection-kebab-case)))
          (("t" . "foo_bar <=> FooBar") . (lambda () (interactive) (string-inflection-toggle)))
          ))

  (defun one-key-string-inflection ()
    "The `one-key' menu for DIRECTORY."
    (interactive)
    (one-key-menu "STRING INFLECTION" one-key-string-inflection-alist t))

  (provide 'init-string-inflection)

  ;;; init-string-inflection.el ends here

#+end_src
* etc/init-sudo.el
#+begin_src emacs-lisp :tangle etc/init-sudo.el
  ;;; init-sudo.el --- sudo .	-*- lexical-binding: t no-byte-compile: t; -*-
  ;;; Commentary:
  ;;
  ;; sudo setting
  ;;

  ;;; Code:

  (eval-when-compile
    (require '+const)
    (require '+custom))

  (when sys/linuxp
    (progn
      ;; =========================================================
      ;; 普通用户调用root权限写文件
      ;; ---------------------------------------------------------
          ;;;###autoload
      (defun suk/sudo-edit (&optional arg)
        (interactive "P")
        (if (or arg (not buffer-file-name))
            (find-file (concat "/sudo:root@localhost:"
                               (ido-read-file-name "Find file(as root): ")))
          (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))
          )
        )
      ;; ---------------------------------------------------------
          ;;;###autoload
      (defadvice ido-find-file (after suk/sudo-find-file activate)
        "Find file as root if necessary."
        (unless (and buffer-file-name
                     (file-writable-p buffer-file-name))
          (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
      ;; ---------------------------------------------------------
          ;;;###autoload
      (defun suk/sudo-find-file (file-name)
        "Like find file, but opens the file as root."
        (interactive "Find File for sudo-edit: ")
        (let ((tramp-file-name
               (concat "/sudo::"
                       (expand-file-name file-name)
                       )
               )
              )
          (find-file tramp-file-name)
          )
        )

      ;; ---------------------------------------------------------
          ;;;###autoload
      (defun suk/sudo-save ()
        (interactive)
        (if (not buffer-file-name)
                                          ; true condition
            (write-file (concat "/sudo:root@localhost:"
                                (ido-read-file-name "File:")
                                )
                        )
                                          ; false condition
          (write-file (concat "/sudo:root@localhost:" buffer-file-name))
          )
        )
      ;; Just hook on `find-file-hook', don't hook `dired-mode-hook', it's unnecessary.
      (add-hook 'find-file-hook
                #'(lambda ()
                    (require 'auto-sudoedit)
                    (auto-sudoedit)))         ;默认打开忽略模式
      )

    (defun suk/sudo-actions-one-key ()
      (interactive)
      (require 'one-key)
      (one-key-create-menu
       "SUDO ACTION"
       '(
         (("s" . "Sudo Save") . suk/sudo-save)
         (("f" . "Sudo Find") . suk/sudo-find-file)
         (("e" . "Sudo edit") . suk/sudo-edit)
         )
       t)
      )

    )

  ;; ---------------------------------------------------------
  ;;emacs sudo编辑远端文件由 jay 发表于 on 六月 20日, 2011我在之前的一篇
  ;;文章里提到过在Emacs下使用sudo的方法。这个解决了我很多本地编辑的问题。
  ;;但是我还是抛不开vi，因为一直没有解决服务器上需要sudo才有权限的文件编
  ;;辑问题。现实中这是一个很普遍的现象，就是在服务器上关闭了root或者其他
  ;;用户的ssh登陆权限，是通过一般用户登陆以后通过sudo等方式获得权限后才能
  ;;进行进一步的文件编辑。而如果直接使用sudo，用比如
  ;;/sudo:user@host:filepath的方式来打开文件，Emacs会报错说这是一个远端文
  ;;件，不能使用sudo来进行操作。就因为这提示，导致我一直以来对于这样的情
  ;;况只能乖乖地开个shell跑到服务器上面去用vi编辑，编辑过程中的各种不爽在
  ;;此不表…… 不过当最终忍受不住这种只能用vi的寂寞后，终于下定决心看一下
  ;;tramp的手册，结果很好，发现了这么一章内容――Connecting to a remote
  ;;host using multiple hops，原来tramp是可以通过设置代理的方式来编辑那些
  ;;无法直接访问到的文件的。代理可以是各种Inline method，也可以是Gateway
  ;;method。所以通过ssh做跳板再sudo是完全可行的。设置的格式是(host user
  ;;proxy)，其中proxy可以使用%u和%h来通配输入的用户名和主机名。详细情况感
  ;;兴趣的童鞋可以细看手册，这儿就只贴出满足我的需求的代码了:
  ;;
  ;; 跳板：localhost -> machine1.abc.def.edu -> machine2.abc.def.edu
                                          ;(add-to-list 'tramp-default-proxies-alist
                                          ;             '(nil "\\`user\\'" "/ssh:%h:")
                                          ;)
                                          ;
                                          ;(add-to-list 'tramp-default-proxies-alist
                                          ;'("machine2.abc.def.edu"
                                          ;  nil
                                          ;  "/ssh:myname@machine1.abc.def.edu:"))
  ;; 经过这样的设置，就可以直接使用 /sudo:user@host:filepath 来编辑那些远端
  ;; 需要sudo的文件了。所以，泡杯茶，扔掉vi吧 :)
  ;; ---------------------------------------------------------
  ;; User Option: tramp-default-proxies-alist
  ;; tramp-default-proxies-alist specifies proxy hosts to pass through.
  ;; This variable is list of triples consisting of (host user proxy).
  ;;
  ;; The first match is the proxy host through which passes the file name
  ;; and the target host matching user@host. host and user are
  ;; regular expressions or nil, interpreted as a regular expression
  ;; which always matches.
  ;;
  ;; proxy is a literal TRAMP file name whose local name part is ignored,
  ;; and the method and user name parts are optional.
  ;;
  ;; The method must be an inline or gateway method (see Inline methods, see Gateway methods).
  ;; If proxy is nil, no additional hop is required reaching user@host.
  ;;
  ;; For example, to pass through the host ‘bastion.your.domain’ as user ‘bird’
  ;; to reach remote hosts outside the local domain:
  ;;
  ;; (add-to-list 'tramp-default-proxies-alist
  ;;              '("\\." nil "/ssh:bird@bastion.your.domain:"))
  ;; (add-to-list 'tramp-default-proxies-alist
  ;;              '("\\`your\\.domain\\'" nil nil))
  ;; Note: add-to-list adds elements at the beginning of a list.
  ;;       Therefore, most relevant rules must come last in the list.
  ;;
  ;; Proxy hosts can be cascaded in the alist. If there is another host called ‘jump.your.domain’,
  ;; which is the only host allowed to connect to ‘bastion.your.domain’, then:
  ;;
  ;; (add-to-list 'tramp-default-proxies-alist
  ;;              '("\\`bastion\\.your\\.domain\\'"
  ;;                "\\`bird\\'"
  ;;                "/ssh:jump.your.domain:"))
  ;; proxy can take patterns %h or %u for host or user respectively.
  ;;
  ;; To login as ‘root’ on remote hosts in the domain ‘your.domain’,
  ;; but login as ‘root’ is disabled for non-local access, then use this alist entry:
  ;;
  ;; (add-to-list 'tramp-default-proxies-alist
  ;;              '("\\.your\\.domain\\'" "\\`root\\'" "/ssh:%h:"))
  ;; Opening /sudo:randomhost.your.domain: first connects to ‘randomhost.your.domain’
  ;; via ssh under your account name, and then perform sudo -u root on that host.
  ;;
  ;; It is key for the sudo method in the above example to be applied on the host after reaching it and not on the local host.
  ;;
  ;; host, user and proxy can also take Lisp forms. These forms when evaluated must return either a string or nil.
  ;;
  ;; To generalize (from the previous example):
  ;; For all hosts, except my local one, first connect via ssh, and then apply sudo -u root:
  ;;
  ;; (add-to-list 'tramp-default-proxies-alist
  ;;              '(nil "\\`root\\'" "/ssh:%h:"))
  ;; (add-to-list 'tramp-default-proxies-alist
  ;;              '((regexp-quote (system-name)) nil nil))
  ;; The above configuration allows TRAMP connection as ‘root’ to remote Ubuntu hosts.
  ;;
  ;; tramp-default-proxies-alist is also used for passing through firewalls or proxy servers.
  ;;
  ;; For example, the local host ‘proxy.your.domain’ on port 3128 serves as HTTP proxy
  ;; to the outer world. User has access rights to another proxy server on ‘host.other.domain’.1 Then the configuration is:
  ;;
  ;; (add-to-list 'tramp-default-proxies-alist
  ;;              '("\\`host\\.other\\.domain\\'" nil
  ;;              "/tunnel:proxy.your.domain#3128:"))
  ;; Gateway methods in a multiple hop chain can be declared only as the first hop.
  ;;
  ;; Passing through hops involves dealing with restricted shells, such as rbash.
  ;; If TRAMP is made aware, then it would use them for proxies only.
  ;; ---------------------------------------------------------
  ;; Inline methods
  ;;
  ;; Inline methods use the same login connection to transfer file contents.
  ;; Inline methods are quick and easy for small files. They depend on
  ;; the availability of suitable encoding and decoding programs on the remote host.
  ;; For local source and destination, TRAMP may use built-in equivalents of
  ;; such programs in Emacs.
  ;;
  ;; Inline methods can work in situations where an external transfer program
  ;; is unavailable. Inline methods also work when transferring files between
  ;; different user identities on the same host.
  ;;
  ;; TRAMP checks the remote host for the availability and usability of
  ;; mimencode (part of the metamail package) or uuencode. TRAMP uses
  ;; the first reliable command it finds. TRAMP’s search path can be customized,
  ;; see Remote programs.
  ;;
  ;; In case both mimencode and uuencode are unavailable, TRAMP first transfers
  ;; a small Perl program to the remote host, and then tries that program
  ;; for encoding and decoding.
  ;;
  ;; To increase transfer speeds for large text files, use compression before encoding.
  ;; The variable tramp-inline-compress-start-size specifies the file size for
  ;; such optimization.
  ;;
  ;; rsh
  ;;     rsh is an option for connecting to hosts within local networks
  ;;     since rsh is not as secure as other methods.
  ;;
  ;; ssh
  ;;     ssh is a more secure option than others to connect to a remote host.
  ;;
  ;;     ssh can also take extra parameters as port numbers. For example,
  ;;     a host on port 42 is specified as host#42 (the real host name, a hash sign, then a port number).
  ;;     It is the same as passing -p 42 to the ssh command.
  ;;
  ;; telnet
  ;;     Connecting to a remote host with telnet is as insecure as the rsh method.
  ;;
  ;; su
  ;;     Instead of connecting to a remote host, su program allows editing as
  ;;     another user. The host can be either ‘localhost’ or the host returned
  ;;     by the function (system-name). See Multi-hops for an exception to this behavior.
  ;;
  ;; sudo
  ;;     Similar to su method, sudo uses sudo. sudo must have sufficient rights to start a shell.
  ;;
  ;; sshx
  ;;     Works like ssh but without the extra authentication prompts.
  ;;     sshx uses ‘ssh -t -t host -l user /bin/sh’ to open a connection
  ;;     with a “standard” login shell.
  ;;
  ;;     Note that sshx does not bypass authentication questions.
  ;;     For example, if the host key of the remote host is not known,
  ;;     sshx will still ask “Are you sure you want to continue connecting?”.
  ;;     TRAMP cannot handle such questions.
  ;;     Connections will have to be setup where logins can proceed without such questions.
  ;;
  ;;     sshx is useful for Windows users when ssh triggers an error about allocating a pseudo tty.
  ;;     This happens due to missing shell prompts that confuses TRAMP.
  ;;
  ;;     sshx supports the ‘-p’ argument.
  ;;
  ;; krlogin
  ;;     This method is also similar to ssh. It uses the krlogin -x command only for remote host login.
  ;;
  ;; ksu
  ;;     This is another method from the Kerberos suite. It behaves like su.
  ;;
  ;; plink
  ;;     plink method is for Windows users with the PuTTY implementation of SSH.
  ;;     It uses ‘plink -ssh’ to log in to the remote host.
  ;;
  ;;     Check the ‘Share SSH connections if possible’ control for that session.
  ;;
  ;;     plink method supports the ‘-P’ argument.
  ;;
  ;; plinkx
  ;;     Another method using PuTTY on Windows with session names instead of host names.
  ;;     plinkx calls ‘plink -load session -t’. User names and port numbers must be defined in the session.
  ;;
  ;;     Check the ‘Share SSH connections if possible’ control for that session.
  ;; ---------------------------------------------------------
  ;; Gateway methods
  ;;
  ;; Gateway methods are for proxy host declarations (see Multi-hops) so as to pass through
  ;; firewalls and proxy servers. They are not like the other methods that declare direct
  ;; connections to a remote host.
  ;;
  ;; A gateway method always comes with a port setting. TRAMP targets the port number with
  ;; the gateway method localhost#random_port from where the firewall or proxy server is accessed.
  ;;
  ;; Gateway methods support user name and password declarations for authenticating the corresponding
  ;; firewall or proxy server. Such authentication can be passed through only if granted access
  ;; by system administrators.
  ;;
  ;; tunnel
  ;; This method implements an HTTP tunnel via the CONNECT command (conforming to RFC 2616, 2817 specifications).
  ;; Proxy servers using HTTP version 1.1 or later protocol support this command.
  ;;
  ;; For authentication, this protocol uses only Basic Authentication (see RFC 2617).
  ;; When no port number is specified, this protocol defaults to 8080.
  ;;
  ;; socks
  ;; The socks method connects to SOCKSv5 servers (see RFC 1928) and supports
  ;; Username/Password Authentication.
  ;;
  ;; The default port number for the socks server is 1080, if not specified otherwise.

  (provide 'init-sudo)
  ;;; init-sudo.el ends here

#+end_src
* etc/init-translate.el
#+begin_src emacs-lisp :tangle etc/init-translate.el
  ;; init-translate.el --- Initialize translation ultilities.	-*- lexical-binding: t -*-
  ;;; Commentary:
  ;;
  ;; Some translation Utilities.
  ;;

  ;;; Code:

  (eval-when-compile
    (require 'init-package))

  (require 'sdcv)
  (setq sdcv-say-word-p t)                ;say word after search

  (setq sdcv-dictionary-data-dir
        (concat suk-emacs-root-dir "/share/sdcv-dict")) ;设置星际译王本地词典的目录

  (setq sdcv-dictionary-simple-list    ;星际译王屏幕取词词典, 简单, 快速
        '("懒虫简明英汉词典"
          "懒虫简明汉英词典"
          "KDic11万英汉词典"))

  (setq sdcv-dictionary-complete-list     ;星际译王的词典, 完全, 详细
        '(
          "懒虫简明英汉词典"
          "英汉汉英专业词典"
          "XDICT英汉辞典"
          "stardict1.3英汉辞典"
          "WordNet"
          "XDICT汉英辞典"
          "Jargon"
          "懒虫简明汉英词典"
          "FOLDOC"
          "新世纪英汉科技大词典"
          "KDic11万英汉词典"
          "朗道汉英字典5.0"
          "CDICT5英汉辞典"
          "新世纪汉英科技大词典"
          "牛津英汉双解美化版"
          "21世纪双语科技词典"
          "quick_eng-zh_CN"
          ))


  ;; 谷歌翻译，
  (use-package google-translate
    ;;  :disabled
    :ensure t
    :defer 2
    :config (setq google-translate--tkk-url "http://translate.google.com/"
                  google-translate-base-url "http://translate.google.com/translate\_a/single"
                  google-translate-listen-url "https://translate.google.com/translate\_tts"
                  google-translate-default-target-language "zh-CN"
                  google-translate-default-source-language "en")
    (setq-default google-translate-enable-ido-completion t)
    :bind(
          ;; 配置快捷键
          ("C-x t s" . google-translate-at-point)
          ("C-x t q" . google-translate-query-translate)
          ("C-x t S" . google-translate-smooth-translate)
    ))
  ;; A multi dictionaries interface
  (use-package fanyi
    :bind (("C-c d f" . fanyi-dwim)
           ("C-c d d" . fanyi-dwim2)
           ("C-c d h" . fanyi-from-history))
    :custom (fanyi-providers '(fanyi-haici-provider fanyi-longman-provider))

    (use-package go-translate
      :bind (("C-c d g" . gts-do-translate))
      :init (setq gts-translate-list '(("en" "zh") ("zh" "en")))))

  ;; Youdao Dictionay
  (use-package youdao-dictionary
    :defer 2
    :ensure t
    :bind (
          ("C-c y"   . my-youdao-dictionary-search-at-point)
           ("C-c d Y" . youdao-dictionary-search-async)
           ("C-c d y" . youdao-dictionary-search-at-point)
           ;;("C-x y Y" . youdao-dictionary-search-at-point-tooltip)
           ;;("C-c d p" . 'youdao-dictionary-search-at-point-posframe)
           ;;("C-c d v" . 'youdao-dictionary-play-voice-at-point)
           ("C-c d r" . 'youdao-dictionary-search-and-replace)
           ("C-c d i" . 'youdao-dictionary-search-from-input)
           :map youdao-dictionary-mode-map
           ("h"       . my-youdao-dictionary-help)
           ("?"       . my-youdao-dictionary-help)
    :init
    (setq url-automatic-caching t)
    (setq youdao-dictionary-use-chinese-word-segmentation t) ; 中文分词
    :config
    ;; Cache documents
    (setq url-automatic-caching t)
    (which-key-add-key-based-replacements "C-c d" "有道翻译")
    ;; Enable Chinese word segmentation support (支持中文分词)
    (with-no-warnings
      (with-eval-after-load 'hydra
        (defhydra youdao-dictionary-hydra (:color blue)
          ("p" youdao-dictionary-play-voice-of-current-word "play voice of current word")
          ("y" youdao-dictionary-play-voice-at-point "play voice at point")
          ("q" quit-window "quit")
          ("C-g" nil nil)
          ("h" nil nil)
          ("?" nil nil))
        (defun my-youdao-dictionary-help ()
          "Show help in `hydra'."
          (interactive)
          (let ((hydra-hint-display-type 'message))
            (youdao-dictionary-hydra/body))))

      (defun my-youdao-dictionary-search-at-point ()
        "Search word at point and display result with `posframe', `pos-tip' or buffer."
        (interactive)
        (if (posframe-workable-p)
            (youdao-dictionary-search-at-point-posframe)
          (youdao-dictionary-search-at-point)))

      (defun my-youdao-dictionary--posframe-tip (string)
        "Show STRING using `posframe-show'."
        (unless (posframe-workable-p)
          (error "Posframe not workable"))

        (if-let ((word (youdao-dictionary--region-or-word)))
            (progn
              (with-current-buffer (get-buffer-create youdao-dictionary-buffer-name)
                (let ((inhibit-read-only t))
                  (erase-buffer)
                  (youdao-dictionary-mode)
                  (insert string)
                  (set (make-local-variable 'youdao-dictionary-current-buffer-word) word)))
              (posframe-show
               youdao-dictionary-buffer-name
               :position (point)
               :left-fringe 8
               :right-fringe 8
               :max-width (/ (frame-width) 2)
               :max-height (/ (frame-height) 2)
               :background-color (face-background 'tooltip nil t)
               :internal-border-color (face-background 'posframe-border nil t)
               :internal-border-width 1)
              (unwind-protect
                  (push (read-event) unread-command-events)
                (progn
                  (posframe-hide youdao-dictionary-buffer-name)
                  (other-frame 0)))
              (message "Nothing to look up"))))
      (advice-add #'youdao-dictionary--posframe-tip
                  :override #'my-youdao-dictionary--posframe-tip)))

  (provide 'init-translate)

#+end_src
* etc/init-treemacs.el
#+begin_src emacs-lisp :tangle etc/init-treemacs.el
  ;; init-treemacs.el --- Initialize treemacs.	-*- lexical-binding: t -*-

  ;;; Commentary:
  ;;
  ;; Treemacs: A tree layout file explorer.
  ;;

  ;;; Code:

  (eval-when-compile
    (require '+custom))



  ;; A tree layout file explorer
  (use-package treemacs
    :commands (treemacs-follow-mode
               treemacs-filewatch-mode
               treemacs-git-mode)
    :custom-face
    (cfrs-border-color ((t (:inherit posframe-border))))
    :bind (([f8]        . treemacs)
           ("M-0"       . treemacs-select-window)
           ("C-x t 1"   . treemacs-delete-other-windows)
           ("C-x t t"   . treemacs)
           ("C-x t b"   . treemacs-bookmark)
           ("C-x t C-t" . treemacs-find-file)
           ("C-x t M-t" . treemacs-find-tag)
           :map treemacs-mode-map
           ([mouse-1]   . treemacs-single-click-expand-action))
    :config
    (setq treemacs-collapse-dirs           (if treemacs-python-executable 3 0)
          treemacs-missing-project-action  'remove
          treemacs-sorting                 'alphabetic-asc
          treemacs-follow-after-init       t
          treemacs-width                   30
          treemacs-no-png-images           (not suk-icon))

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (use-package treemacs-nerd-icons
      :demand t
      :when (icons-displayable-p)
      :custom-face
      (treemacs-nerd-icons-root-face ((t (:inherit nerd-icons-green :height 1.3))))
      (treemacs-nerd-icons-file-face ((t (:inherit nerd-icons-dsilver))))
      :config (treemacs-load-theme "nerd-icons"))

    (use-package treemacs-magit
      :hook ((magit-post-commit
              git-commit-post-finish
              magit-post-stage
              magit-post-unstage)
             . treemacs-magit--schedule-update))

    (use-package treemacs-tab-bar
      :demand t
      :config (treemacs-set-scope-type 'Tabs)))

  (add-hook 'treemacs-mode-hook 'treemacs-project-follo-mode)
  (provide 'init-treemacs)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-treemacs.el ends here

#+end_src
* etc/init-ui.el
#+begin_src emacs-lisp :tangle etc/init-ui.el
  ;;; init-ui.el --- Initialize UI configurations.	-*- lexical-binding: t -*-
  ;;; Commentary:
  ;;
  ;; Emacs Package management configurations.
  ;;

  ;;; Code:



  (eval-when-compile
    (require '+const)
    (require '+custom)
    (require 'init-package)
    )

  ;; Optimization
  (setq idle-update-delay 1.0)

  ;; Logo
  (setq fancy-splash-image suk-logo)


  ;; Compatibility

  (use-package compat :demand t)



  ;; 字体
  (defun font-installed-p (font-name)
    "Check if font with FONT-NAME is available."
    (find-font (font-spec :name font-name)))
  (require 'load-set-font)

  (display-time-mode -1)

  (setq column-number-mode t)
  (setq-default fill-column 80)
  (setq column-number-mode t)

  (require 'display-line-numbers)
  ;; 设置行号
  ;;(global-display-line-numbers-mode 1)
  ;; Alternatively, to use it only in programming modes:
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)

  ;; Line numbers are not displayed when large files are used.
  (setq line-number-display-limit large-file-warning-threshold)
  (setq line-number-display-limit-width 1000)

  (dolist (hook (list
                 'c-mode-common-hook
                 'c-mode-hook
                 'emacs-lisp-mode-hook
                 'lisp-interaction-mode-hook
                 'lisp-mode-hook
                 'java-mode-hook
                 'asm-mode-hook
                 'haskell-mode-hook
                 'rcirc-mode-hook
                 'erc-mode-hook
                 'sh-mode-hook
                 'makefile-gmake-mode-hook
                 'python-mode-hook
                 'js-mode-hook
                 'html-mode-hook
                 'css-mode-hook
                 'tuareg-mode-hook
                 'go-mode-hook
                 'coffee-mode-hook
                 'qml-mode-hook
                 'markdown-mode-hook
                 'slime-repl-mode-hook
                 'package-menu-mode-hook
                 'cmake-mode-hook
                 'php-mode-hook
                 'web-mode-hook
                 'coffee-mode-hook
                 'sws-mode-hook
                 'jade-mode-hook
                 'vala-mode-hook
                 'rust-mode-hook
                 'ruby-mode-hook
                 'qmake-mode-hook
                 'lua-mode-hook
                 'swift-mode-hook
                 'llvm-mode-hook
                 'conf-toml-mode-hook
                 'nxml-mode-hook
                 'nim-mode-hook
                 'typescript-mode-hook
                 'elixir-mode-hook
                 'clojure-mode-hook
                 'dart-mode-hook
                 'zig-mode-hook

                 'c-ts-mode-hook
                 'c++-ts-mode-hook
                 'cmake-ts-mode-hook
                 'toml-ts-mode-hook
                 'css-ts-mode-hook
                 'js-ts-mode-hook
                 'json-ts-mode-hook
                 'python-ts-mode-hook
                 'bash-ts-mode-hook
                 'typescript-ts-mode-hook
                 'rust-ts-mode-hook
                 'java-ts-mode-hook
                 'kotlin-mode-hook
                 'prog-mode-hook
                 'yaml-mode-hook
                 'conf-mode-hook
                 ))
    (add-hook hook (lambda () (display-line-numbers-mode))))

  ;; Easily adjust the font size in all frames
  (use-package default-text-scale
    :ensure t
    :hook (after-init . default-text-scale-mode)
    :bind (:map default-text-scale-mode-map
                ("s-="   . default-text-scale-increase)
                ("s--"   . default-text-scale-decrease)
                ("s-0"   . default-text-scale-reset)
                ("C-s-=" . default-text-scale-increase)
                ("C-s--" . default-text-scale-decrease)
                ("C-s-0" . default-text-scale-reset)))

  ;; Title
  (setq frame-title-format
        '("Suk's Emacs - "
          (:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b")))
        icon-title-format frame-title-format
        )

  ;; Icons
  (use-package nerd-icons
    :config
    (when (and (display-graphic-p)
               (not (font-installed-p nerd-icons-font-family)))
      (nerd-icons-install-fonts t)))

  ;; 图标支持
  (use-package all-the-icons
    ;; :ensure t
    :load-path "~/.emacs.d/extensions/all-the-icons"
    :if (display-graphic-p))

  ;; Mouse & Smooth Scroll
  ;; Scroll one line at a time (less "jumpy" than defaults)
  (when (display-graphic-p)
    (setq mouse-wheel-scroll-amount '(1 ((shift) . hscroll))
          mouse-wheel-scroll-amount-horizontal 1
          mouse-wheel-progressive-speed nil))
  (setq scroll-step 1
        scroll-margin 0
        scroll-conservatively 100000
        auto-window-vscroll nil
        scroll-preserve-screen-position t)

  ;; Good pixel line scrolling
  (if (fboundp 'pixel-scroll-precision-mode)
      (pixel-scroll-precision-mode t)
    (unless sys/macp
      (use-package good-scroll
        :diminish
        :hook (after-init . good-scroll-mode)
        :bind (([remap next] . good-scroll-up-full-screen)
               ([remap prior] . good-scroll-down-full-screen)))))

  ;; Smooth scrolling over images
  (unless emacs/>=30p
    (use-package iscroll
      :diminish
      :hook (image-mode . iscroll-mode)))

  ;; Use fixed pitch where it's sensible
  (use-package mixed-pitch
    :diminish)

  ;; Display ugly ^L page breaks as tidy horizontal lines
  (use-package page-break-lines
    :diminish
    :hook (after-init . global-page-break-lines-mode))

  (use-package ibuffer
    :ensure nil
    :bind ("C-x C-b" . ibuffer)
    :init (setq ibuffer-filter-group-name-face '(:inherit (font-lock-string-face bold))))

  ;; Display icons for buffers
  (use-package nerd-icons-ibuffer
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode)
    :init (setq nerd-icons-ibuffer-icon suk-icon))

  ;; Group ibuffer's list by project
  (use-package ibuffer-project
    :hook (ibuffer . (lambda ()
                       "Group ibuffer's list by project."
                       (setq ibuffer-filter-groups (ibuffer-project-generate-filter-groups))
                       (unless (eq ibuffer-sorting-mode 'project-file-relative)
                         (ibuffer-do-sort-by-project-file-relative))))
    :init (setq ibuffer-project-use-cache t)
    :config
    (defun my-ibuffer-project-group-name (root type)
      "Return group name for project ROOT and TYPE."
      (if (and (stringp type) (> (length type) 0))
          (format "%s %s" type root)
        (format "%s" root)))
    (if (icons-displayable-p)
        (progn
          (advice-add #'ibuffer-project-group-name :override #'my-ibuffer-project-group-name)
          (setq ibuffer-project-root-functions
                `((ibuffer-project-project-root . ,(nerd-icons-octicon "nf-oct-repo" :height 1.2 :face ibuffer-filter-group-name-face))
                  (file-remote-p . ,(nerd-icons-codicon "nf-cod-radio_tower" :height 1.2 :face ibuffer-filter-group-name-face)))))
      (progn
        (advice-remove #'ibuffer-project-group-name #'my-ibuffer-project-group-name)
        (setq ibuffer-project-root-functions
              '((ibuffer-project-project-root . "Project")
                (file-remote-p . "Remote"))))))



  (use-package hydra
    :hook (emacs-lisp-mode . hydra-add-imenu)
    :init
    (when (childframe-completion-workable-p)
      (setq hydra-hint-display-type 'posframe)

      (with-eval-after-load 'posframe
        (defun hydra-set-posframe-show-params ()
          "Set hydra-posframe style."
          (setq hydra-posframe-show-params
                `(:left-fringe 8
                               :right-fringe 8
                               :internal-border-width 2
                               :internal-border-color ,(face-background 'posframe-border nil t)
                               :background-color ,(face-background 'tooltip nil t)
                               :foreground-color ,(face-foreground 'tooltip nil t)
                               :lines-truncate t
                               :poshandler posframe-poshandler-frame-center-near-bottom)))
        (hydra-set-posframe-show-params)
        (add-hook 'after-load-theme-hook #'hydra-set-posframe-show-params t))))


  (use-package pretty-hydra
    :custom (pretty-hydra-default-title-body-format-spec " %s%s")
    :bind ("<f6>" . toggles-hydra/body)
    :hook (emacs-lisp-mode . (lambda ()
                               (add-to-list
                                'imenu-generic-expression
                                '("Hydras"
                                  "^.*(\\(pretty-hydra-define\\) \\([a-zA-Z-]+\\)"
                                  2))))
    :init
    (cl-defun pretty-hydra-title (title &optional icon-type icon-name
                                        &key face height v-adjust)
      "Add an icon in the hydra title."
      (let ((face (or face `(:inherit highlight :reverse-video t)))
            (height (or height 1.2))
            (v-adjust (or v-adjust 0.0)))
        (concat
         (when (and (icons-displayable-p) icon-type icon-name)
           (let ((f (intern (format "nerd-icons-%s" icon-type))))
             (when (fboundp f)
               (concat
                (apply f (list icon-name :face face :height height :v-adjust v-adjust))
                " "))))
         (propertize title 'face face))))

    ;; Global toggles
    (with-no-warnings
      (pretty-hydra-define toggles-hydra (:title (pretty-hydra-title "Toggles" 'faicon "nf-fa-toggle_on")
                                                 :color amaranth :quit-key ("q" "C-g"))
        ("Basic"
         (("n" (cond ((fboundp 'display-line-numbers-mode)
                      (display-line-numbers-mode (if display-line-numbers-mode -1 1)))
                     ((fboundp 'gblobal-linum-mode)
                      (global-linum-mode (if global-linum-mode -1 1))))
           "line number"
           :toggle (or (bound-and-true-p display-line-numbers-mode)
                       (bound-and-true-p global-linum-mode)))
          ("a" global-aggressive-indent-mode "aggressive indent" :toggle t)
          ("d" global-hungry-delete-mode "hungry delete" :toggle t)
          ("e" electric-pair-mode "electric pair" :toggle t)
          ("c" flyspell-mode "spell check" :toggle t)
          ("s" prettify-symbols-mode "pretty symbol" :toggle t)
          ("l" global-page-break-lines-mode "page break lines" :toggle t)
          ("b" display-battery-mode "battery" :toggle t)
          ("i" display-time-mode "time" :toggle t)
          ("m" doom-modeline-mode "modern mode-line" :toggle t))
         "Highlight"
         (("h l" global-hl-line-mode "line" :toggle t)
          ("h p" show-paren-mode "paren" :toggle t)
          ("h s" symbol-overlay-mode "symbol" :toggle t)
          ("h r" rainbow-mode "rainbow" :toggle t)
          ("h w" (setq-default show-trailing-whitespace (not show-trailing-whitespace))
           "whitespace" :toggle show-trailing-whitespace)
          ("h d" rainbow-delimiters-mode "delimiter" :toggle t)
          ("h i" highlight-indent-guides-mode "indent" :toggle t)
          ("h t" global-hl-todo-mode "todo" :toggle t))
         "Program"
         (("f" flymake-mode "flymake" :toggle t)
          ("O" hs-minor-mode "hideshow" :toggle t)
          ("u" subword-mode "subword" :toggle t)
          ("W" which-function-mode "which function" :toggle t)
          ("E" toggle-debug-on-error "debug on error" :toggle (default-value 'debug-on-error))
          ("Q" toggle-debug-on-quit "debug on quit" :toggle (default-value 'debug-on-quit))
          ("v" global-diff-hl-mode "gutter" :toggle t)
          ("V" diff-hl-flydiff-mode "live gutter" :toggle t)
          ("M" diff-hl-margin-mode "margin gutter" :toggle t)
          ("D" diff-hl-dired-mode "dired gutter" :toggle t))
         ))))

  (use-package hydra-posframe
    :load-path "~/.emacs.d/extensions/hydra-posframe/hydra-posframe.el"
    :defer 1
    :hook (after-init . hydra-posframe-mode))

  ;; Child frame
  (when (childframe-workable-p)
    (use-package posframe
      :hook (after-load-theme . posframe-delete-all)
      :init
      (defface posframe-border
        `((t (:inherit region)))
        "Face used by the `posframe' border."
        :group 'posframe)
      (defvar posframe-border-width 2
        "Default posframe border width.")
      :config
      (with-no-warnings
        (defun my-posframe--prettify-frame (&rest _)
          (set-face-background 'fringe nil posframe--frame))
        (advice-add #'posframe--create-posframe :after #'my-posframe--prettify-frame)

        (defun posframe-poshandler-frame-center-near-bottom (info)
          (cons (/ (- (plist-get info :parent-frame-width)
                      (plist-get info :posframe-width))
                   2)
                (/ (+ (plist-get info :parent-frame-height)
                      (* 2 (plist-get info :font-height)))
                   2))))))


  (with-no-warnings
    (when sys/macp
      ;; Render thinner fonts
      (setq ns-use-thin-smoothing t)
      ;; Don't open a file in a new frame
      (setq ns-pop-up-frames nil)))
  ;; Don't use GTK+ tooltip
  (when (boundp 'x-gtk-use-system-tooltips)
    (setq x-gtk-use-system-tooltips nil))

  (use-package vertico-posframe
    :ensure t
    :custom
    (vertico-posframe-parameters
     '((left-fringe . 8)
       (right-fringe . 8))))

  ;; Ligatures support
  (when (and emacs/>=28p (not suk-prettify-symbols-alist))
    (use-package composite
      :ensure nil
      :init (defvar composition-ligature-table (make-char-table nil))
      :hook (((prog-mode
               conf-mode nxml-mode markdown-mode help-mode
               shell-mode eshell-mode term-mode vterm-mode)
              . (lambda () (setq-local composition-function-table composition-ligature-table))))
      :config
      ;; support ligatures, some toned down to prevent hang
      (let ((alist
             '((33  . ".\\(?:\\(==\\|[!=]\\)[!=]?\\)")
               (35  . ".\\(?:\\(###?\\|_(\\|[(:=?[_{]\\)[#(:=?[_{]?\\)")
               (36  . ".\\(?:\\(>\\)>?\\)")
               (37  . ".\\(?:\\(%\\)%?\\)")
               (38  . ".\\(?:\\(&\\)&?\\)")
               (42  . ".\\(?:\\(\\*\\*\\|[*>]\\)[*>]?\\)")
               ;; (42 . ".\\(?:\\(\\*\\*\\|[*/>]\\).?\\)")
               (43  . ".\\(?:\\([>]\\)>?\\)")
               ;; (43 . ".\\(?:\\(\\+\\+\\|[+>]\\).?\\)")
               (45  . ".\\(?:\\(-[->]\\|<<\\|>>\\|[-<>|~]\\)[-<>|~]?\\)")
               ;; (46 . ".\\(?:\\(\\.[.<]\\|[-.=]\\)[-.<=]?\\)")
               (46  . ".\\(?:\\(\\.<\\|[-=]\\)[-<=]?\\)")
               (47  . ".\\(?:\\(//\\|==\\|[=>]\\)[/=>]?\\)")
               ;; (47 . ".\\(?:\\(//\\|==\\|[*/=>]\\).?\\)")
               (48  . ".\\(?:x[a-zA-Z]\\)")
               (58  . ".\\(?:\\(::\\|[:<=>]\\)[:<=>]?\\)")
               (59  . ".\\(?:\\(;\\);?\\)")
               (60  . ".\\(?:\\(!--\\|\\$>\\|\\*>\\|\\+>\\|-[-<>|]\\|/>\\|<[-<=]\\|=[<>|]\\|==>?\\||>\\||||?\\|~[>~]\\|[$*+/:<=>|~-]\\)[$*+/:<=>|~-]?\\)")
               (61  . ".\\(?:\\(!=\\|/=\\|:=\\|<<\\|=[=>]\\|>>\\|[=>]\\)[=<>]?\\)")
               (62  . ".\\(?:\\(->\\|=>\\|>[-=>]\\|[-:=>]\\)[-:=>]?\\)")
               (63  . ".\\(?:\\([.:=?]\\)[.:=?]?\\)")
               (91  . ".\\(?:\\(|\\)[]|]?\\)")
               ;; (92 . ".\\(?:\\([\\n]\\)[\\]?\\)")
               (94  . ".\\(?:\\(=\\)=?\\)")
               (95  . ".\\(?:\\(|_\\|[_]\\)_?\\)")
               (119 . ".\\(?:\\(ww\\)w?\\)")
               (123 . ".\\(?:\\(|\\)[|}]?\\)")
               (124 . ".\\(?:\\(->\\|=>\\||[-=>]\\||||*>\\|[]=>|}-]\\).?\\)")
               (126 . ".\\(?:\\(~>\\|[-=>@~]\\)[-=>@~]?\\)"))))
        (dolist (char-regexp alist)
          (set-char-table-range composition-ligature-table (car char-regexp)
                                `([,(cdr char-regexp) 0 font-shape-gstring]))))
      (set-char-table-parent composition-ligature-table composition-function-table)))

  ;; 图形界面插件的设置

  (when (display-graphic-p)


    )


  (use-package centaur-tabs
    :demand
    :init
    ;; Set the style to rounded with icons
    (setq centaur-tabs-style "bar")
    (setq centaur-tabs-set-icons t)
    :config
    (centaur-tabs-mode t)
    :bind
    ("C-<prior>" . centaur-tabs-backward) ;; Ctrl PgUp
    ("C-<next>" . centaur-tabs-forward))  ;; Ctrl PgDn

  ;; ===================================
  ;; Theme 主题设置
  ;; -----------------------------------
  ;;(require 'lazycat-theme)
  ;;(lazycat-theme-load-dark)

  (use-package doom-themes
    :ensure t
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    ;; 加载一个主题，DOOM One 是 DOOM Emacs 的默认主题，非常美观
    :init
    (load-theme 'doom-one t)
    :config
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; WORKAROUND: Visual bell on 29+
    ;; @see https://github.com/doomemacs/themes/issues/733
    (with-no-warnings
      (defun my-doom-themes-visual-bell-fn ()
        "Blink the mode-line red briefly. Set `ring-bell-function' to this to use it."
        (let ((buf (current-buffer))
              (cookies (mapcar (lambda (face)
                                 (face-remap-add-relative face 'doom-themes-visual-bell))
                               (if (facep 'mode-line-active)
                                   '(mode-line-active solaire-mode-line-active-face)
                                 '(mode-line solaire-mode-line-face)))))
          (force-mode-line-update)
          (run-with-timer 0.15 nil
                          (lambda ()
                            (with-current-buffer buf
                              (mapc #'face-remap-remove-relative cookies)
                              (force-mode-line-update))))))
      (advice-add #'doom-themes-visual-bell-fn :override #'my-doom-themes-visual-bell-fn))
    )

  (use-package doom-modeline
    :load-path "~/.emacs.d/extensions/doom-modeline"
    :hook (after-init . doom-modeline-mode)
    :init
    ;;(doom-modeline-mode 1)
    (setq doom-modeline-icon suk-icon
          doom-modeline-minor-modes t)
    :bind (:map doom-modeline-mode-map
                ("C-<f6>" . doom-modeline-hydra/body))
    :config
    (column-number-mode 1)
    :custom
    (doom-modeline-height 30)
    (doom-modeline-window-width-limit nil)
    (doom-modeline-buffer-file-name-style 'truncate-with-project)
    (doom-modeline-icon t)
    ;;(doom-modeline-major-mode-icon nil)
    ;;(doom-modeline-minor-modes nil)
    (doom-modeline-enable-word-count t)
    ;;(doom-modeline-buffer-encoding nil)
    (doom-modeline-buffer-modification-icon t)
    ;;(doom-modeline-env-python-executeable "python")
    ;; needs display-time-mode to be one
    (doom-modeline-time t)
    (doom-modeline-vcs-max-leghth 50)
    ;; Windows下记得加上
    (if sys/win32p (setq inhibit-compacting-font-caches t))
    :pretty-hydra
    ((:title (pretty-hydra-title "Mode Line" 'sucicon "nf-custom-emacs" :face 'nerd-icons-purple)
             :color amaranth
             :quit-key ("q" "C-g"))
     ("Icon"
      (("i" (setq doom-modeline-icon (not doom-modeline-icon))
        "display icons" :toggle doom-modeline-icon)
       ("u" (setq doom-modeline-unicode-fallback (not doom-modeline-unicode-fallback))
        "unicode fallback" :toggle doom-modeline-unicode-fallback)
       ("m" (setq doom-modeline-major-mode-icon (not doom-modeline-major-mode-icon))
        "major mode" :toggle doom-modeline-major-mode-icon)
       ("c" (setq doom-modeline-major-mode-color-icon (not doom-modeline-major-mode-color-icon))
        "colorful major mode" :toggle doom-modeline-major-mode-color-icon)
       ("s" (setq doom-modeline-buffer-state-icon (not doom-modeline-buffer-state-icon))
        "buffer state" :toggle doom-modeline-buffer-state-icon)
       ("o" (setq doom-modeline-buffer-modification-icon (not doom-modeline-buffer-modification-icon))
        "modification" :toggle doom-modeline-buffer-modification-icon)
       ("x" (setq doom-modeline-time-icon (not doom-modeline-time-icon))
        "time" :toggle doom-modeline-time-icon)
       ("v" (setq doom-modeline-modal-icon (not doom-modeline-modal-icon))
        "modal" :toggle doom-modeline-modal-icon))
      "Segment"
      (("g h" (setq doom-modeline-hud (not doom-modeline-hud))
        "hud" :toggle doom-modeline-hud)
       ("g m" (setq doom-modeline-minor-modes (not doom-modeline-minor-modes))
        "minor modes" :toggle doom-modeline-minor-modes)
       ("g w" (setq doom-modeline-enable-word-count (not doom-modeline-enable-word-count))
        "word count" :toggle doom-modeline-enable-word-count)
       ("g e" (setq doom-modeline-buffer-encoding (not doom-modeline-buffer-encoding))
        "encoding" :toggle doom-modeline-buffer-encoding)
       ("g i" (setq doom-modeline-indent-info (not doom-modeline-indent-info))
        "indent" :toggle doom-modeline-indent-info)
       ("g c" (setq doom-modeline-display-misc-in-all-mode-lines (not doom-modeline-display-misc-in-all-mode-lines))
        "misc info" :toggle doom-modeline-display-misc-in-all-mode-lines)
       ("g l" (setq doom-modeline-lsp (not doom-modeline-lsp))
        "lsp" :toggle doom-modeline-lsp)
       ("g k" (setq doom-modeline-workspace-name (not doom-modeline-workspace-name))
        "workspace" :toggle doom-modeline-workspace-name)
       ("g g" (setq doom-modeline-github (not doom-modeline-github))
        "github" :toggle doom-modeline-github)
       ("g n" (setq doom-modeline-gnus (not doom-modeline-gnus))
        "gnus" :toggle doom-modeline-gnus)
       ("g u" (setq doom-modeline-mu4e (not doom-modeline-mu4e))
        "mu4e" :toggle doom-modeline-mu4e)
       ("g r" (setq doom-modeline-irc (not doom-modeline-irc))
        "irc" :toggle doom-modeline-irc)
       ("g f" (setq doom-modeline-irc-buffers (not doom-modeline-irc-buffers))
        "irc buffers" :toggle doom-modeline-irc-buffers)
       ("g s" (progn
                (setq doom-modeline-check-simple-format (not doom-modeline-check-simple-format))
                (and (bound-and-true-p flycheck-mode) (flycheck-buffer)))
        "simple check format" :toggle doom-modeline-check-simple-format)
       ("g t" (setq doom-modeline-time (not doom-modeline-time))
        "time" :toggle doom-modeline-time)
       ("g v" (setq doom-modeline-env-version (not doom-modeline-env-version))
        "version" :toggle doom-modeline-env-version))
      "Style"
      (("a" (setq doom-modeline-buffer-file-name-style 'auto)
        "auto"
        :toggle (eq doom-modeline-buffer-file-name-style 'auto))
       ("b" (setq doom-modeline-buffer-file-name-style 'buffer-name)
        "buffer name"
        :toggle (eq doom-modeline-buffer-file-name-style 'buffer-name))
       ("f" (setq doom-modeline-buffer-file-name-style 'file-name)
        "file name"
        :toggle (eq doom-modeline-buffer-file-name-style 'file-name))
       ("t u" (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
        "truncate upto project"
        :toggle (eq doom-modeline-buffer-file-name-style 'truncate-upto-project))
       ("t f" (setq doom-modeline-buffer-file-name-style 'truncate-from-project)
        "truncate from project"
        :toggle (eq doom-modeline-buffer-file-name-style 'truncate-from-project))
       ("t w" (setq doom-modeline-buffer-file-name-style 'truncate-with-project)
        "truncate with project"
        :toggle (eq doom-modeline-buffer-file-name-style 'truncate-with-project))
       ("t e" (setq doom-modeline-buffer-file-name-style 'truncate-except-project)
        "truncate except project"
        :toggle (eq doom-modeline-buffer-file-name-style 'truncate-except-project))
       ("t r" (setq doom-modeline-buffer-file-name-style 'truncate-upto-root)
        "truncate upto root"
        :toggle (eq doom-modeline-buffer-file-name-style 'truncate-upto-root))
       ("t a" (setq doom-modeline-buffer-file-name-style 'truncate-all)
        "truncate all"
        :toggle (eq doom-modeline-buffer-file-name-style 'truncate-all))
       ("t n" (setq doom-modeline-buffer-file-name-style 'truncate-nil)
        "truncate none"
        :toggle (eq doom-modeline-buffer-file-name-style 'truncate-nil))
       ("r f" (setq doom-modeline-buffer-file-name-style 'relative-from-project)
        "relative from project"
        :toggle (eq doom-modeline-buffer-file-name-style 'relative-from-project))
       ("r t" (setq doom-modeline-buffer-file-name-style 'relative-to-project)
        "relative to project"
        :toggle (eq doom-modeline-buffer-file-name-style 'relative-to-project)))
      "Project Detection"
      (("p a" (setq doom-modeline-project-detection 'auto)
        "auto"
        :toggle (eq doom-modeline-project-detection 'auto))
       ("p f" (setq doom-modeline-project-detection 'ffip)
        "ffip"
        :toggle (eq doom-modeline-project-detection 'ffip))
       ("p i" (setq doom-modeline-project-detection 'projectile)
        "projectile"
        :toggle (eq doom-modeline-project-detection 'projectile))
       ("p p" (setq doom-modeline-project-detection 'project)
        "project"
        :toggle (eq doom-modeline-project-detection 'project))
       ("p n" (setq doom-modeline-project-detection nil)
        "disable"
        :toggle (eq doom-modeline-project-detection nil)))
      "Misc"
      (("n" (progn
              (message "Fetching GitHub notifications...")
              (run-with-timer 300 nil #'doom-modeline--github-fetch-notifications)
              (browse-url "https://github.com/notifications"))
        "github notifications" :exit t)
       ("e" (cond ((bound-and-true-p flycheck-mode)
                   (flycheck-list-errors))
                  ((bound-and-true-p flymake-mode)
                   (flymake-show-diagnostics-buffer)))
        "list errors" :exit t)
       ("w" (if (bound-and-true-p grip-mode)
                (grip-browse-preview)
              (message "Not in preview"))
        "browse preview" :exit t)
       ("z h" (read-from-minibuffer
               "Eval: "
               (format "(setq %s %s)"
                       'doom-modeline-height
                       (symbol-value 'doom-modeline-height)))
        "set height" :exit t)
       ("z w" (read-from-minibuffer
               "Eval: "
               (format "(setq %s %s)"
                       'doom-modeline-bar-width
                       (symbol-value 'doom-modeline-bar-width)))
        "set bar width" :exit t)
       ("z g" (read-from-minibuffer
               "Eval: "
               (format "(setq %s %s)"
                       'doom-modeline-github-interval
                       (symbol-value 'doom-modeline-github-interval)))
        "set github interval" :exit t)
       ("z n" (read-from-minibuffer
               "Eval: "
               (format "(setq %s %s)"
                       'doom-modeline-gnus-timer
                       (symbol-value 'doom-modeline-gnus-timer)))
        "set gnus interval" :exit t))))
    )

  (use-package hide-mode-line
    :hook (((treemacs-mode
             eshell-mode shell-mode
             term-mode vterm-mode
             embark-collect-mode
             lsp-ui-imenu-mode
             pdf-annot-list-mode) . turn-on-hide-mode-line-mode)
           (dired-mode . (lambda()
                           (and (bound-and-true-p hide-mode-line-mode)
                                (turn-off-hide-mode-line-mode))))))

  ;; A minor-mode menu for mode-line
  (use-package minions
    :hook (doom-modeline-mode . minions-mode))

  ;; 切换buffer焦点时高亮动画
  (use-package beacon
    :ensure t
    :hook (after-init . beacon-mode))

  ;; Frame transparence
  (use-package transwin
    :bind (("C-M-9" . transwin-inc)
           ("C-M-8" . transwin-dec)
           ("C-M-7" . transwin-toggle))
    :init
    (when sys/linux-x-p
      (setq transwin-parameter-alpha 'alpha-background)))

  (when  (eq system-type 'gnu/linux)
    ;; 调节屏幕亮度
  ;;;###autoload
    (defun suk/set-backlight (&optional light-value)
      (interactive "s请输入亮度(小数表示的百分比): ")
      (let ((max-backlight (string-to-number (string-trim-right
                                              (shell-command-to-string
                                               "cat /sys/class/backlight/intel_backlight/max_brightness")))))
        (when (and light-value (floatp (string-to-number light-value)))
          (shell-command
           (concat "echo "
                   (format "%d" (* max-backlight (string-to-number light-value)))
                   " > /sys/class/backlight/intel_backlight/brightness")))))

    ;; 增加10%屏幕亮度
  ;;;###autoload
    (defun suk/plus-backlight ()
      (interactive)
      (let* (
             ;; 最大亮度
             (max-backlight (string-to-number (string-trim-right
                                               (shell-command-to-string "cat /sys/class/backlight/intel_backlight/max_brightness"))))
             ;; 当前亮度
             (current-backlight (string-to-number (string-trim-right
                                                   (shell-command-to-string "cat /sys/class/backlight/intel_backlight/brightness"))))
             ;; 增加后的亮度
             (add-backlight (+ current-backlight (* max-backlight 0.1))))
        (if (< add-backlight max-backlight)
            (progn (shell-command
                    (concat "echo "
                            (format "%d" add-backlight)
                            " > /sys/class/backlight/intel_backlight/brightness"))
                   (message "亮度+10%"))
          (message "亮度MAX!!"))))

    ;; 减少屏幕亮度
  ;;;###autoload
    (defun suk/less-backlight ()
      (interactive)
      (let* (
             ;; 最大亮度
             (max-backlight (string-to-number (string-trim-right
                                               (shell-command-to-string "cat /sys/class/backlight/intel_backlight/max_brightness"))))
             ;; 当前亮度
             (current-backlight (string-to-number (string-trim-right
                                                   (shell-command-to-string "cat /sys/class/backlight/intel_backlight/brightness"))))
             ;; 减少后的亮度
             (less-backlight (- current-backlight (* max-backlight 0.1))))
        (if (> less-backlight (* max-backlight 0.1) )
            (progn (shell-command
                    (concat "echo "
                            (format "%d" less-backlight)
                            " > /sys/class/backlight/intel_backlight/brightness"))
                   (message "亮度-10%"))
          (message "亮度Min!!"))))
    )




  (defvar after-load-theme-hook nil
    "Hook run after a color theme is loaded using `load-theme'.")

  ;;;###autoload
  (defun run-after-load-theme-hook (&rest _)
    "Run `after-load-theme-hook'."
    (run-hooks 'after-load-theme-hook))
  (advice-add #'load-theme :after #'run-after-load-theme-hook)

  ;;===================================================
  ;; Frame
  ;;===================================================
  (defvar suk/frame--geometry nil)
  ;;;###autoload
  (defun suk/frame--save-geometry ()
    "Save current frame's geometry."
    (setq suk/frame--geometry
          `((left   . ,(frame-parameter nil 'left))
            (top    . ,(frame-parameter nil 'top))
            (width  . ,(frame-parameter nil 'width))
            (height . ,(frame-parameter nil 'height))
            (fullscreen))))

  ;;;###autoload
  (defun suk/frame--fullscreen-p ()
    "Return Non-nil if the frame is fullscreen."
    (memq (frame-parameter nil 'fullscreen) '(fullscreen fullboth)))

  ;;;###autoload
  (defun suk/frame-maximize ()
    "Maximize the frame."
    (interactive)
    (suk/frame--save-geometry)
    (unless (eq (frame-parameter nil 'fullscreen) 'maximized)
      (set-frame-parameter nil 'fullscreen 'maximized)))

  ;;;###autoload
  (defun suk/frame-restore ()
    "Restore the frame's size and position."
    (interactive)
    (modify-frame-parameters nil suk/frame--geometry))

  ;;;###autoload
  (defun suk/frame-left-half ()
    "Put the frame to the left-half."
    (interactive)
    (unless (suk/frame--fullscreen-p)
      (suk/frame--save-geometry)
      (let* ((attr (frame-monitor-workarea))
             (width (- (/ (nth 2 attr) 2) 20))
             (height (- (nth 3 attr) 30))
             (left (nth 0 attr))
             (top (nth 1 attr)))
        (set-frame-parameter nil 'fullscreen nil)
        (set-frame-position nil left top)
        (set-frame-size nil width height t))))

  ;;;###autoload
  (defun suk/frame-right-half ()
    "Put the frame to the right-half."
    (interactive)
    (unless (suk/frame--fullscreen-p)
      (suk/frame--save-geometry)
      (let* ((attr (frame-monitor-workarea))
             (width (- (/ (nth 2 attr) 2) 20))
             (height (- (nth 3 attr) 30))
             (left (+ (nth 0 attr) width 20))
             (top (nth 1 attr)))
        (set-frame-parameter nil 'fullscreen nil)
        (set-frame-position nil left top)
        (set-frame-size nil width height t))))

  ;;;###autoload
  (defun suk/frame-top-half ()
    "Put the frame to the top-half."
    (interactive)
    (unless (suk/frame--fullscreen-p)
      (suk/frame--save-geometry)
      (let* ((attr (frame-monitor-workarea))
             (width (- (nth 2 attr) 20))
             (height (- (/ (nth 3 attr) 2) 30))
             (left (nth 0 attr))
             (top (nth 1 attr)))
        (set-frame-parameter nil 'fullscreen nil)
        (set-frame-position nil left top)
        (set-frame-size nil width height t))))

  ;;;###autoload
  (defun suk/frame-bottom-half ()
    "Put the frame to the bottom-half."
    (interactive)
    (unless (suk/frame--fullscreen-p)
      (suk/frame--save-geometry)
      (let* ((attr (frame-monitor-workarea))
             (width (- (nth 2 attr) 20))
             (height (- (/ (nth 3 attr) 2) 30))
             (left (nth 0 attr))
             (top (+ (nth 1 attr) height 30)))
        (set-frame-parameter nil 'fullscreen nil)
        (set-frame-position nil left top)
        (set-frame-size nil width height t))))



  (suk-set-key-bindings 'global-set-key
    (list
     (list (kbd "C-M-<return>")     #'suk/frame-maximize)
     (list (kbd "C-M-<backspace>")  #'suk/frame-restore)
     (list (kbd "C-M-<left>")       #'suk/frame-left-half)
     (list (kbd "C-M-<right>")      #'suk/frame-right-half)
     (list (kbd "C-M-<up>")         #'suk/frame-top-half)
     (list (kbd "C-M-<down>")       #'suk/frame-bottom-half)
     ))

  (provide 'init-ui)

  ;; how to use hydra to display a mennu
  ;; (defhydra hydra-consult (:hint nil)
  ;;   "
  ;; Consult Commands
  ;; ^Searching^      ^Buffers^        ^Files^
  ;; -------------------------------------------------
  ;; _s_: search      _b_: buffers     _f_: find file
  ;; _o_: occur       _i_: imenu       _r_: recent file
  ;; _g_: grep
  ;; "
  ;;   ("s" consult-line)
  ;;   ("o" consult-occur)
  ;;   ("g" consult-grep)
  ;;   ("b" consult-buffer)
  ;;   ("i" consult-imenu)
  ;;   ("f" consult-find)
  ;;   ("r" consult-recent-file))

  ;; (global-set-key (kbd "C-c c") 'hydra-consult/body)

#+end_src
* etc/init-utils.el
#+begin_src emacs-lisp :tangle etc/init-utils.el
  ;; init-utils.el --- Initialize ultilities.	-*- lexical-binding: t -*-
  ;;; Commentary:
  ;;
  ;; Some usefule Utilities.
  ;;

  ;;; Code:
  (eval-when-compile
    (require '+const)
    (require '+custom)
    (require 'init-package)
    )

  (use-package bind-key)
  ;; Enhance M-x, use counsel-M-x
  ;; (use-package amx)


  ;; Display available keybindings in popup
  (use-package which-key
    :diminish
    :bind (("C-h M-m" . which-key-show-major-mode)
           (:map help-map ("C-h" . which-key-C-h-dispatch)))

    :hook (after-init . which-key-mode)
    :custom
    ;; µ¯³ö·½Ê½£¬µ×²¿µ¯³ö
    (which-key-popup-type 'side-window)
    :init (setq which-key-max-description-length 30
                which-key-lighter nil
                which-key-show-remaining-keys t)
    :config
    (which-key-mode)
    (which-key-add-key-based-replacements "C-c !" "flycheck")
    (which-key-add-key-based-replacements "C-c &" "yasnippet")
    (which-key-add-key-based-replacements "C-c @" "hideshow")
    (which-key-add-key-based-replacements "C-c d" "dict")
    (which-key-add-key-based-replacements "C-c l" "link-hint")
    (which-key-add-key-based-replacements "C-c n" "org-roam")
    (which-key-add-key-based-replacements "C-c t" "hl-todo")
    (which-key-add-key-based-replacements "C-c C-z" "browse")

    (which-key-add-key-based-replacements "C-x 8" "unicode")
    (which-key-add-key-based-replacements "C-x 8 e" "emoji")
    (which-key-add-key-based-replacements "C-x @" "modifior")
    (which-key-add-key-based-replacements "C-x a" "abbrev")
    (which-key-add-key-based-replacements "C-x c" "citre")
    (which-key-add-key-based-replacements "C-x n" "narrow")
    (which-key-add-key-based-replacements "C-x r" "rect & bookmark")
    (which-key-add-key-based-replacements "C-x t" "tab & treemacs")
    (which-key-add-key-based-replacements "C-x x" "buffer")
    (which-key-add-key-based-replacements "C-x C-a" "edebug")
    (which-key-add-key-based-replacements "C-x RET" "coding-system")
    (which-key-add-key-based-replacements "C-x X" "edebug")

    (which-key-add-major-mode-key-based-replacements 'org-mode
                                                     "C-c \"" "org-plot")
    (which-key-add-major-mode-key-based-replacements 'org-mode
                                                     "C-c C-v" "org-babel")
    (which-key-add-major-mode-key-based-replacements 'org-mode
                                                     "C-c C-x" "org-misc")

    (which-key-add-major-mode-key-based-replacements 'python-mode
                                                     "C-c C-t" "python-skeleton")

    (which-key-add-major-mode-key-based-replacements 'markdown-mode
                                                     "C-c C-a" "markdown-link")
    (which-key-add-major-mode-key-based-replacements 'markdown-mode
                                                     "C-c C-c" "markdown-command")
    (which-key-add-major-mode-key-based-replacements 'markdown-mode
                                                     "C-c C-s" "markdown-style")
    (which-key-add-major-mode-key-based-replacements 'markdown-mode
                                                     "C-c C-t" "markdown-header")
    (which-key-add-major-mode-key-based-replacements 'markdown-mode
                                                     "C-c C-x" "markdown-toggle")

    (which-key-add-major-mode-key-based-replacements 'gfm-mode
                                                     "C-c C-a" "markdown-link")
    (which-key-add-major-mode-key-based-replacements 'gfm-mode
                                                     "C-c C-c" "markdown-command")
    (which-key-add-major-mode-key-based-replacements 'gfm-mode
                                                     "C-c C-s" "markdown-style")
    (which-key-add-major-mode-key-based-replacements 'gfm-mode
                                                     "C-c C-t" "markdown-header")
    (which-key-add-major-mode-key-based-replacements 'gfm-mode
                                                     "C-c C-x" "markdown-toggle")

    (when (childframe-completion-workable-p)
      (use-package which-key-posframe
        :diminish
        :functions posframe-poshandler-frame-center-near-bottom
        :custom-face
        (which-key-posframe ((t (:inherit tooltip))))
        (which-key-posframe-border ((t (:inherit posframe-border :background unspecified))))
        :init
        (setq which-key-posframe-border-width posframe-border-width
              which-key-posframe-poshandler #'posframe-poshandler-frame-center-near-bottom
              which-key-posframe-parameters '((left-fringe . 8)
                                              (right-fringe . 8)))
        (which-key-posframe-mode 1))))



  (provide 'init-utils)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-utils.el ends here

#+end_src
* etc/init-window.el
#+begin_src emacs-lisp :tangle etc/init-window.el
  ;; init-window.el --- Initialize window configurations.	-*- lexical-binding: t -*-
  ;;; Commentary:
  ;;
  ;; Window configurations.
  ;;

  ;;; Code:

  ;; Directional window-selection routines
  (use-package windmove
    :ensure nil
    :hook (after-init . (lambda ()
                          (windmove-default-keybindings 'super))))

  ;; Restore old window configurations
  (use-package winner
    :ensure nil
    :commands (winner-undo winner-redo)
    :hook (after-init . winner-mode)
    :init (setq winner-boring-buffers '("*Completions*"
                                        "*Compile-Log*"
                                        "*inferior-lisp*"
                                        "*Fuzzy Completions*"
                                        "*Apropos*"
                                        "*Help*"
                                        "*cvs*"
                                        "*Buffer List*"
                                        "*Ibuffer*"
                                        "*esh command on file*")))

  ;; Quickly switch windows
  (use-package ace-window
    :pretty-hydra
    ((:title (pretty-hydra-title "Window Management" 'faicon "nf-fa-th")
      :foreign-keys warn :quit-key ("q" "C-g"))
     ("Actions"
      (("TAB" other-window "switch")
       ("x" ace-delete-window "delete")
       ("X" ace-delete-other-windows "delete other" :exit t)
       ("s" ace-swap-window "swap")
       ("a" ace-select-window "select" :exit t)
       ("m" toggle-frame-maximized "maximize" :exit t)
       ("u" toggle-frame-fullscreen "fullscreen" :exit t))
      "Resize"
      (("h" shrink-window-horizontally "←")
       ("j" enlarge-window "↓")
       ("k" shrink-window "↑")
       ("l" enlarge-window-horizontally "→")
       ("n" balance-windows "balance"))
      "Split"
      (("r" split-window-right "horizontally")
       ("R" split-window-horizontally-instead "horizontally instead")
       ("v" split-window-below "vertically")
       ("V" split-window-vertically-instead "vertically instead")
       ("t" toggle-window-split "toggle"))
      "Zoom"
      (("+" text-scale-increase "in")
       ("=" text-scale-increase "in")
       ("-" text-scale-decrease "out")
       ("0" (text-scale-increase 0) "reset"))
      "Misc"
      (("o" set-frame-font "frame font")
       ("f" make-frame-command "new frame")
       ("d" delete-frame "delete frame")
       ("<left>" winner-undo "winner undo")
       ("<right>" winner-redo "winner redo"))))
    :custom-face
    (aw-leading-char-face ((t (:inherit font-lock-keyword-face :foreground unspecified :bold t :height 3.0))))
    (aw-minibuffer-leading-char-face ((t (:inherit font-lock-keyword-face :bold t :height 1.0))))
    (aw-mode-line-face ((t (:inherit mode-line-emphasis :bold t))))
    :bind (([remap other-window] . ace-window)
           ("C-c w" . ace-window-hydra/body))
    :hook (emacs-startup . ace-window-display-mode)
    :config
    (defun toggle-window-split ()
      (interactive)
      (if (= (count-windows) 2)
          (let* ((this-win-buffer (window-buffer))
                 (next-win-buffer (window-buffer (next-window)))
                 (this-win-edges (window-edges (selected-window)))
                 (next-win-edges (window-edges (next-window)))
                 (this-win-2nd (not (and (<= (car this-win-edges)
                                             (car next-win-edges))
                                         (<= (cadr this-win-edges)
                                             (cadr next-win-edges)))))
                 (splitter
                  (if (= (car this-win-edges)
                         (car (window-edges (next-window))))
                      'split-window-horizontally
                    'split-window-vertically)))
            (delete-other-windows)
            (let ((first-win (selected-window)))
              (funcall splitter)
              (if this-win-2nd (other-window 1))
              (set-window-buffer (selected-window) this-win-buffer)
              (set-window-buffer (next-window) next-win-buffer)
              (select-window first-win)
              (if this-win-2nd (other-window 1))))
        (user-error "`toggle-window-split' only supports two windows")))

    ;; Bind hydra to dispatch list
    (add-to-list 'aw-dispatch-alist '(?w ace-window-hydra/body) t)

    ;; Select widnow via `M-1'...`M-9'
    (defun aw--select-window (number)
      "Slecet the specified window."
      (when (numberp number)
        (let ((found nil))
          (dolist (win (aw-window-list))
            (when (and (window-live-p win)
                       (eq number
                           (string-to-number
                            (window-parameter win 'ace-window-path))))
              (setq found t)
              (aw-switch-to-window win)))
          (unless found
            (message "No specified window: %d" number)))))
    (dotimes (n 9)
      (bind-key (format "M-%d" (1+ n))
                (lambda ()
                  (interactive)
                  (aw--select-window (1+ n))))))

  ;; Enforce rules for popups
  (use-package popper
    :custom
    (popper-group-function #'popper-group-by-directory)
    (popper-echo-dispatch-actions t)
    :bind (:map popper-mode-map
           ("C-h z"       . popper-toggle)
           ("C-<tab>"     . popper-cycle)
           ("C-M-<tab>"   . popper-toggle-type))
    :hook (emacs-startup . popper-echo-mode)
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*$"
            "Output\\*$" "\\*Pp Eval Output\\*$"
            "^\\*eldoc.*\\*$"
            "\\*Compile-Log\\*$"
            "\\*Completions\\*$"
            "\\*Warnings\\*$"
            "\\*Async Shell Command\\*$"
            "\\*Apropos\\*$"
            "\\*Backtrace\\*$"
            "\\*Calendar\\*$"
            "\\*Fd\\*$" "\\*Find\\*$" "\\*Finder\\*$"
            "\\*Kill Ring\\*$"
            "\\*Embark \\(Collect\\|Live\\):.*\\*$"

            bookmark-bmenu-mode
            comint-mode
            compilation-mode
            help-mode helpful-mode
            tabulated-list-mode
            Buffer-menu-mode

            flymake-diagnostics-buffer-mode
            flycheck-error-list-mode flycheck-verify-mode

            gnus-article-mode devdocs-mode
            grep-mode occur-mode rg-mode deadgrep-mode ag-mode pt-mode
            youdao-dictionary-mode osx-dictionary-mode fanyi-mode

            "^\\*Process List\\*$" process-menu-mode
            list-environment-mode cargo-process-mode

            "^\\*.*eshell.*\\*.*$"
            "^\\*.*shell.*\\*.*$"
            "^\\*.*terminal.*\\*.*$"
            "^\\*.*vterm[inal]*.*\\*.*$"

            "\\*DAP Templates\\*$" dap-server-log-mode
            "\\*ELP Profiling Restuls\\*" profiler-report-mode
            "\\*Paradox Report\\*$" "\\*package update results\\*$" "\\*Package-Lint\\*$"
            "\\*[Wo]*Man.*\\*$"
            "\\*ert\\*$" overseer-buffer-mode
            "\\*gud-debug\\*$"
            "\\*lsp-help\\*$" "\\*lsp session\\*$"
            "\\*quickrun\\*$"
            "\\*tldr\\*$"
            "\\*vc-.*\\**"
            "\\*diff-hl\\**"
            "^\\*macro expansion\\**"

            "\\*Agenda Commands\\*" "\\*Org Select\\*" "\\*Capture\\*" "^CAPTURE-.*\\.org*"
            "\\*Gofmt Errors\\*$" "\\*Go Test\\*$" godoc-mode
            "\\*docker-.+\\*"
            "\\*prolog\\*" inferior-python-mode inf-ruby-mode swift-repl-mode
            "\\*rustfmt\\*$" rustic-compilation-mode rustic-cargo-clippy-mode
            rustic-cargo-outdated-mode rustic-cargo-run-mode rustic-cargo-test-mode))

    (with-eval-after-load 'doom-modeline
      (setq popper-mode-line
            '(:eval (let ((face (if (doom-modeline--active)
                                    'doom-modeline-emphasis
                                  'doom-modeline)))
                      (if (and (icons-displayable-p)
                               (bound-and-true-p doom-modeline-icon)
                               (bound-and-true-p doom-modeline-mode))
                          (format " %s "
                                  (nerd-icons-octicon "nf-oct-pin" :face face))
                        (propertize " POP " 'face face))))))
    :config
    (with-no-warnings
      (defun my-popper-fit-window-height (win)
        "Determine the height of popup window WIN by fitting it to the buffer's content."
        (fit-window-to-buffer
         win
         (floor (frame-height) 3)
         (floor (frame-height) 3)))
      (setq popper-window-height #'my-popper-fit-window-height)

      (defun popper-close-window-hack (&rest _)
        "Close popper window via `C-g'."
        ;; `C-g' can deactivate region
        (when (and (called-interactively-p 'interactive)
                   (not (region-active-p))
                   popper-open-popup-alist)
          (let ((window (caar popper-open-popup-alist)))
            (when (window-live-p window)
              (delete-window window)))))
      (advice-add #'keyboard-quit :before #'popper-close-window-hack)))

  (provide 'init-window)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-window.el ends here

#+end_src
