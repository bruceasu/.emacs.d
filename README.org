# -*- coding: utf-8
#+OPTIONS: ^:{}
#+TITLE: SUK 嘅 EMACS 配置
#+STARTUP: showeverything
#+PROPERTY: header-args:emacs-lisp+   :tangle yes :results silent :exports code :eval never-export
#+FILETAGS: :emacs:
#+LANGUAGE: zh-CN
#+DATE: {{{time(%Y 年%0m 月%d 日)}}}
#+AUTHOR: Suk
#+EMAIL:  bruceasu@gmail.com

* 前言
:PROPERTIES:
:CUSTOM_ID: babel-init
:END:
<<babel-init>>


呢个係我个人嘅配置。其实好长，但部分原因系我有时会将博客文章留返喺度做
注释，仲有因为我有好多细节嘅自定义，可能我自己都唔记得晒。 如果你啱啱
接触 Emacs Lisp，你可能唔想直接复制粘贴咁多代码块。相反，你可以复制啲
小部分（记住每次复制时要确保括号成对）放入你嘅 ~*scratch*~ buffer 或者其
他 ~emacs-lisp-mode~ 嘅 buffer 入面。用 ~M-x eval-buffer~ 来执行啲代码，睇
下 Emacs 嘅表现你钟唔钟意。

我安装咗好多软件包。当你见到 ~use-package~ 同某个包名，你可以用 ~M-x
package-install~ 来安装嗰个包。

如果你喺睇 Org 文件。你可以将源代码块（即系 ~begin_src~ 入面嘅内容）打开
喺独立嘅 buffer。只需要将光标移入代码块，然后按 ~C-c '~
(~org-edit-special~)。咁样会开一个新嘅 buffer 用 =emacs-lisp-mode= ，你可
以用 =M-x eval-buffer= 来加载修改。想深入了解函数点样运作，可以用 =M-x
edebug-defun= 来调试个函数，然后调用佢。你可以喺 [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html][Emacs Lisp]] 手册了解更多。
<<starting-up>>

#+begin_src emacs-lisp :tangle early-init.el :eval never-export
  ;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*-
  ;; NOTE: early-init.el is now generated from readme.org.  Please edit that file instead

  ;; 将垃圾收集推迟到启动过程中的更后面。
  (setq gc-cons-threshold most-positive-fixnum gc-cons-percentage 0.8)
  (setq inhibit-startup-message t)

  ;; 喺 Emacs 27 及之后版本，软件包初始化会喺 `user-init-file` 加载之
  ;; 前进行，但系会喺 `early-init-file` 之后进行。我哋必须阻止 Emacs
  ;; 提前做呢个操作！
  (setq package-enable-at-startup nil)
  ;;唔好允许从软件包缓存加载（原因一样）。
  (setq package-quickstart nil)
  ;; `use-package` 喺 29 版本开始内置。它必须喺加载 `use-package` 之
  ;; 前设置。
  (setq use-package-enable-imenu-support t)
  ;; 系统默认编码
  (set-language-environment 'utf-8)
  ;; 更干净嘅 GUI
  ;; 通过尽早禁用呢啲 UI 元素，避免出现未加样式嘅 Emacs 瞬间显示。
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)

  ;; 调整 Emacs 窗口大小可能系更改字体时非常昂贵嘅操作。
  ;; 通过禁用呢个操作，当字体大过系统默认字体时，我哋可以轻松将启动时间减少一半。
  (setq frame-inhibit-implied-resize t)
  (setq default-frame-alist
        (append '((width                . 140)  ; Frame幅
                  (height               . 40 )  ; Frame高
                  (left                 . 170 ) ; 配置左位置
                  (top                  . 30 )  ; 配置上位置
                  (line-spacing         . 0  )  ; 文字間隔
                  (left-fringe          . 12 )  ; 左fringe幅
                  (right-fringe         . 12 )  ; 右fringe幅
                  (menu-bar-lines       . 1  )  ; 菜单行
                  (cursor-type          . bar)  ; 光标種別
                  (alpha                . 100)  ; 透明度
                  )
                default-frame-alist))
  (setq initial-frame-alist default-frame-alist)

  ;; 元素一部分禁用
  (when (fboundp 'menu-bar-mode) (menu-bar-mode -1)) ; keep the menu is better.
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (toggle-frame-maximized)
  ;; 緩衝區，无令立殺之。
  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
  (setq find-file-visit-truename t)
  (provide 'early-init)
  ;;(global-unset-key (kbd "C-SPC"))

  ;;; early-init.el ends here
#+end_src


** 调试贴士
如果啲嘢壞咗，我可以用：

- ~check-parens~ 嚟搵唔啱嘅括號
- package: *bug-hunter* 將我嘅配置分成兩半
- ~trace-function-background~ 將資訊列印到緩衝區
- ~profiler-start~ 嚟搵多啲有關慢函數嘅資訊

** 呢个係我嘅 init.el :
:PROPERTIES:
:CUSTOM_ID: init
:END:
<<init>>


#+BEGIN_SRC emacs-lisp :tangle init.el :eval never-export
  (provide 'init);; 定义一啲目录，方便日后迁移。user-emacs-directory 通常係 ~/.emacs.d
  ;; windows 下, ~/ 通常係 $EMACS_INSTALL_DIR, 或者 EMACS 测定嘅 `HOME`
  ;; 变量。
  (defvar suk-emacs-root-dir      (file-truename user-emacs-directory))
  (defvar suk-emacs-config-dir    (expand-file-name "etc" suk-emacs-root-dir))
  (defvar suk-emacs-extension-dir (expand-file-name "extensions" suk-emacs-root-dir))
  (defvar suk-emacs-share-dir     (expand-file-name "share" suk-emacs-root-dir))
  (defvar suk-emacs-themes-dir    (expand-file-name "themes" suk-emacs-share-dir))
  (defvar suk-emacs-var-dir       (expand-file-name "var" suk-emacs-root-dir))
  (defvar suk-emacs-tmp-dir       (expand-file-name "tmp" suk-emacs-var-dir))
  (defvar suk-emacs-backup-dir    (expand-file-name "backup" suk-emacs-tmp-dir))
  
  ;; OS 嘅 HOME 目录。
  (defvar user-home-dir (getenv "HOME"))
  (if (eq system-type 'windows-nt) (defvar user-home-dir (getenv "USERPROFILE")))
  ;; blink search
  (setq blink-search-db-path (expand-file-name "blink-search.db" suk-emacs-tmp-dir))
  ;; 历史
  (setq savehist-file (concat suk-emacs-var-dir "/history"))
  ;; Amx
  (setq amx-save-file (concat suk-emacs-var-dir "/amx-items"))
  ;; 自动保存
  (setq auto-save-list-file-prefix (concat suk-emacs-var-dir "/auto-save-list/.saves-"))
  ;; Eshell
  (setq eshell-directory-name (concat suk-emacs-var-dir "/eschell"))
  (setq eshell-history-file-name (concat eshell-directory-name "/history"))
  ;; projectitle-bookmarks
  (setq projectile-known-projects-file (concat suk-emacs-var-dir "/projectile-bookmarks.eld"))
  (setq backup-directory-alist `(("" . ,suk-emacs-tmp-dir)))
  ;; Bookmark
  (setq bookmark-default-file (concat suk-emacs-var-dir "/emacs.bmk"))
  ;; Diary
  (setq diary-file (concat user-home-dir "/diary"))
  ;; server 无效
  (require 'server)
  ;;(setq server-socket-dir suk-emacs-var-dir)

  ;; Clear to avoid analyzing files when loading remote files.
  (setq file-name-handler-alist nil)
  ;; Don't pass case-insensitive to `auto-mode-alist'
  (setq auto-mode-case-fold nil)


   (unless (file-exists-p suk-emacs-var-dir)
    (make-directory cache-dir t))
   (setq projectile-cache-file (expand-file-name "projectile.cache" suk-emacs-var-dir))

#+END_SRC

*** 加载目录函数：递归  Emacs 同埋插件嘅设定目录到 `load-path`
:PROPERTIES:
:CUSTOM_ID: load-path-settings
:END:
<<load-path-settings>>

#+BEGIN_SRC emacs-lisp :tangle init.el  :eval never-export
  ;; Ignore `cl` expiration warnings
  (setq byte-compile-warnings '(cl-function))

  ;; original version
  ;;(defun add-subdirs-to-load-path (dir)
  ;;  "Recursive add directories to `load-path'."
  ;;  (let ((default-directory (file-name-as-directory dir)))
  ;;     (add-to-list 'load-path dir)
  ;;     (normal-top-level-add-subdirs-to-load-path)))

  ;; 王勇的版本 https://manateelazycat.github.io/emacs/2022/03/02/emacs-load-directory-recursively.html
  (require 'cl-lib)
  (defun add-subdirs-to-load-path (search-dir isFirst)
    (interactive)
    (when isFirst
      ;; The original version did not add the first search-dir itself to
      ;; the `load path`. The recursive search-dir was added before the
      ;; recursion.
      (add-to-list 'load-path search-dir))
    (let* ((dir (file-name-as-directory search-dir)))
      (dolist (subdir
               ;; goleui bat bityiu ge mukluk, taising Emacs kaidung cudou.
               (cl-remove-if
                #'(lambda (subdir)
                    (or
                     ;; m hai mangin
                     (not (file-directory-p (concat dir subdir)))
                     ;; yiceui haamin ge mukluk
                     (member subdir '("." ".." ; Linux/Uniux haitung ge  dongcin mukluk tungmaai fu mukluk
                                      "dist" "node_modules" "__pycache__" ; takding ge yüyin seunggwaan ge mukluk
                                      "RCS" "CVS" "rcs" "cvs" ".git" ".github")))) ; baanbun hungjai mukluk
                (directory-files dir)))
        (let ((subdir-path (concat dir (file-name-as-directory subdir))))
          ;; mukluk bauhaam  .el .so .dll ge mangin di louging sinji gaa dou `load-path` binleung
          (when (cl-some #'(lambda (subdir-file)
                             (and (file-regular-p (concat subdir-path subdir-file))
                                  ;; .so .dll 文件指非Elisp语言编写的Emacs动态库
                                  (member (file-name-extension subdir-file) '("el" "so" "dll"))))
                         (directory-files subdir-path))

            ;; jüyi: add-to-list ge daisaam go caamsou bitseuiwai t, timgaa dou meibou,
            ;; kokbou gwongdou yausin
            (add-to-list 'load-path subdir-path t))

          ;; geieuuk daigwai sausok ji mukluk.
          (add-subdirs-to-load-path subdir-path nil)))))

  ;; 加载定义的目录
  (add-subdirs-to-load-path suk-emacs-config-dir t)
  (add-subdirs-to-load-path suk-emacs-extension-dir t)
  (add-subdirs-to-load-path suk-emacs-themes-dir t)

  ;; (add-to-list 'load-path "/usr/local/share/emacs/site-lisp")
  ;; (add-to-list 'load-path "~/vendor/org-mode/lisp")
  ;; (add-to-list 'load-path "~/vendor/org-mode/contrib/lisp")
  ;; (setq custom-file "~/.config/emacs/custom-settings.el")
  ;; (load custom-file t)
#+END_SRC

*** 设置 GC
:PROPERTIES:
:CUSTOM_ID: gc-settings
:END:
<<gc-settings>>

#+begin_src emacs-lisp :tangle init.el :eavl never-export

  (setq gc-cons-threshold most-positive-fixnum)
  (setq gc-cons-percentage 0.8)
  ;; Reset the GC setting
  (add-hook 'emacs-startup-hook
            (lambda ()
              ;; 默认係 0.8MB
              ;;(setq gc-cons-threshold 80000000)
              (message "Emacs ready in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)
              (defun my-cleanup-gc ()
                "Clean up gc."
                (setq gc-cons-threshold  67108864) ; 64M
                (setq gc-cons-percentage 0.1) ; original value
                (garbage-collect))
              (run-with-idle-timer 4 nil #'my-cleanup-gc)
              (add-hook 'focus-out-hook 'garbage-collect)))


#+end_src

*** 常量定义
:PROPERTIES:
:CUSTOM_ID: const
:END:
<<const>>

#+begin_src emacs-lisp :tangle init.el :eval never-export
  (defconst sys/win32p
    (eq system-type 'windows-nt)
    "Are we running on a WinTel system?")

  (defconst sys/linuxp
    (eq system-type 'gnu/linux)
    "Are we running on a GNU/Linux system?")

  (defconst sys/macp
    (eq system-type 'darwin)
    "Are we running on a Mac system?")

  (defconst sys/mac-x-p
    (and (display-graphic-p) sys/macp)
    "Are we running under X on a Mac system?")

  (defconst sys/linux-x-p
    (and (display-graphic-p) sys/linuxp)
    "Are we running under X on a GNU/Linux system?")

  (defconst sys/cygwinp
    (eq system-type 'cygwin)
    "Are we running on a Cygwin system?")

  (defconst sys/rootp
    (string-equal "root" (getenv "USER"))
    "Are you using ROOT user?")

  (defconst emacs/>=25p
    (>= emacs-major-version 25)
    "Emacs is 25 or above.")

  (defconst emacs/>=26p
    (>= emacs-major-version 26)
    "Emacs is 26 or above.")

  (defconst emacs/>=27p
    (>= emacs-major-version 27)
    "Emacs is 27 or above.")

  (defconst emacs/>=28p
    (>= emacs-major-version 28)
    "Emacs is 28 or above.")

  (defconst emacs/>=29p
    (>= emacs-major-version 29)
    "Emacs is 29 or above.")

  (defconst emacs/>=30p
    (>= emacs-major-version 30)
    "Emacs is 30 or above.")
#+end_src

*** 載入自訂設定
:PROPERTIES:
:CUSTOM_ID: setup-custom
:END:
<<setup-custom>>

#+begin_src emacs-lisp :tangle init.el :eval never-export
  ;; set const
  (defconst custom-template-file
    (expand-file-name "custom-template.el" user-emacs-directory)
    "Custom template file of Suk's Emacs.")

  (defconst suk-homepage
    "https://github.com/bruceasu/.emacs.d"
    "The Github page of this Emacs config.")


  (defgroup suk nil
    "suk Emacs customizations."
    :group 'convenience
    :link '(url-link :tag "Homepage" "https://github.com/bruceasu/.emacs.d"))

  (defcustom suk-icon t
    "Display icons or not."
    :group 'suk
    :type 'boolean)

  (defcustom org-roam-directory (expand-file-name "RoamNotes" user-home-dir)
    "The org roam directory."
    :group 'suk
    :type 'string)

  (defcustom org-files-directory (expand-file-name "org" user-home-dir)
    "The org roam directory."
    :group 'suk
    :type 'string)

  (defcustom my-org-inline-css-file "~/.emacs.d/share/my-org-style-min.css"
    "The org css style file."
    :group 'suk
    :type 'string)

  (defcustom suk-prettify-symbols-alist
    '(("lambda" . ?λ)
      ("<-"     . ?←)
      ("->"     . ?→)
      ("->>"    . ?↠)
      ("=>"     . ?⇒)
      ("map"    . ?↦)
      ("/="     . ?≠)
      ("!="     . ?≠)
      ("=="     . ?≡)
      ("<="     . ?≤)
      (">="     . ?≥)
      ("=<<"    . (?= (Br . Bl) ?≪))
      (">>="    . (?≫ (Br . Bl) ?=))
      ("<=<"    . ?↢)
      (">=>"    . ?↣)
      ("&&"     . ?∧)
      ("||"     . ?∨)
      ("not"    . ?¬))
    "A list of symbol prettifications. Nil to use font supports ligatures."
    :group 'suk
    :type '(alist :key-type string :value-type (choice character sexp)))

  (defcustom suk-prettify-org-symbols-alist
    '(("[ ]"            . ?)
      ("[-]"            . ?)
      ("[X]"            . ?)

      (":PROPERTIES:"   . ?)
      ("#+END_SRC"      . ?□)
      ("#+BEGIN_QUOTE"  . ?«)
      ("#+END_QUOTE"    . ?»)
      )
    "A list of symbol prettifications for `org-mode'."
    :group 'suk
    :type '(alist :key-type string :value-type (choice character sexp)))


   (defcustom suk-rime t
    "Display use emacs rime or not."
    :group 'suk
    :type 'boolean)
  
   (defcustom suk-copilot-enable nil
     "Enable copilot mode"
     :group 'suk
     :type 'boolean)

  (defcustom  suk-eglot-enable nil
    "Enable eglot mode"
    :group 'suk
    :type 'boolean)

  ;; Load `custom-file'
  ;; If it doesn't exist, copy from the template, then load it.
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

  (let ((custom-template-file
         (expand-file-name "custom-template.el" user-emacs-directory)))
    (if (and (file-exists-p custom-template-file)
             (not (file-exists-p custom-file)))
        (copy-file custom-template-file custom-file)))

  (load-file custom-file)
  ;;(if (file-exists-p custom-file)
  ;;    (load custom-file))

  ;; Load `custom-post.el'
  ;; Put personal configurations to override defaults here.
  (add-hook 'after-init-hook
            (lambda ()
              (let ((file
                     (expand-file-name "custom-post.el" user-emacs-directory)))
                (if (file-exists-p file)
                    (load file)))))
#+end_src

*** 通用函数
:PROPERTIES:
:CUSTOM_ID: setup-common-functions
:END:
<<setup-coommon-functions>>

#+begin_src emacs-lisp :tangle init.el :eval never-export
 (require 'basic-function)
#+end_src
*** Emacs Package 初始化
:PROPERTIES:
:CUSTOM_ID: setup-package
:END:
<<setup-package>>

#+begin_src emacs-lisp :tangle init.el :eval never-export
  ;; This sets up the load path so that we can override it
  (setq warning-suppress-log-types '((package reinitialization)))
  ;; 指定ELPA目录
  (setq package-user-dir (expand-file-name "elpa" "~/.local/share"))
  (add-subdirs-to-load-path package-user-dir t)

  ;; HACK: DO NOT copy package-selected-packages to init/custom file forcibly.
  ;; https://github.com/jwiegley/use-package/issues/383#issuecomment-247801751
  (defun my-save-selected-packages (&optional value)
    "Set `package-selected-packages' to VALUE but don't save to `custom-file'."
    (when value
      (setq package-selected-packages value)))

  (advice-add 'package--save-selected-packages :override #'my-save-selected-packages)

  (require 'package)
  ;;(setq package-archives '(("melpa" . "http://melpa.org/packages/")
  ;;                         ("gnu" . "http://elpa.gnu.org/packages/")
  ;;                         ("nongnu" . "https://elpa.nongnu.org/nongnu/"))

  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives
               '("org" . "https://orgmode.org/elpa/"))
  (add-to-list 'package-archives
               '("gnu" . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives
               '("nongnu" . "https://elpa.nongnu.org/nongnu/"))

  (setq package-check-signature nil) ; 个别时候会出现签名校验失败

  ;; 初置包官
  ;; (unless (bound-and-true-p package--initialized) ; To avoid warnings in 27
  ;;   (setq package-enable-at-startup nil)          ; To prevent initializing twice
  ;;   (package-initialize))

  (unless (bound-and-true-p package--initialized)
    (package-initialize))

  ;; Should set before loading `use-package'
  ;; make use-package default behavior better
  ;; with `use-package-always-ensure' you won't need ":ensure t" all the time
  ;; with `use-package-always-defer' you won't need ":defer t" all the time
  (setq use-package-always-ensure t
        use-package-always-defer t
        use-package-enable-imenu-support t
        use-package-expand-minimally t)

  ;; Setup `use-package'
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package)
    )

  (require 'use-package)

  ;; On-demand installation of packages
  (defun require-package (&rest packages)
    "Ensure PACKAGES are installed.
   If a package is not installed, it will be installed automatically."
    (dolist (package packages)
      (unless (package-installed-p package)
        (package-install package)))
    (use-package package)
    )

  ;; Compatibility
  (use-package compat :demand t)
#+end_src

*** 加载特定嘅设定文件
:PROPERTIES:
:CUSTOM_ID: load-file-settings
:END:
<<load-file-settings>>

=suk.el= 係由 =M-x org-babel-tangle= (=C-c C-v t=) 命令生成嘅。

*关于 Org 更新嘅贴士:* 我鍾意從已檢出的源代碼運行 Org Mode，而唔係用
package.el。我會將 Lisp 目錄加入我嘅 =load-path= ，同時我都會喺第一次
=use-package org= 呼叫中使用 =:load-path= 選項嚟設置加載路徑。其中一個可能
係有效嘅，另一個可能係多餘嘅，但可能係一種「皮帶加吊帶」嘅做法。由於我
通過 =org-babel-tangle= 生成 =suk.el= ，所以我嘅 Emacs 配置可以喺唔需要先
加載 Org 嘅情況下加載 =suk.el= 。
#+begin_src emacs-lisp :tangle init.el :eval never-export
  (load-if-exists (expand-file-name "suk.el" suk-emacs-root-dir))
  (unless (server-running-p) (server-start))

#+END_SRC

* 我嘅設定
** 個人信息
:PROPERTIES:
:CUSTOM_ID: setup-personal-info
:END:
<<setup-personal-info>>

#+begin_src emacs-lisp :tangle suk.el :eval never-export
  (setq user-full-name "Suk")
  (setq user-mail-address "bruceasu@gmail.com")
#+end_src
** 编辑器设定
:PROPERTIES:
:CUSTOM_ID: setup-editor
:END:
<<setup-editor>>

*** 基本設定
:PROPERTIES:
:CUSTOM_ID: setup-basic
:END:
<<setup-basic>>

#+begin_src emacs-lisp :tangle suk.el :eval never-export
  ;; basic settings
  (setq-default
   major-mode 'text-mode ; 默认使用text模式
   cursor-type 'bar      ; 设置光标样式
   tab-width 4           ; tab 的宽度为 4 空格
   indent-tabs-mode nil  ; 永久使用空格縮排，唔好用 TAB 只係用空格代替
                         ; TAB，使用 C-q TAB 來輸入 TAB 字符
   )
  (tooltip-mode -1)                          ;不要显示任何 tooltips
  (delete-selection-mode 1)                  ;选中文本后输入会覆盖
  (size-indication-mode 1)
  (server-mode 1)
  (global-hl-line-mode 1)                    ;高亮当前行
  (put 'narrow-to-region 'disabled nil)      ;开启变窄区域
  (auto-compression-mode 1)                  ;打开压缩文件时自动解压缩
  (show-paren-mode t)                        ;显示括号匹配
  (setq inhibit-startup-message t)           ; 关闭启动欢迎界面
  (setq inhibit-startup-echo-area-message t) ; 关闭启动时回显区的提示信息
  (setq read-process-output-max #x10000)  ; 64kb.  Increase how much is read from processes in a single chunk (default is 4kb)
  (setq vc-follow-symlinks t)
  (setq font-lock-maximum-decoration t)

  (setq adaptive-fill-regexp "[ t]+|[ t]*([0-9]+.|*+)[ t]*")
  (setq adaptive-fill-first-line-regexp "^* *$")
  (setq set-mark-command-repeat-pop t) ; Repeating C-SPC after popping mark pops it again
  (setq sentence-end "\\([。！？￥%×（）—]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*") ; 测定句子结束识别同埋标点，不用在 `fill` 时，再句号后插入 2 个空行。
  (setq sentence-end-double-space nil)
  (add-hook 'after-change-major-mode-hook (lambda ()(modify-syntax-entry ?_ "w"))) ;; 让 `_` 被视为单词嘅组成部分
  (add-hook 'after-change-major-mode-hook (lambda () (modify-syntax-entry ?- "w"))) ;; `-` 符号同样
  (setq suggest-key-bindings 1)             ;当使用 M-x COMMAND 后，过 1 秒钟显示该 COMMAND 绑定的键。
  (setq browse-kill-ring-quit-action        ;设置退出动作
        (quote save-and-restore))           ;保存还原窗口设置
  (setq max-lisp-eval-depth 4096)           ;lisp最大执行深度
  (setq kill-ring-max 1024)                 ;用一个很大的 kill ring. 这样防止我不小心删掉重要的东西
  (setq mark-ring-max 1024)                 ;设置的mark ring容量
  (setq eval-expression-print-length nil)   ;设置执行表达式的长度没有限制
  (setq eval-expression-print-level nil)    ;设置执行表达式的深度没有限制
  (setq read-quoted-char-radix 16)          ;设置 引用字符 的基数
  (setq global-mark-ring-max 1024)          ;设置最大的全局标记容量
  (setq isearch-allow-scroll t)             ;isearch搜索时是可以滚动屏幕的
  (setq enable-recursive-minibuffers t)     ;minibuffer 递归调用命令
  (setq history-delete-duplicates t)        ;删除minibuffer的重复历史
  (setq minibuffer-message-timeout 2)       ;显示消息超时的时间
  (setq auto-revert-mode 1)                 ;自动更新buffer
  (setq show-paren-style 'parentheses)      ;括号匹配显示但不是烦人的跳到另一个括号。
  (setq message-log-max t)                  ;设置message记录全部消息, 而不用截去
  (setq require-final-newline nil)          ;不自动添加换行符到末尾, 有些情况会出现错误
  (setq ediff-window-setup-function
        (quote ediff-setup-windows-plain))  ;比较窗口设置在同一个frame里
  (setq x-stretch-cursor t)                 ;光标在 TAB 字符上会显示为一个大方块
  (setq print-escape-newlines t)            ;显示字符窗中的换行符为 \n
  (setq tramp-default-method "ssh")         ;设置传送文件默认的方法
  (setq void-text-area-pointer nil)         ;禁止显示鼠标指针
  (setq auto-window-vscroll nil)            ;关闭自动调节行高
  (setq mouse-yank-at-point nil)            ;让光标无法离开视线
  (setq kill-whole-line t)                  ; C-k deletes the end of line
  (setq delete-by-moving-to-trash t)        ; Deleting files go to OS's trash folder
  (setq track-eol t)                        ; Keep cursor at end of lines. Require line-move-visual is nil.
  (setq line-move-visual nil)
  (setq save-interprogram-paste-before-kill t) ; Save clipboard contents into kill-ring before replace them
  (setq echo-keystrokes 0.1)                ;加快快捷键提示的速度

  ;; Hanlde minified code
  (if emacs/>=27p
      (add-hook 'after-init-hook #'global-so-long-mode))

  ;; 如果有两个重名buffer, 则再前面加上路径区别
  (require 'uniquify)
  (with-eval-after-load 'uniquify
    ;; (setq uniquify-buffer-name-style 'forward)
    (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
    )
  (if (boundp 'use-short-answers)
      (setq use-short-answers t)
    (fset 'yes-or-no-p 'y-or-n-p))

#+end_src
*** 備份設定
:PROPERTIES:
:CUSTOM_ID: setup-backup
:END:
<<setup-backup>>

#+begin_src emacs-lisp :tangle suk.el :eval never-export
  ;; backup settings
  (setq make-backup-files t)
  (setq version-control t)     ; 允许多次备份
  (setq kept-old-versions 2)   ; 保留最早的2个备份文件
  (setq kept-new-version 100)  ; 保留最近的100个备份文件
  (setq delete-old-versions t) ; 自动删除旧的备份文件
#+end_src
*** 歴史
:PROPERTIES:
:CUSTOM_ID: setup-history
:END:
<<setup-history>>

#+begin_src emacs-lisp :tangle suk.el
  (setq enable-recursive-minibuffers t ; Allow commands in minibuffers
        history-length 1000
        savehist-additional-variables '(mark-ring
                                        global-mark-ring
                                        search-ring
                                        regexp-search-ring
                                        extended-command-history)
        savehist-autosave-interval 300
        savehist-file (expand-file-name "history" suk-emacs-var-dir) ; "~/.emacs.d/var/history"
        )
  (savehist-mode 1)
#+end_src
*** 編碼設定
:PROPERTIES:
:CUSTOM_ID: setup-charset
:END:
<<setup-charset>>
#+begin_src emacs-lisp :tangle suk.el

  ;; 重要提示:写在最后一行的，实际上最优先使用; 最前面一行，反而放到最后才识别。
  ;; utf-16le-with-signature 相当于 Windows 下的 Unicode 编码，这里也可写成
  ;; utf-16 (utf-16 ham:  utf-16le, utf-16be, utf-16le-with-signature dang)
  ;; Unicode
  ;; (prefer-coding-system 'utf-16le-with-signature)
  ;; (prefer-coding-system 'utf-16)
  ;; (prefer-coding-system 'utf-8-dos)
  
  ;; Set UTF-8 as the default coding system
  (prefer-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)            ;缓存文件编码
  (setq default-file-name-coding-system 'utf-8)              ;文件名编码
  (setq default-keyboard-coding-system 'utf-8)               ;键盘输入编码
  (setq default-process-coding-system '(utf-8 . utf-8))      ;进程输出输入编码
  (setq default-sendmail-coding-system 'utf-8)               ;发送邮件编码
  (setq default-terminal-coding-system 'utf-8)               ;终端编码


  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8)

  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)

  (setq buffer-file-coding-system 'utf-8)
  (setq session-save-file-coding-system 'utf-8)

  (set-language-environment "UTF-8")

  (prefer-coding-system 'utf-8)
#+end_src
** 伺机加载 Lazy Load
:PROPERTIES:
:CUSTOM_ID: setup-lazy-load
:END:
<<setup-lazy-load>>

- 全局 lazy-load-global-keys
- 模式 lazy-load-local-keys

支持最后一个参数传递前缀按键，

如果 Emacs 默认已经加载咗某个插件，而唔需要喺运行时动态加载，都可以使
用 lazy-load-set-keys

好多全局按键默认已经被 Emacs 占用咗，必须先卸载先可以重新绑定啲全局按
键，例如 Ctrl + x，下面呢段代码就系用 lazy-load-unset-keys 卸载默认绑
定嘅全局按键。

#+begin_example
 ;;; --- 卸载按键
 (lazy-load-unset-keys ;全局按键的卸载
  '("C-z" "C-x"  "s-W" "s-z" "M-h" "C-\\" "s-c" "s-x" "s-v"))

  
(lazy-load-global-keys
 '(("M-g" . goto-line-preview))
 "goto-line-preview")

 
(lazy-load-local-keys
 '(("C-c t" . ruby-hash-syntax-toggle))
 ruby-mode-map
 "ruby-extension")

 (lazy-load-global-keys
 '(("p" . sdcv-search-pointer)
   ("y" . sdcv-search-pointer+)
   ("i" . sdcv-search-input)
   (";" . sdcv-search-input+))
 "init-sdcv"
 "C-z")

 ;; Mac平台下交换 Option 和 Command 键。

  (when (featurep 'cocoa)
    (setq mac-option-modifier 'super)
    (setq mac-command-modifier 'meta))

#+end_example

#+begin_src emacs-lisp :tangle etc/init-key.el
  (require 'lazy-load)
  (provide 'init-key)
  ;;; ### Unset key ###
  ;;; --- 卸载按键
  (lazy-load-unset-keys                   ;全局按键的卸载
   ;; '("C-z"  "s-W" "s-z" "M-h" "C-\\" "s-c" "s-x" "s-v"))
   '("C-z" ))

#+end_src
Add to suk.el
#+begin_src emacs-lisp :tangle suk.el
  (require 'init-key)
#+end_src

** 何以快键 How to set keys
*** Bindkeys examples
通用定义方法
#+begin_example
(define-prefix-command 'my-leader)           ;设定leader
(define-key keymap "keystrok" 'command-name) ;将快捷键绑定到 leader按键后，即和键位图绑定。
(global-set-key "keystroke" 'command-name)   ;定义全局快捷键
(local-set-key  "keystroke" 'command-name)   ;定义局部快捷键
#+end_example
通用移除定义方法
#+begin_example
;; remove a keybinding
;; for emacs 29 or after
(keymap-global-set "C-t" nil)
;; or use
(keymap-global-unset "C-t")
;; before emacs 28 or before
(global-set-key (kbd "C-t") nil)
;; or
(global-unset-key (kbd "C-t"))

#+end_example
例子：
#+begin_src emacs-elisp :tangle achrives-and-examples.el

;;注意：keystroke中的Control 和 Alternative使用\C, \M表示。
;;如果是kbd函数，可以使用C和M表示

;; global-set-key examples:
(global-set-key (kbd "C-x C-\\") 'next-line)
(global-set-key [?\C-x ?\C-\\] 'next-line)
(global-set-key [(control ?x) (control ?\\)] 'next-line)
(keymap-global-set [(control ?x) (control ?\\)] 'next-line)
(keymap-set global-map "C-x" 'next-line)



;; 方式一：
(define-prefix-command 'SPC-map)
(global-set-key (kbd "SPC") 'SPC-map)
(global-set-key (kbd "SPC f") 'find-file)

;; 方式二：
(define-prefix-command 'SPC-map)
(global-set-key (kbd "SPC") #'SPC-map)
(define-key SPC-map (kbd "f") #'find-file)


;; 演示了如何定义一个新的按键前缀. 这里定义了M-c作为按键前缀.
(define-prefix-command 'comm-map)
(global-set-key (kbd "M-c") 'comm-map)
(global-set-key [(meta c)]  'comm-map)

;; 演示了如何在一个模式下(这里是isearch模式), 定义快捷键.
;; 退出isearch-mode, 所有按键失效.
(add-hook
  'isearch-mode-hook
  '(lambda ()
   
    ;; 单词搜索
    (local-set-key [(meta w)] 'isearch-forward-word)
    (local-set-key [(meta s)] 'isearch-repeat-forward)
    ))
 ;; 搜索下一个结果
    (define-key isearch-mode-map [(meta n)] 'isearch-repeat-forward)
    ;; 搜索前一个结果
    (define-key isearch-mode-map [(meta p)] 'isearch-repeat-backward)
    ;; 替换
    (define-key isearch-mode-map [(control r)] 'isearch-query-replace)
    ;; 正则替换
    (define-key isearch-mode-map [(meta 5)] 'isearch-query-replace-regexp)
    (define-key isearch-mode-map [(meta f)] 'isearch-yank-word-or-char)
    ;; 剪切板作为搜索内容
    (define-key isearch-mode-map [(meta y)] 'isearch-yank-kill)
    ;; 将光标到行尾作为搜索内容
    (define-key isearch-mode-map [(meta k)] 'isearch-yank-line)
    (define-key isearch-mode-map [(hyper l)] 'isearch-yank-char)
    ;; 向左或向右(选择/取消)单个字符作为搜索内容
    (define-key isearch-mode-map [(hyper j)] 'isearch-delete-char)
    ;; 显示occur视图
    (define-key isearch-mode-map [(meta o)] 'isearch-occur)
#+END_SRC

keymap 定义

直接定义全局快捷键：
:  (global-set-key (kbd "C-c n d") #'denote)

自己定义 keymap 其实很简单的，使用 defvar-keymap ，可以从上面的配置中
抽取 C-c n 作为一个 prefix key ，定义如下：
#+BEGIN_EXAMPLE
(defvar-keymap hsk/notetaking-map
  :doc "My notetaking keymap"
  "d" #'denote
  "t" #'denote-keywords-add
  "T" #'denote-keywords-remove)
#+END_EXAMPLE
或者使用旧方法
#+begin_example
(define-prefix-command hsk/notetaking-map)
(define-key hsk/notetaking-map (kbd "d") #'denote)
(define-key hsk/notetaking-map (kbd "t") #'isearch-repeat-forward)
#+end_example
然后就可以用：
: (global-set-key (kbd "C-c n") hsk/notetaking-map)

来将上面定义的 keymap 绑定到 C-c n 上。不过从 emacs-29 开始，更推荐用
keymap-set ，上面的代码可以改成：
: (keymap-set global-map "C-c n" hsk/notetaking-map)
: (keymap-global-set "C-c n" hsk/notetaking-map)

省去了 (kbd ...) 这一层，比较方便。

比起原先每个快捷键单独定义，使用 keymap 好处是便于管理，比如之后我想更
换快捷键前缀，从 C-c n 换成 C-c C-n ，只要改一处 keymap-set 就可以了。

另一个优点是可以嵌套定义，比如我想要将 org-journal 相关的操作也挂到
hsk/notetaking-map 下面，可以先定义一个 hsk/org-journal-map：
#+BEGIN_EXAMPLE
  (defvar-keymap hsk/org-journal-map
  :doc "My org-journal keymap"
  "n" #'org-journal-new-entry
  "s" #'org-journal-search
  "o" #'org-journal-open-current-journal-file)
#+END_EXAMPLE


然后将它嵌套进另一个 map 下面：
#+BEGIN_EXAMPLE
  (defvar-keymap hsk/notetaking-map
  :doc "My notetaking keymap"
  ;;...
  "j" hsk/org-journal-map)
#+END_EXAMPLE

这样 org-journal-new-entry 就映射到 C-c n j n 上了，非常优雅。

: (let ((my-keymap (make-sparse-keymap))) ; 创建一个空的 keymap
:  (keymap-set my-keymap "C-c f" 'find-file)) ; 设置 C-c f 来执行 'find-file 命令
: (keymap-local-set "C-p" ctl-x-map)


*** bind-keys
是由 use-package 宏提供的一个功能，允许在一个声明中绑定多个
键。虽然bind-keys 可以独立于 use-package 使用，但它通常与 use-package
结合使用，以提供更清晰和模块化的键绑定配置。
我个人是认为他比Emacs新定义的keymap-XXX 系列的实现要好。

#+begin_src emacs-lisp :tangle suk.el
  (use-package bind-key)
  ;;(bind-key "C-c x" #'some-function some-package-mode-map)
  ;;(bind-key "C-c y" #'another-function)

  ;; (bind-keys
  ;;  ("C-x C-c" . save-buffers-kill-terminal)
  ;;  ("C-x C-f" . find-file)
  ;;  ("C-x C-s" . save-buffer))

  ;; (bind-keys :map python-mode-map
  ;;            ("C-c C-c" . python-shell-send-buffer)
  ;;            ("C-c C-r" . python-shell-send-region))


  ;; Toggle fullscreen <F11> also bind to fullscreen
  (bind-keys ("C-<f11>" . toggle-frame-fullscreen)
             ("C-S-f" . toggle-frame-fullscreen) ; Compatible with macOS
             ("M-S-<return>" . toggle-frame-fullscreen) ; Compatible with Windos
             )
#+end_src

*** Some Global keys
#+begin_src emacs-lisp :tangle suk.el

  (global-set-key (kbd "C-x R") 'recentf-open)    ;; 快捷键 C-x R 用于打开最近文件
  (if (display-graphic-p)
      (global-set-key (kbd "<escape>") 'keyboard-escape-quit))

  (when emacs/>=29p
    ;; (keymap-global-set <key> <cmmd>)
    (keymap-set global-map "C-<f11>" #'toggle-frame-fullscreen)       ;; 快捷键 C-<f11> 用于切换全屏模式
    (keymap-set global-map "M-s-<return>" #'toggle-frame-fullscreen)  ;; 快捷键 M-S-<return> 也用于切换全屏模式
    (keymap-set global-map "RET" #'newline-and-indent)                ;; 回车键 RET 用于创建新行并对齐
    (keymap-set global-map "S-<return>" #'comment-indent-new-line)    ;; Shift + 回车键用于取消对齐创建的新行
    ) 
  (unless emacs/>=29p
    (global-set-key (kbd "C-<f11>") 'toggle-frame-fullscreen)      ;; 快捷键 C-<f11> 用于切换全屏模式
    (global-set-key (kbd "M-s-<return>") 'toggle-frame-fullscreen)
    (global-set-key (kbd "RET") #'newline-and-indent)              ;; 回车键 RET 用于创建新行并对齐
    (global-set-key (kbd "S-<return>") #'comment-indent-new-line)  ;; Shift + 回车键用于取消对齐创建的新行
    )

  (global-set-key  (kbd "C-S-SPC") 'set-mark-command)

  (define-prefix-command 'leader-key)
  (global-set-key (kbd "S-SPC") 'leader-key)
  (keymap-set leader-key "f" #'toggle-frame-fullscreen) ;; full screen
  ;;; ### Toolkit ###
  ;;; --- 工具函数
  (lazy-load-set-keys
   '(
     ("C-," . bury-buffer)                ;隐藏当前buffer
     ("C-." . unbury-buffer)              ;反隐藏当前buffer
     ("C-<f12>" . lazycat-theme-toggle)
     )
   (current-global-map)
   "C-z"
   )

  ;; 一啲方便嘅函数
  ;; 用于向后跳跃到上一个 sexp C-M-<left> / ESC C-<left>
  ;; 用于向前跳跃到下一个 sexp C-M-<right> / ESC C-<right>
  ;; eval-expression 执行表达式 M-: M-ESC :
  ;; sort-lines, calendar, align-regexp
  ;; C-t transpose-char M-t tanspose-word
  ;; toggle-truncate-lines C-x x t
  ;; C-c TAB indent-region
  ;; C-u C-c TAB => (un)indent-region

  ;; M-x global-set-key RET 交互式的绑定你的键。
  ;; C-x Esc Esc 调出上一条“复杂命令”

  ;;Emacs 自动排版
  ;;很简单：C-x h C-M-\
  ;;其中C-x h 是全选
  ;;C-M-\ 是排版

  ;; C-x C-q set/unset readonly
  ;; 大小写转换： M-u, M-l, M-c

  ;; M-x align-regexp 可以方便的对齐一些文字

#+end_src

** Toggles
使用Hydra提供一组设定常用开发的工具,减少输入或者快捷键的定义
#+begin_src emacs-lisp :tangle suk.el
  (with-eval-after-load 'pretty-hydra
    ;; Global toggles
    (with-no-warnings
      (pretty-hydra-define+ toggles-hydra (:title (pretty-hydra-title "Toggles" 'faicon "nf-fa-toggle_on") :color amaranth :quit-key ("q" "C-g"))
        ("Basic"
         (("n" (cond ((fboundp 'display-line-numbers-mode)
                      (display-line-numbers-mode (if display-line-numbers-mode -1 1)))
                     ((fboundp 'gblobal-linum-mode)
                      (global-linum-mode (if global-linum-mode -1 1))))
           "line number"
           :toggle (or (bound-and-true-p display-line-numbers-mode)
                       (bound-and-true-p global-linum-mode)))
          ("i" global-aggressive-indent-mode "aggressive indent" :toggle t)
          ("d" global-hungry-delete-mode "hungry delete" :toggle t)
          ("e" electric-pair-mode "electric pair" :toggle t)
          ("c" flyspell-mode "spell check" :toggle t)
          ("s" prettify-symbols-mode "pretty symbol" :toggle t)
          ("l" global-page-break-lines-mode "page break lines" :toggle t)
          ("B" display-battery-mode "battery" :toggle t)
          ("T" display-time-mode "time" :toggle t)
          ("a" abbrev-mode "abrev" :toggle t)
          ("F" auto-fill-mode "auto fill" :toggle t)
          ("m" doom-modeline-mode "modern mode-line" :toggle t)
          ("t" toggle-truncate-lines "truncate lines" :toggle t)
          ("u" toggle-company-ispell "Company Ispell" :toggle t))
         "Highlight"
         (("h l" global-hl-line-mode "line" :toggle t)
          ("h p" show-paren-mode "paren" :toggle t)
          ("h s" symbol-overlay-mode "symbol" :toggle t)
          ("h r" rainbow-mode "rainbow" :toggle t)
          ("h w" (setq-default show-trailing-whitespace (not show-trailing-whitespace))
           "whitespace" :toggle show-trailing-whitespace)
          ("h d" rainbow-delimiters-mode "delimiter" :toggle t)
          ("h i" highlight-indent-guides-mode "indent" :toggle t)
          ("h t" global-hl-todo-mode "todo" :toggle t))
         "Program"
         (("f" flymake-mode "flymake" :toggle t)
          ("O" hs-minor-mode "hideshow" :toggle t)
          ("U" subword-mode "subword" :toggle t)
          ("w" whitespace-mode "whitespace" :toggle t)
          ("W" which-function-mode "which function" :toggle t)
          ("E" toggle-debug-on-error "debug on error" :toggle (default-value 'debug-on-error))
          ("Q" toggle-debug-on-quit "debug on quit" :toggle (default-value 'debug-on-quit))
          ("v" global-diff-hl-mode "gutter" :toggle t)
          ("V" diff-hql-flydiff-mode "live gutter" :toggle t)
          ("M" diff-hl-margin-mode "margin gutter" :toggle t)
          ("D" diff-hl-dired-mode "dired gutter" :toggle t))
         ))
      ;; (keymap-global-set "C-x M-t"  #'toggles-hydra/body)
      (keymap-set leader-key "t" #'toggles-hydra/body)
  ))

#+end_src
** Move cursor

#+begin_src emacs-lisp :tangle suk.el
  ;;; ### goto-line-preview ###
  (lazy-load-global-keys
   '(
     ("g p" . goto-line-preview))
   "goto-line-preview"
   "C-z")

  ;;; ### basic-toolkit ###
  (lazy-load-global-keys
   '(
     ("g c" . goto-column)                ;到指定列
     ("g p" . goto-percent)               ;跳转到当前Buffer的文本百分比, 单位为字符
     )
   "basic-toolkit"
   "C-z")

  (lazy-load-global-keys
   '(
     ("C-x r ," . remember-init)    ;记忆初始函数
     ("C-x r ." . remember-jump)    ;记忆跳转函数
     ("C-x r <" . point-stack-pop)  ;buffer索引跳转
     ("C-x r >" . point-stack-push) ;buffer索引标记
     )
   "my-bookmak"
   "C-z"
   )

  ;;; --- 滚动其他窗口

  ;; 下面这两个键模拟Vi的光标不动屏幕动效果, 我很喜欢, 几乎总在使用.
  ;;(global-set-key [(meta N)] 'window-move-up)        
  ;;(global-set-key [(meta P)] 'window-move-DOWN)

  ;; 同上, 但是是另一个buffer窗口上下移动. 常常查看帮助用这个.
  ;;(global-set-key [(control N)] 'other-window-move-up)
  ;;(global-set-key [(control P)] 'other-window-move-down) 
  (lazy-load-global-keys
   '(
     ("M-N" . other-window-move-up)   ;向下滚动其他窗口  scroll-other-window-up
     ("M-P" . other-window-move-down) ;向上滚动其他窗口  scroll-other-window-down
     ("M-n" . window-move-up)         ;向下滚动当前窗口  scroll-up
     ("M-p" . window-move-down)       ;向上滚动当前窗口  scroll-down
     )
   "win-move")
#+end_src

** Move text
#+begin_src emacs-lisp :tangle etc/init-key.el
  ;;; ### move text ###
  (lazy-load-global-keys
   '(
     ("C-S-n" . move-text-down) ;把光标所在的整行文字(或标记)下移一行
     ("C-S-p" . move-text-up)   ;把光标所在的整行文字(或标记)上移一行
     ("C-S-<down>" . move-text-down)  ;把光标所在的整行文字(或标记)下移一行
     ("C-S-<up>"   . move-text-up)    ;把光标所在的整行文字(或标记)上移一行
     )
   "move-text")

  ;;; ### move comment ###
  (lazy-load-global-keys
   '(
     ("M-s-n" . comment-part-move-down)   ;向下移动注释
     ("M-s-p" . comment-part-move-up)     ;向上移动注释
     ("C-s-n" . comment-dwim-next-line)   ;移动到上一行并注释
     ("C-s-p" . comment-dwim-prev-line)   ;移动到下一行并注释
     )
   "move-comment")
#+end_src

** Open new line
#+begin_src emacs-lisp :tangle etc/init-key.el
  ;;; ### open new line ###
  (lazy-load-global-keys
   '(
     ("C-o" . open-newline-above) ;在上面一行新建一行
     ("C-l" . open-newline-below) ;在下面一行新建一行
     )
   "open-newline")
#+end_src
** Duplicate line
#+begin_src emacs-lisp :tangle etc/init-key.el
  ;; ### duplicate-line ###
  (lazy-load-global-keys
   '(
     ("C-S-o" . duplicate-line-or-region-above) ;向上复制当前行或区域
     ("C-S-l" . duplicate-line-or-region-below) ;向下复制当前行或区域
     ("C-S-s-o" . duplicate-line-above-comment) ;复制当前行到上一行, 并注释当前行
     ("C-S-s-l" . duplicate-line-below-comment) ;复制当前行到下一行, 并注释当前行
     ("C-:" . comment-or-uncomment-region+)     ;注释当前行
     )
   "duplicate-line")
#+end_src
** Delete to character
#+begin_src emacs-lisp :tangle etc/init-key.el
;; 自定义删除到字符函数
(defun my/delete-to-char (char)
  "删除光标位置到下一个出现的字符 CHAR 之间的所有内容（不包括 CHAR 本身）。"
  (interactive "cDelete to char: ")
  (let ((start (point))
        (end (progn
               (search-forward (char-to-string char) (line-end-position) t))))
    (if end
        (progn
          (goto-char end)
          (delete-region start (- end 1))
          (message "Deleted from %d to %d" start (- end 1)))
      (progn
        (delete-region start (line-end-position))
        (message "Character '%c' not found. Deleted to end of line." char)))))

;; 绑定快捷键 C-c d 到 my/delete-to-char 函数
(global-set-key (kbd "C-c d") 'my/delete-to-char)
#+end_src
** Insert template
#+begin_src emacs-lisp :tangle suk.el
  ;;;###autoload
  (defun insert-hash-template ()
    "插入HASH模板：
  #=================================================
  # <cursor>
  #-------------------------------------------------
  光标位于第二行的 # 后面。"
    (interactive)
    (beginning-of-line) 
    (insert "#=================================================\n")
    (insert "# \n")
    (insert "#-------------------------------------------------\n")
    ;; 将光标移动到第二行的 # 后面
    (forward-line -2)          ; 移动到上一行（即第二行）
    (end-of-line)              ; 移动到行尾

    )

  ;;;###autoload
  (defun insert-slash-template ()
    "插入Slash comment模板：
  #=================================================
  # <cursor>
  #-------------------------------------------------
  光标位于第二行的 // 后面。"
    (interactive)
    (beginning-of-line) 
    (insert "//=================================================\n")
    (insert "// \n")
    (insert "//-------------------------------------------------\n")
    ;; 将光标移动到第二行的 # 后面
    (forward-line -2)          ; 移动到上一行（即第二行）
    (end-of-line)              ; 移动到行尾
    )


  ;;;###autoload
  (defun insert-star-template ()
    "插入Slash comment模板：
  #=================================================
  # <cursor>
  #-------------------------------------------------
  光标位于第二行的 # 后面。"
    (interactive)
    (beginning-of-line) 
    (insert "/*=================================================*/\n")
    (insert "/*  */\n")
    (insert "/*-------------------------------------------------*/\n")
    (forward-line -2)         
    (end-of-line)          
    (backward-char 3)      
    )

  ;;;###autoload
  (defun insert-javadoc-template ()
    "插入Javadoc模板：
  #=================================================
  # <cursor>
  #-------------------------------------------------
  光标位于第二行的 * 后面。"
    (interactive)
    (beginning-of-line) 
    (insert "/**\n")
    (insert " * \n")
    (insert " */\n")
    (forward-line -2)       
    (end-of-line)         
    )

  ;; 绑定快捷键 C-c t 到插入自定义模板的函数
  (global-set-key (kbd "C-c t h") 'insert-hash-template)
  (global-set-key (kbd "C-c t c") 'insert-slash-template)
  (global-set-key (kbd "C-c t s") 'insert-star-template)
  (global-set-key (kbd "C-c t j") 'insert-javadoc-template)

#+end_src

** Word Styles
#+begin_src emacs-lisp :tangle etc/init-key.el
  ;; ### String Inflection ###
  ;; --- 单词语法风格快速转换

   ;;; ### basic-toolkit ###
  (lazy-load-global-keys
   '(
     ("M-l" . downcase-char)
     ("M-u" . upcase-char)
     )
   "cases")
#+end_src
** Thing Edit
#+begin_src emacs-lisp :tangle etc/init-key.el
  ;;; ### Thing-edit ###
  ;;; --- 增强式编辑当前光标的对象 
  (lazy-load-global-keys
   '(
     ;; ("C-c w" . thing-copy-word)
     ;; ("C-c s" . thing-copy-symbol)
     ;; ("C-c m" . thing-copy-email)
     ;; ("C-c f" . thing-copy-filename)
     ;; ("C-c u" . thing-copy-url)
     ;; ("C-c x" . thing-copy-sexp)
     ;; ("C-c g" . thing-copy-page)
     ;; ("C-c t" . thing-copy-sentence)
     ;; ("C-c o" . thing-copy-witespace)
     ;; ("C-c i" . thing-copy-list)
     ;; ("C-c c" . thing-copy-comment)
     ;; ("C-c h" . thing-copy-defun)
     ;; ("C-c p" . thing-copy-parentheses)
     ;; ("C-c l" . thing-copy-line)
     ;; ("C-c a" . thing-copy-to-line-begining)
     ;; ("C-c e" . thing-copy-to-line-end)

     ;; ("C-c W" . thing-cut-word)
     ;; ("C-c S" . thing-cut-symbol)
     ;; ("C-c M" . thing-cut-email)
     ;; ("C-c F" . thing-cut-filename)
     ;; ("C-c G" . thing-cut-page)
     ;; ("C-c T" . thing-cut-sentence)
     ;; ("C-c O" . thing-cut-whitespace)
     ;; ("C-c I" . thing-cut-list)
     ;; ("C-c C" . thing-cut-comment)
     ;; ("C-c H" . thing-cut-defun)
     ;; ("C-c P" . thing-cut-parentheses)
     ;; ("C-c L" . thing-cut-line)
     ;; ("C-c A" . thing-cut-to-line-beginning)
     ;; ("C-c E" . thing-cut-to-line-end)
     ("S-SPC e" . hydra-thing-edit/body)
     ("C-c e" . hydra-thing-edit/body)
     )
   "init-thing-edit"
   )


#+end_src

** Buffer Edit
#+begin_src emacs-lisp :tangle etc/init-key.el
  ;; ### Buffer Edit ### 
  ;; --- 缓存编辑
  (lazy-load-set-keys
   '(
     ("C-x C-x" . exchange-point-and-mark)   ;交换当前点和标记点
     ("M-o" . backward-delete-char-untabify) ;向前删除字符
     ("C-M-S-h" . mark-paragraph)            ;选中段落
     ("M-SPC" . just-one-space)              ;只有一个空格在光标处
     ))
  ;;; ### basic-toolkit ###
  (lazy-load-global-keys
   '(
     ;;("M-2" . indent-buffer)              ;自动格式化当前Buffer
     ;; indent-comment-buffer
     ;;("C-x u" . mark-line)              ;选中整行
     ("s-k" . kill-and-join-forward)      ;在缩进的行之间删除
     ;;("" . strip-blank-lines)             ; 删除空行
     ;; strip-line-number
     ;; delete-chars-hungry-forward
     ;; delete-chars-hungry-backward
     ;; underline-line-with
     ;; current-line-move-to-top
     ("<f2>" . refresh-file)              ;自动刷新文件
     ("C-S-j" . join-lines)               ;连接下行
     ("M-q" . suk/fill-or-unfill-paragraph)
     ("C-x n N" . suk/xah-narrow-to-region)
     )
   "basic-toolkit")
#+end_src


** Insert translated name
#+begin_src emacs-lisp :tangle suk-unload.el
  ;;; ### Insert translated name ###
  ;; youdao / google
  (setq insert-translated-name-translate-engine "google")
  (lazy-load-global-keys
   '(
     ("," . insert-translated-name-insert-with-underline)
     ("." . insert-translated-name-insert-with-camel)
     ("/" . insert-translated-name-insert)
     )
   "insert-translated-name"
   "C-z"
   )
#+end_src
** Description Keys
=F1 + {f/k/d/i/k}= 或者  =C-h {f/k/d/i}= 可以打开相关帮助
Use ~C-c C-h~ to open the description menu 

#+begin_src emacs-lisp :tangle suk.el

  ;;;###autoload
  (with-eval-after-load 'hydra
    (defhydra my-hydra-describe (:color blue :hint nil)
      "
  Describe Something: (q to quit)
  _a_ all help for everything screen
  _b_ bindings
  _c_ char
  _C_ coding system
  _f_ function
  _i_ input method
  _k_ key briefly
  _K_ key
  _l_ language environment
  _m_ major mode
  _M_ minor mode
  _n_ current coding system briefly
  _N_ current coding system full
  _o_ lighter indicator
  _O_ lighter symbol
  _p_ package
  _P_ text properties
  _s_ symbol
  _t_ theme
  _v_ variable
  _w_ where is something defined
  "
      ("b" describe-bindings)
      ("C" describe-categories)
      ("c" describe-char)
      ("C" describe-coding-system)
      ("f" describe-function)
      ("i" describe-input-method)
      ("K" describe-key)
      ("k" describe-key-briefly)
      ("l" describe-language-environment)
      ("M" describe-minor-mode)
      ("m" describe-mode)
      ("N" describe-current-coding-system)
      ("n" describe-current-coding-system-briefly)
      ("o" describe-minor-mode-from-indicator)
      ("O" describe-minor-mode-from-symbol)
      ("p" describe-package)
      ("P" describe-text-properties)
      ("q" nil)
      ("a" help)
      ("s" describe-symbol)
      ("t" describe-theme)
      ("v" describe-variable)
      ("w" where-is))
    (keymap-global-set "S-SPC h" #'my-hydra-describe/body))
#+end_src
** Rectangle
记录一下使用方法
- =C-x r k=  Kill the text of the region-rectangle, saving its contents as the last killed rectangle (kill-rectangle).
- =C-x r M-w= Save the text of the region-rectangle as the last killed rectangle (copy-rectangle-as-kill).
- =C-x r d= Delete the text of the region-rectangle (delete-rectangle).
- =C-x r y= Yank the last killed rectangle with its upper left corner at point (yank-rectangle).
- =C-x r o= Insert blank space to fill the space of the region-rectangle (open-rectangle). This pushes the previous contents of the region-rectangle to the right.
- =C-x r N= Insert line numbers along the left edge of the region-rectangle (rectangle-number-lines). This pushes the previous contents of the region-rectangle to the right.
- =C-x r c= Clear the region-rectangle by replacing all of its contents with spaces (clear-rectangle).
- =M-x delete-whitespace-rectangle= Delete whitespace in each of the lines on the specified rectangle, starting from the left edge column of the rectangle.
- =C-x r t string <RET>=  Replace rectangle contents with string on each line (string-rectangle).
-  =M-x string-insert-rectangle <RET> string <RET>= Insert string on each line of the rectangle.
-  =C-x <SPC>= Toggle Rectangle Mark mode (rectangle-mark-mode). When
  this mode is active, the region-rectangle is highlighted and can be
  shrunk/grown, and the standard kill and yank commands operate on it.
  The rectangle operations fall into two classes: commands to erase or
  insert rectangles, and comm
#+begin_src emacs-lisp :tangle suk.el
   ;;; Rectangle
  (lazy-load-global-keys
   '(
     ("r" . hydra-rectangle/body)
     )
   "init-rectangle"
   "C-z"
   )
#+end_src
** Expand region
#+begin_src emacs-lisp :tangle suk.el
  ;; expand-region
  (run-with-idle-timer
   2 nil
   #'(lambda()
       ;; (use-package expand-region ; I prefer stable version
       ;;    :load-path "~/.emacs.d/extensions/expand-region"
       ;; )
       (with-eval-after-load 'expand-region
          (defun treesit-mark-bigger-node ()
             "Use tree-sitter to mark regions."
             (let* ((root (treesit-buffer-root-node))
                    (node (treesit-node-descendant-for-range root (region-beginning) (region-end)))
                    (node-start (treesit-node-start node))
                    (node-end (treesit-node-end node)))
               ;; Node fits the region exactly. Try its parent node instead.
               (when (and (= (region-beginning) node-start) (= (region-end) node-end))
                 (when-let ((node (treesit-node-parent node)))
                   (setq node-start (treesit-node-start node)
                         node-end (treesit-node-end node))))
               (set-mark node-end)
               (goto-char node-start)))
          )))

#+end_src
Add shortcut.
#+begin_src emacs-lisp :tangle etc/init-key.el
  (lazy-load-global-keys
         '(("M-=" . er/expand-region)
           ("M--" . er/contract-region)
           ("M-S-<Right>" . er/expand-region)
           ("M-S-<Left>" . er/contract-region)
           )
         "expand-region")
#+end_src
** Undo
#+begin_src emacs-lisp :tangle suk.el
  ;; Treat undo history as a tree, ^x u
  (run-with-idle-timer
   2 nil
   #'(lambda()
         (if emacs/>=28p
             (progn
               ;; vundo :load-path "~/.emacs.d/extensions/vundo"
               ;; (requir 'vundo)
               (with-eval-after-load 'vundo
                 (setq vundo-glyph-alist vundo-unicode-symbols)))
           (progn
             (setq undo-tree-visualizer-timestamps t
                   undo-tree-visualizer-diff t
                   undo-tree-enable-undo-in-region nil
                   undo-tree-auto-save-history nil)
             ;; HACK: keep the diff window
             (with-no-warnings
               (make-variable-buffer-local 'undo-tree-visualizer-diff)
               (setq-default undo-tree-visualizer-diff t))
             (with-eval-after-load 'undo-tree
               (add-hook 'after-init-hook #'global-undo-tree-mode))
             ))
         ))
#+end_src
Add shortcuts.
#+begin_src emacs-lisp :tangle etc/init-key.el
  (if emacs/>=28p
      (lazy-load-global-keys
       '(("C-x u" . vundo)
         ("C-/" . vundo)
         )
       "vundo")
    (lazy-load-global-keys
     '(("C-x u" . undo-trees)
       ("C-/"   . undo-tree-undo)
       ("C-?  " . undo-tree-redo)
       )
     "undo-tree")
    )
#+end_src
** Yank
#+begin_src emacs-lisp :tangle suk.el
  ;;; ### Advice ###
  ;;; --- 各种emacs行为建议
  ;; 在特定地模式下粘贴时自动缩进
  (defadvice yank (after indent-region activate)
    "To make yank content indent automatically."
    (if (member major-mode
                '(emacs-lisp-mode
                  java-mode
                  web-mode
                  c-mode
                  c++-mode
                  js-mode
                  latex-mode
                  plain-tex-mode))
        (indent-region (region-beginning) (region-end) nil)))
#+end_src
** Macros
记录一下使用方式

  - =f3= start macro(~kmacro-start-macro-or-insert-counter~),
  - =f4= done macro or run marcro (~kmacro-end-or-call-macro~).
  - =C-x (= start macro (~kmacro-start-macro~),
  - =C-x )= end done marco(~kmacro-end-macro~),
  - =C-x e= ~run marco(kmacro-end-macro)~
  - =C-x C-k r= ~apply-macro-to-region-lines~
  - =C-x C-k C-n= ~kmacro-cycle-ring-next~               ;下一个键盘宏
  - =C-x C-k C-p= ~kmacro-cycle-ring-previous~      ;上一个键盘宏
  - =C-x C-k RET=  ~kmacro-edit-macro~                          ;编辑键盘宏
  - ~insert-kbd-macro~
  - =C-x C-k n=  ~name-last-kbd-macro~ is an alias for ~kmacro-name-last-macro~
  - =C-x C-k C-d=  ~kmacro-delete-ring-head~

  先定义一个宏

  然后 ~name-last-kbd-macro~

  然后 ~insert-kbd-macro~

  等到如下类似的配置
  : (fset 'delete-empty-lines (kbd "M-x flush-lines RET ^\s-*$ RET"))

** Misc packages
#+begin_src emacs-lisp :tangle suk.el
  (run-with-idle-timer
   2 nil
   #'(lambda()
       (use-package paredit) ;; useful for lisp
       (use-package wgrep) ;; eidt the grep / rg result then apply to the origin buffer. Cancel is supportted.
       (use-package writeroom-mode)
       ))

#+end_src

* 用户界面
:PROPERTIES:
:CUSTOM_ID: setup-ui
:END:
<<setup-ui>>

Add to suk.el
  #+begin_src emacs-lisp :tangle suk.el
  (require 'init-ui)   
  #+end_src

Setup init-ui
#+begin_src emacs-lisp :tangle etc/init-ui.el
  (provide 'init-ui)
#+end_src
** 主题
:PROPERTIES:
:CUSTOM_ID: setup-theme
:END:
<<setup-theme>>

#+begin_src emacs-lisp :tangle etc/init-ui.el
  ;;(require 'lazycat-theme)
  ;;(lazycat-theme-load-dark)
  (use-package doom-themes
    :ensure t
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    ;; 加载一个主题，DOOM One 是 DOOM Emacs 的默认主题，非常美观
    :init
    (load-theme 'doom-one t)
    )

 
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :init
    (setq doom-modeline-icon suk-icon
          doom-modeline-minor-modes t)
    :config
    (column-number-mode 1)
    :custom
    (doom-modeline-height 30)
    (doom-modeline-window-width-limit nil)
    (doom-modeline-buffer-file-name-style 'truncate-with-project)
    (doom-modeline-icon t)
    (doom-modeline-time t)
    (doom-modeline-vcs-max-leghth 50)
    ;; Windows下记得加上
    (if sys/win32p (setq inhibit-compacting-font-caches t))
    )

  (use-package hide-mode-line
    :hook (((treemacs-mode
             eshell-mode shell-mode
             term-mode vterm-mode
             embark-collect-mode
             lsp-ui-imenu-mode
             pdf-annot-list-mode) . turn-on-hide-mode-line-mode)
           (dired-mode . (lambda()
                           (and (bound-and-true-p hide-mode-line-mode)
                                (turn-off-hide-mode-line-mode))))))

  ;; A minor-mode menu for mode-line
  (use-package minions
    :hook (doom-modeline-mode . minions-mode))

#+end_src
** 字体
:PROPERTIES:
:CUSTOM_ID: setup-fonts
:END:
<<setup-fonts>>

#+begin_src emacs-lisp :tangle etc/init-ui.el
    ;; 字体
    (lazy-load-set-keys
     '(
       ("C--" . text-scale-decrease)        ;减小字体大小
       ("C-=" . text-scale-increase)        ;增加字体大小
       ("C-x C-0" . text-scale-adjust)
       ))


    (defun font-installed-p (font-name)
      "Check if font with FONT-NAME is available."
      (find-font (font-spec :name font-name)))


  ;; Use fixed pitch where it's sensible
  ;;  (use-package mixed-pitch :diminish)
  (require 'load-set-font)
#+end_src
** 标签Tabs
:PROPERTIES:
:CUSTOM_ID: setup-tabs
:END:
<<setup-tabs>>

#+begin_src emacs-lisp :tangle etc/init-ui.el
  (when (display-graphic-p)
    (use-package centaur-tabs
      :demand
      :init
      ;; Set the style to rounded with icons
      (setq centaur-tabs-style "bar")
      (setq centaur-tabs-set-icons t)
      :config
      (centaur-tabs-mode t)
      :bind
      ("C-<prior>" . centaur-tabs-backward)  ;; Ctrl PgUp
      ("C-<next>"  . centaur-tabs-forward))  ;; Ctrl PgDn
  )
#+end_src
** 图标
:PROPERTIES:
:CUSTOM_ID: setup-icons
:END:
<<setup-icons>>

#+begin_src emacs-lisp :tangle etc/init-ui.el
  (when (display-graphic-p)
     ;; Icons
    (use-package nerd-icons
      :config
      (when (and (display-graphic-p)
                 (not (font-installed-p nerd-icons-font-family)))
        (nerd-icons-install-fonts t)))

    ;; 图标支持
    (use-package all-the-icons
      ;; :ensure t
      :load-path "~/.emacs.d/extensions/all-the-icons"
      :if (display-graphic-p))
    )
#+end_src
** 高亮
#+begin_src emacs-lisp :tangle etc/init-ui.el
  (run-with-idle-timer
   9
   nil
   #'(lambda()
       ;;(require-package 'highlight-symbol)
       ;; Highlight the current line
       (use-package hl-line
         :ensure nil
         :hook ((after-init . global-hl-line-mode)
                ((dashboard-mode eshell-mode shell-mode term-mode vterm-mode) .
                 (lambda () (setq-local global-hl-line-mode nil)))))
       ))
#+end_src
** 设定 hydra
:PROPERTIES:
:CUSTOM_ID: setup-hydra
:END:
<<setup-hydra>>
*** Setup hydra
#+begin_src emacs-lisp :tangle etc/init-ui.el
  ;; setup hydra
  (use-package hydra
    :hook (emacs-lisp-mode . hydra-add-imenu)
    :config
    (with-eval-after-load 'posframe
      (setq hydra-hint-display-type 'posframe)
      (defun hydra-set-posframe-show-params ()
        "Set hydra-posframe style."
        (setq hydra-posframe-show-params
              `(
                :left-fringe 8
                :right-fringe 8
                :internal-border-width 2
                :internal-border-color ,(face-background 'posframe-border nil t)
                :background-color ,(face-background 'tooltip nil t)
                :foreground-color ,(face-foreground 'tooltip nil t)
                :lines-truncate t
                )))
      (hydra-set-posframe-show-params)
      (add-hook 'after-load-theme-hook #'hydra-set-posframe-show-params t))
    )

#+end_src
*** Setup pretty-hydra
#+begin_src emacs-lisp :tangle etc/init-ui.el
  (use-package pretty-hydra
    :requires hydra
    :custom (pretty-hydra-default-title-body-format-spec " %s%s")
    :hook (emacs-lisp-mode . (lambda ()
                               (add-to-list
                                'imenu-generic-expression
                                '("Hydras" "^.*(\\(pretty-hydra-define\\) \\([a-zA-Z-]+\\)" 2))))
    :init
    (cl-defun pretty-hydra-title (title &optional icon-type icon-name &key face height v-adjust)
      "Add an icon in the hydra title."
      (let ((face (or face `(:inherit highlight :reverse-video t)))
            (height (or height 1.2))
            (v-adjust (or v-adjust 0.0)))
        (concat
         (when (and (icons-displayable-p) icon-type icon-name)
           (let ((f (intern (format "nerd-icons-%s" icon-type))))
             (when (fboundp f)
               (concat (apply f (list icon-name :face face :height height :v-adjust v-adjust)) " "))))
         (propertize title 'face face)))))

#+end_src
** 设定 posframe
#+begin_src emacs-lisp :tangle etc/init-ui.el
  (when (display-graphic-p)
    (use-package posframe
      :hook (after-load-theme . posframe-delete-all)
      :init
      (defface posframe-border `((t (:inherit region)))
        "Face used by the `posframe' border."
        :group 'posframe)
      (defvar posframe-border-width 2
        "Default posframe border width.")
      )

    :config
    (posframe-delete-all)
    )
#+end_src
** 杂项
#+begin_src emacs-lisp :tangle etc/init-ui.el
  ;; Optimization
  (setq idle-update-delay 1.0)
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  ;; (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

  ;; GUI Environment
  (when (display-graphic-p)
    ;; Don't use GTK+ tooltip
    (when (boundp 'x-gtk-use-system-tooltips)
      (setq x-gtk-use-system-tooltips nil))
    ;; scroll-bar
    (set-scroll-bar-mode 'right)
    ;; 隐藏垂直滚动条。
    ;;(modify-all-frames-parameters '((vertical-scroll-bars)))
    )
#+end_src
* 缓存区 Buffer
** 使用 ibuffer.
#+begin_src emacs-lisp :tangle suk.el

  (use-package ibuffer
    :ensure nil
    :bind ("C-x C-b" . ibuffer)
    :init (setq ibuffer-filter-group-name-face '(:inherit (font-lock-string-face bold))))
  ;;(global-set-key (kbd "C-x C-b") 'ibuffer)

  (with-eval-after-load 'ibuffer
    ;; Display icons for buffers
    (when (display-graphic-p)
      (use-package nerd-icons-ibuffer
        :hook (ibuffer-mode . nerd-icons-ibuffer-mode)
        :init (setq nerd-icons-ibuffer-icon suk-icon)))
    )
#+end_src
** 持久化 scratch 缓存区
唔欲存此临时缓冲区，咁可再续前缘。
#+begin_src emacs-lisp :tangle suk.el
  ;; Persistent the scratch buffer
  (run-with-idle-timer
   1 nil
   #'(lambda()
       (use-package persistent-scratch
         :diminish
         :bind (:map persistent-scratch-mode-map
                     ([remap kill-buffer] . (lambda (&rest _)
                                              (interactive)
                                              (user-error "Scratch buffer cannot be killed")))
                     ([remap revert-buffer] . persistent-scratch-restore)
                     ([remap revert-this-buffer] . persistent-scratch-restore))
         :hook ((after-init . persistent-scratch-autosave-mode)iu
                (lisp-interaction-mode . persistent-scratch-mode))
         :init
         ;; 创建 var 文件夹
         (make-directory (expand-file-name "var" user-emacs-directory) t)

         (setq persistent-scratch-backup-file-name-format "%Y-%m-%d"
               persistent-scratch-backup-directory (expand-file-name "var/persistent-scratch" user-emacs-directory)
               persistent-scratch-save-file (expand-file-name "var/.persistent-scratch" user-emacs-directory))
         (persistent-scratch-setup-default)

         )))

#+end_src
*** Buffer shortcuts.
#+begin_src emacs-lisp :tangle etc/init-key.el
   (lazy-load-global-keys
   '(
     ("C-c b"  . my-hydra-buffers/body)
     ("S-SPC B"  . my-hydra-buffers/body)
     ("M-<f7>" . suk-read-mode)
     ("<f7>"   . olivetti-mode)
     ("C-;"    . suk/close-current-buffer) ;关闭当前buffer
     )
   "buffer-extension")

  ;; (lazy-load-global-keys
  ;;  '(
  ;;     ("<f7>" . olivetti-mode)
  ;;   )
  ;;  "olivetti")

  ;; default keys: C-x LEFT/RIGHT C-, C-.

#+end_src
*** Buffer Move
#+begin_src emacs-lisp :tangle etc/init-key.el

  ;; --- 缓存移动
  (lazy-load-set-keys
   '(
     ;;("C-z i" . beginning-of-buffer)      ;缓存开始 M-<
     ;;("C-z k" . end-of-buffer)            ;缓存结尾 M->
     ("C-M-f" . forward-paragraph)        ;下一个段落
     ("C-M-b" . backward-paragraph)       ;上一个段落
     ("C-M-y" . backward-up-list)         ;向左跳出 LIST
     ("C-M-o" . up-list)                  ;向右跳出 LIST
     ("C-M-u" . backward-down-list)       ;向左跳进 LIST
     ("C-M-i" . down-list)                ;向右跳进 LIST
     ("C-M-a" . beginning-of-defun)       ;函数开头
     ("C-M-e" . end-of-defun)             ;函数末尾
     ))
#+end_src
*** Buffer autorevert
#+begin_src emacs-lisp :tangle suk.el
  ;; Automatically reload files was modified by external program
  (run-with-idle-timer
   1 nil
   #'(lambda()
       (require-package 'autorevert)
       (use-package autorevert
         :ensure nil
         :diminish
         :defer 2
         :hook (after-init . global-auto-revert-mode))))
#+end_src
*** Auto Save
#+begin_src emacs-lisp :tangle suk.el
  (require 'auto-save)
  (auto-save-enable)
  (setq auto-save-silent t)
  ;;(setq auto-save-delete-trailing-whitespace t)
#+end_src
*** vdiff
#+begin_src emacs-lisp :tangle suk.el
  ;; ### vdiff ###
  (lazy-load-global-keys
   '(
     ("M-s-u" . vdiff-buffers))
   "vdiff")
#+end_src
** 移缓存区之他窗口
#+begin_src emacs-lisp :tangle etc/init-key.el
  (lazy-load-global-keys
   '(
     ("C-c C-<up>"    . buf-move-up)   
     ("C-c C-<down>"  . buf-move-down)
     ("C-c C-<left>"  . buf-move-left)  
     ("C-c C-<right>" . buf-move-right)   
     )
   "buffer-move")
#+end_src
** 快切缓冲区
#+begin_src emacs-lisp :tangle suk.el
  ;; Toggle two most recent buffers
  (fset 'quick-switch-buffer [?\C-x ?b return])
  (global-set-key (kbd "s-b") 'quick-switch-buffer)
  (global-set-key (kbd "C-z b") 'quick-switch-buffer)
#+end_src
* 窗口管理
** 安装插件
#+begin_src emacs-lisp :tangle install.el
  (require-package 'transwin)
  (require-package 'ace-window)
  (require-package 'popper)
#+end_src

** 透明窗口 Transwin
#+begin_src emacs-lisp :tangle suk.el
  ;; Frame transparence
  (lazy-load-global-keys
   '(
     ("C-M-9" . transwin-inc)
     ("C-M-8" . transwin-dec)
     ("C-M-7" . transwin-toggle)
     )
   "transwin"
  )

  (with-eval-after-load 'transwin
    (setq transwin-parameter-alpha 'alpha-background))

#+end_src
** 窗口布局先生 Winner
恢复上一个窗口布局： =C-c <Left>=
回到下一个窗口布局： =C-c <Right>=

#+begin_src emacs-lisp :tangle suk.el
  ;; Restore old window configurations
  (use-package winner
    :ensure nil
    :commands (winner-undo winner-redo) ;; C-c <Left>/C-c <Right>
    :hook (after-init . winner-mode)
    :init (setq winner-boring-buffers '("*Completions*"
                                        "*Compile-Log*"
                                        "*inferior-lisp*"
                                        "*Fuzzy Completions*"
                                        "*Apropos*"
                                        "*Help*"
                                        "*cvs*"
                                        "*Buffer List*"
                                        "*Ibuffer*"
                                        "*esh command on file*"))
    )
#+end_src
** 窗口舞者 Ace-window
#+begin_src emacs-lisp :tangle suk.el
  ;; Quickly switch windows

  (use-package ace-window
    :bind (([remap other-window] . ace-window)
           (:map leader-key ("w" . ace-window-hydra/body)))
    :hook (emacs-startup . ace-window-display-mode)
    :config
    (defun toggle-window-split ()
      (interactive)
      (if (= (count-windows) 2)
          (let* ((this-win-buffer (window-buffer))
                 (next-win-buffer (window-buffer (next-window)))
                 (this-win-edges (window-edges (selected-window)))
                 (next-win-edges (window-edges (next-window)))
                 (this-win-2nd (not (and (<= (car this-win-edges)
                                             (car next-win-edges))
                                         (<= (cadr this-win-edges)
                                             (cadr next-win-edges)))))
                 (splitter
                  (if (= (car this-win-edges)
                         (car (window-edges (next-window))))
                      'split-window-horizontally
                    'split-window-vertically)))
            (delete-other-windows)
            (let ((first-win (selected-window)))
              (funcall splitter)
              (if this-win-2nd (other-window 1))
              (set-window-buffer (selected-window) this-win-buffer)
              (set-window-buffer (next-window) next-win-buffer)
              (select-window first-win)
              (if this-win-2nd (other-window 1))))
        (user-error "`toggle-window-split' only supports two windows")))

    ;; Bind hydra to dispatch list
    (add-to-list 'aw-dispatch-alist '(?w ace-window-hydra/body) t)

    ;; Select widnow via `M-1'...`M-9'
    (defun aw--select-window (number)
      "Slecet the specified window."
      (when (numberp number)
        (let ((found nil))
          (dolist (win (aw-window-list))
            (when (and (window-live-p win)
                       (eq number
                           (string-to-number
                            (window-parameter win 'ace-window-path))))
              (setq found t)
              (aw-switch-to-window win)))
          (unless found
            (message "No specified window: %d" number)))))
    (dotimes (n 9)
      (bind-key (format "M-%d" (1+ n))
                (lambda ()
                  (interactive)
                  (aw--select-window (1+ n))))))

#+end_src
** Enforce rules for popups
#+begin_src emacs-lisp :tangle suk.el
  ;; Enforce rules for popups
  (use-package popper
    :custom
    (popper-group-function #'popper-group-by-directory)
    (popper-echo-dispatch-actions t)
    :bind (:map popper-mode-map
                ("C-h z"       . popper-toggle)
                ("C-<tab>"     . popper-cycle)
                ("C-M-<tab>"   . popper-toggle-type))
    :hook (emacs-startup . popper-echo-mode)
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*$"
            "Output\\*$" "\\*Pp Eval Output\\*$"
            "^\\*eldoc.*\\*$"
            "\\*Compile-Log\\*$"
            "\\*Completions\\*$"
            "\\*Warnings\\*$"
            "\\*Async Shell Command\\*$"
            "\\*Apropos\\*$"
            "\\*Backtrace\\*$"
            "\\*Calendar\\*$"
            "\\*Fd\\*$" "\\*Find\\*$" "\\*Finder\\*$"
            "\\*Kill Ring\\*$"
            "\\*Embark \\(Collect\\|Live\\):.*\\*$"

            bookmark-bmenu-mode
            comint-mode
            compilation-mode
            help-mode helpful-mode
            tabulated-list-mode
            Buffer-menu-mode

            flymake-diagnostics-buffer-mode
            flycheck-error-list-mode flycheck-verify-mode

            gnus-article-mode devdocs-mode
            grep-mode occur-mode rg-mode deadgrep-mode ag-mode pt-mode
            youdao-dictionary-mode osx-dictionary-mode fanyi-mode

            "^\\*Process List\\*$" process-menu-mode
            list-environment-mode cargo-process-mode

            "^\\*.*eshell.*\\*.*$"
            "^\\*.*shell.*\\*.*$"
            "^\\*.*terminal.*\\*.*$"
            "^\\*.*vterm[inal]*.*\\*.*$"

            "\\*DAP Templates\\*$" dap-server-log-mode
            "\\*ELP Profiling Restuls\\*" profiler-report-mode
            "\\*Paradox Report\\*$" "\\*package update results\\*$" "\\*Package-Lint\\*$"
            "\\*[Wo]*Man.*\\*$"
            "\\*ert\\*$" overseer-buffer-mode
            "\\*gud-debug\\*$"
            "\\*lsp-help\\*$" "\\*lsp session\\*$"
            "\\*quickrun\\*$"
            "\\*tldr\\*$"
            "\\*vc-.*\\**"
            "\\*diff-hl\\**"
            "^\\*macro expansion\\**"

            "\\*Agenda Commands\\*" "\\*Org Select\\*" "\\*Capture\\*" "^CAPTURE-.*\\.org*"
            "\\*Gofmt Errors\\*$" "\\*Go Test\\*$" godoc-mode
            "\\*docker-.+\\*"
            "\\*prolog\\*" inferior-python-mode
            "\\*rustfmt\\*$" rustic-compilation-mode rustic-cargo-clippy-mode
            rustic-cargo-outdated-mode rustic-cargo-run-mode rustic-cargo-test-mode
            ))

    (with-eval-after-load 'doom-modeline
      (setq popper-mode-line
            '(:eval (let ((face (if (doom-modeline--active)
                                    'doom-modeline-emphasis
                                  'doom-modeline)))
                      (if (and (icons-displayable-p)
                               (bound-and-true-p doom-modeline-icon)
                               (bound-and-true-p doom-modeline-mode))
                          (format " %s "
                                  (nerd-icons-octicon "nf-oct-pin" :face face))
                        (propertize " POP " 'face face))))))
    :config
    (with-no-warnings
      (defun my-popper-fit-window-height (win)
        "Determine the height of popup window WIN by fitting it to the buffer's content."
        (fit-window-to-buffer
         win
         (floor (frame-height) 3)
         (floor (frame-height) 3)))
      (setq popper-window-height #'my-popper-fit-window-height)

      (defun popper-close-window-hack (&rest _)
        "Close popper window via `C-g'."
        ;; `C-g' can deactivate region
        (when (and (called-interactively-p 'interactive)
                   (not (region-active-p))
                   popper-open-popup-alist)
          (let ((window (caar popper-open-popup-alist)))
            (when (window-live-p window)
              (delete-window window)))))
      (advice-add #'keyboard-quit :before #'popper-close-window-hack)))


#+end_src
** Menu
#+begin_src emacs-lisp :tangle suk.el
  (suk/wait-for-modules
   (lambda()
     (with-eval-after-load 'pretty-hydra
       (pretty-hydra-define+ ace-window-hydra
         (:title (pretty-hydra-title "Window Management" 'faicon "nf-fa-th")
                 :foreign-keys warn
                 :quit-key ("q" "C-g"))
         ("Actions"
          (;;("TAB" other-window "switch")
           ("x" ace-delete-window "delete")
           ("X" ace-delete-other-windows "delete other" :exit t)
           ("s" ace-swap-window "swap")
           ("a" ace-select-window "select" :exit t)
           ("m" toggle-frame-maximized "maximize" :exit t)
           ("u" toggle-frame-fullscreen "fullscreen" :exit t))
          "Resize"
          (("<left>" shrink-window-horizontally "shrink H")
           ("<right>" enlarge-window-horizontally "enlarge H")
           ("<up>" shrink-window "shrink V")
           ("<down>" enlarge-window "enlarge V")
           ("n" balance-windows "balance"))
          "Split"
          (("r" split-window-right "horizontally")
           ("R" split-window-horizontally-instead "horizontally instead")
           ("v" split-window-below "vertically")
           ("V" split-window-vertically-instead "vertically instead")
           ("t" toggle-window-split "toggle")
           ("o" delete-other-windows "only this"))
          "Zoom"
          (("+" text-scale-increase "in")
           ("=" text-scale-increase "in")
           ("-" text-scale-decrease "out")
           ("0" (text-scale-increase 0) "reset"))
          "Misc"
          (("o" set-frame-font "frame font")
           ("f" make-frame-command "new frame")
           ("d" delete-frame "delete frame")
           ("z" winner-undo "winner undo")
           ("Z" winner-redo "winner redo"))
          )
         )
       (bind-key "w" #'ace-window-hydra/body leader-key)
       ))
   'ace-window
   'winner
   )
#+end_src
** 快捷键
#+begin_src emacs-lisp :tangle suk.el

  (lazy-load-global-keys
   '(
     ("C-c V" . delete-other-windows-vertically+)   ;关闭上下的其他窗口
     ("C-c H" . delete-other-windows-horizontally+) ;关闭左右的其他窗口
     ("C-'"   . delete-current-buffer-and-window)   ;关闭当前buffer, 并关闭窗口
     ("C-\""  . delete-current-buffer-window)       ;删除当前buffer的窗口
     ("M-s-o" . toggle-one-window)                  ;切换一个窗口
     ("C-x O" . toggle-window-split)
     )
   "window-extension")
#+end_src
* 书签 Bookmark
#+begin_src emacs-lisp :tangle suk.el

  (lazy-load-local-keys
   '(
     ("b" . suk/bookmark-launcher/body)
     )
   leader-key
   "my-bookmark"
   ) ;; 有的函数跟basic-toolkit重复

  ;; C-x r l to list bookmarks
#+end_src

* 搜索

** Setup
#+begin_src emacs-lisp :tangle etc/init-search.el
  (provide 'init-search)
#+end_src
Add to suk.el
#+begin_src emacs-lisp :tangle suk.el
  (require 'init-search)
#+end_src
** Search tools
*** 安装插件
#+begin_src emacs-lisp :tangle install.el
  ;;在 Windows 上，如果你用 Emacs GUI 版本，默认有时会找不到 PATH 中的程序，
  ;;可以在 Emacs 配置里手动添加环境变量，或者使用
  ;; exec-path-from-shell 等包（但这个包通常在 macOS/Linux下更常用；
  ;;Windows 下可能需要手工设置 exec-path）。
  (require-package 'exec-path-from-shell)
  ;; (setq exec-path (append exec-path '("C:/path/to/python" "C:/path/to/node")))
  ;; (setenv "PATH" (concat (getenv "PATH") ";C:\\path\\to\\python;C:\\path\\to\\node"))




  ;; (require-package 'counsel) ; counsel => swiper => ivy
  ;; (require-package 'counsel-bbdb)
  ;; (require-package 'counsel-gtags)
  ;; (require-package 'counsel-css)
  (require-package 'bbdb)

  (require-package 'ivy)
  (require-package 'ivy-posframe)
  (require-package 'find-file-in-project)
  (require-package 'swiper)

  (require-package 'pinyinlib)
  (require-package 'ace-pinyin)
  (require-package 'goto-chg)
  (require-package 'avy)
  (require-package 'avy-zap)

#+end_src
*** ivy
#+begin_src emacs-lisp :tangle etc/init-search.el
  (use-package ivy
   :ensure t
   :diminish (ivy-mode)
   :config
   (ivy-mode 1)
   (setq ivy-use-virtual-buffers t)
   (setq enable-recursive-minibuffers t)
   (setq ivy-count-format "%d/%d ")
   (setq ivy-display-style 'fancy)

   (define-key ivy-minibuffer-map [escape] 'minibuffer-keyboard-quit)
 
   (when (display-graphic-p)    
     (use-package ivy-posframe))
   )
#+end_src
*** counsel
#+begin_src emacs-lisp :tangle etc/init-search.el
  (use-package counsel
    :after ivy
    :ensure t
    :bind
    (
     ;; ("M-y" . counsel-yank-pop)
     ;; ("C-x C-f" . counsel-find-file)
     ("M-x" . counsel-M-x)
    )
  )
#+end_src
*** swiper
#+begin_src emacs-lisp :tangle etc/init-search.el

  (use-package swiper
    :bind
    (
     ("C-x M-s" . swiper)
     ("C-s"     . swiper-isearch)
     ("C-r"     . swiper-isearch)
     ("C-c C-r" . ivy-resume)
     )
    :config
    (progn
      ;;(ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      ;;(setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history))
    )


#+end_src
*** avy
#+begin_src emacs-lisp :tangle etc/init-search.el
  (lazy-load-global-keys
   '(("C-:"   . avy-goto-char)
      ("C-M-;" . avy-goto-char-2)
      ("M-g l" . avy-goto-line)
      ("M-g w" . avy-goto-word-1)
      ("M-g W" . avy-goto-word-0))
   "avy"
   )

  (with-eval-after-load 'avy
    (setq avy-all-windows nil
          avy-all-windows-alt t
          avy-background t
          avy-style 'pre)
    (add-hook 'after-init-hook #'avy-setup-default)
    )

  (with-eval-after-load 'avy-zap
    ;; Kill text between the point and the character CHAR
    (lazy-load-global-keys
     '(("M-z" . avy-zap-to-char-dwim)
       ("M-Z" . avy-zap-up-to-char-dwim))
     "avy-zap"
     "C-z")
    )


#+end_src
** Grep
#+begin_src emacs-lisp :tangle etc/init-tools.el
  
  ;; Writable `grep' buffer
  (use-package wgrep
    :init
    (setq wgrep-auto-save-buffer t
          wgrep-change-readonly-file t))

  ;; Search tool
  (use-package grep
    :ensure nil
    :autoload grep-apply-setting
    :init
    (when (executable-find "rg")
      (grep-apply-setting
       'grep-command "rg --color=auto --null -nH --no-heading -e ")
      (grep-apply-setting
       'grep-template "rg --color=auto --null --no-heading -g '!*/' -e <R> <D>")
      (grep-apply-setting
       'grep-find-command '("rg --color=auto --null -nH --no-heading -e ''" . 38))
      (grep-apply-setting
       'grep-find-template "rg --color=auto --null -nH --no-heading -e <R> <D>")))


  ;; Fast search tool `ripgrep'
  (use-package rg
    :hook (after-init . rg-enable-default-bindings)
    :bind (:map rg-global-map
                ("c" . rg-dwim-current-dir)
                ("f" . rg-dwim-current-file)
                ("m" . rg-menu))
    :init (setq rg-group-result t
                rg-show-columns t)
    :config
    (cl-pushnew '("tmpl" . "*.tmpl") rg-custom-type-aliases))

#+end_src
** 星际译王命令行
#+begin_src emacs-lisp :tangle achrives-and-examples.el
  ;;; ### Sdcv ###
  ;;; --- 星际译王命令行
  (when  (eq system-type 'gnu/linux)
      (lazy-load-global-keys
       '(("p" . sdcv-search-pointer)           ;光标处的单词, buffer显示
         ("P" . sdcv-search-pointer+)          ;光标处的单词, tooltip显示
         ("i" . sdcv-search-input)             ;输入的单词, buffer显示
         (";" . sdcv-search-input+)
         ("y" . my-youdao-dictionary-search-at-point)
         ("Y" . youdao-dictionary-search-at-point)
         ("g" . google-translate-at-point)
         ("G" . google-translate-query-translate)
         ("s" . google-translate-smooth-translate)
         ("f" . fanyi-dwim)
         ("d" . fanyi-dwim2)
         ("h" . fanyi-from-history)
         )
       "init-translate"
       "C-z"))
#+end_src
* Org
** Setup
#+begin_src emacs-lisp :tangle etc/init-org.el
  (provide 'init-org)
#+end_src
Add to suk.el
#+begin_src emacs-lisp :tangle suk.el
  (require 'init-org)
#+end_src

** Base settings
#+begin_src emacs-lisp :tangle etc/init-org.el
  ;;(message org-files-directory)
  ;; 创建 var 文件夹
  (make-directory (expand-file-name "var" user-emacs-directory) t)

  ;; 设置 org-persist 目录
  (setq org-persist-directory (expand-file-name "var/org-persist" user-emacs-directory))
  ;; 创建新的 org-persist 目录（如果不存在）
  (unless (file-exists-p org-persist-directory)
    (make-directory org-persist-directory t))
  (require 'org)
  ;; To speed up startup, don't put to init section
  (setq org-modules nil)
  ;;(setq org-startup-indented t)
  (setq org-startup-folded nil)
  (setq org-ellipsis  "... → ")
  (setq org-pretty-entities t)
  (setq org-hide-emphasis-markers t)
  (setq org-hide-leading-stars nil)
  (setq org-blank-before-new-entry '((heading) (plain-list-item . auto)))
  (setq org-insert-heading-respect-content t)
  (setq org-yank-adjusted-subtrees t)
  ;; Use the current window for C-c ' source editing
  (setq org-src-window-setup 'current-window)
  ;; Use the current window for indirect buffer display
  (setq org-indirect-buffer-display 'current-window)
  (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))

  (setq org-tags-column -80)

  (setq org-catch-invisible-edits 'smart)

  ;; 设置打开某种文件类型
  (setq org-file-apps
        '((auto-mode . emacs)
          ("\\.mm\\'" . system)
          ("\\.x?html?\\'" . system)
          ("\\.pdf\\'" . system)))

    ;; 运行 Org Babel Tangle 命令：`M-x org-babel-tangle`。
    ;; 从 org 文件中生成 el 配置文件
    ;; 保存 user-emacs-directory(~/.emacs.d/) 文件下的 org 时，
    ;; 导出文件中 elisp 代码到文件中。
    (defun suk/org-babel-tangle-config ()
      (when (string-equal (file-name-directory (buffer-file-name))
                          (expand-file-name user-emacs-directory)) ; ~/.emacs.d
        (let ((org-confirm-babel-evaluate nil))
          (org-babel-tangle))))

    (add-hook 'org-mode-hook
              (lambda ()
                (add-hook 'after-save-hook #'suk/org-babel-tangle-config)))


    ;;;###autoload
    (defun suk/load-theme-org()
      (interactive)
      (load-theme 'doom-solarized-light)
      )

    ;;;###autoload
    (defun suk/load-theme-default()
      (interactive)
      (load-theme 'doom-one)
      )
#+end_src
** GTD
#+begin_src emacs-lisp :tangle etc/init-org.el
  ;; GTD
  (setq org-use-fast-todo-selection t)
  ;; ! 的含义是记录某项更改为状态的时间。我不把这个添加到完成的状态，是因为它们已
  ;; 经被记录了。

  ;; @ 符号表示带理由的提示，所以当切换到 WAITTING 时，Org 模式会问我为什么，并将
  ;; 这个添加到笔记中。
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n!)"  "|" "DONE(d!)" "CANCELLED(c@/!)")
          (sequence "WAIT(w@/!)" "HOLD(h@/!)" "|" "ABORT" "SOME" "PHONE" "MEETING")))
  (setq org-todo-keyword-faces
        '(("TODO" :foreground "red" :weight bold)
          ("NEXT" :foreground "blue" :weight bold)
          ("DONE" :foreground "forest green" :weight bold)
          ("WAIT" :foreground "orange" :weight bold)
          ("HOLD" :foreground "magenta" :weight bold)
          ;;("CANCELLED" :foreground "forest grey" :weight bold)
          ("ABORT" :foreground "yellow" :weight bold)
          ("SOME" :foreground "lightgreen" :weight bold)
          ("MEETING" :foreground "lightblue" :weight bold)
          ("PHONE" :foreground "pink" :weight bold) ))


  (setq org-priority-faces
        '((?A . error)
          (?B . warning)
          (?C . success)))

  (setq org-tag-alist '((:startgroup . nil)
                      ("Levle1" . ?u)     ;; 第一象限：紧急且重要
                      ("Level2" . ?n)     ;; 第二象限：不紧急但重要
                      ("Level3" . ?i)     ;; 第三象限：紧急但不重要
                      ("Level4" . ?t)     ;; 第四象限：不紧急且不重要
                      (:endgroup . nil)))

  ;; 可以使用 org-tags-view 来过滤和查看不同象限的任务
  ;; 例如：M-x org-tags-view RET +urgent-important
  ;; The triggers break down to the following rules:
  ;;   Moving a task to CANCELLED adds a CANCELLED tag
  ;;   Moving a task to WAITTING adds a WAITTING tag
  ;;   Moving a task to HOLD adds WAITTING and HOLD tags
  ;;   Moving a task to a done state removes WAITTING and HOLD tags
  ;;   Moving a task to TODO removes WAITTING, CANCELLED, and HOLD tags
  ;;   Moving a task to NEXT removes WAITTING, CANCELLED, and HOLD tags
  ;;   Moving a task to DONE removes WAITTING, CANCELLED, and HOLD tags
  (setq org-todo-state-tags-triggers
        '(("CANCELLED" ("CANCELLED" . t))
          ("WAIT" ("WAITTING" . t))
          ("HOLD" ("WAITTING") ("HOLD" . t))
          (done ("WAITING") ("HOLD"))
          ("DONE" ("WAITTING") ("CANCELLED") ("HOLD"))
          ("ABORT" ("WAITTING") ("CANCELLED") ("HOLD"))
          ("TODO" ("WAITTING") ("CANCELLED") ("HOLD"))
          ("NEXT" ("WAITTING") ("CANCELLED") ("HOLD"))
          ("SOME" ("WAITTING") ("CANCELLED") ("HOLD"))))
  (setq org-log-done 'time)

  ;; Start the weekly agenda on Monday
  (setq org-agenda-start-on-weekday 1)
  (setq org-agenda-diary-file (expand-file-name "diary.org" org-files-directory))
  (setq org-agenda-block-separator ?─)
  (setq org-agenda-time-grid
        '((daily today require-timed)
          (800 1000 1200 1400 1600 1800 2000)
          " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
  (setq org-agenda-current-time-string
        "⭠ now ─────────────────────────────────────────────────")
  (setq org-agenda-diary-file (expand-file-name "diary.org" org-files-directory))
  ;; setup agenda files
  ;; org-mode manages the org-agenda-files variable automatically
  ;; using C-c [ and C-c ] to add and remove files respectively.
  ;; They can be files or directories.
  (setq org-agenda-files
        `(,(expand-file-name "gtd.org" org-files-directory)
          ,(expand-file-name "work.org" org-files-directory)
          ,(expand-file-name "finished.org" org-files-directory)
          ,(expand-file-name "cancel.org" org-files-directory)
          ,(expand-file-name "journal.org" org-files-directory)
          ,(expand-file-name "trash.org" org-files-directory)
          ;;,(expand-file-name "folder" org-files-directory)
          ))

#+end_src


** Archive
  - C-c C-x C-a (org-archive-subtree)：最常用的归档命令，将当前子树移动到指定归档文件/节点。
  - C-c C-x a (org-toggle-archive-tag)：给当前条目添加/移除 ARCHIVE 标签，就地归档而不移动位置。
  - C-c C-x A (org-archive-to-archive-sibling)：在同一层级创建“归档兄弟节点”。
    
  根据自己的工作流和对“归档”的理解（是要移动还是仅仅隐藏）来选择合适的
  命令。如果你想真正把完成/历史条目“挪走”，多用 C-c C-x C-a；如果只是
  想让它们保持在原处却不再显示，则可以用 C-c C-x a。另外，也别忘了通过
  org-archive-location 配置好归档文件或归档标题，以便管理归档内容更加
  顺畅。
#+begin_src emacs-elisp :tangle etc/init-org.el
  ;; default is "%s_archive::", I want to archive in a sginle file.
  ;; use C-u C-c C-x C-a to change
  (setq org-archive-location "archive.org::* Archived Tasks")
#+end_src

** Capture
#+begin_src emacs-lisp :tangle etc/init-org.el
  ;; capture template
  (setq org-default-notes-file (expand-file-name "notes.org" org-files-directory))
  ;; Capture templates for: TODO tasks, Notes,
  ;; appointments, phone calls, meetings, and (setq
  ;; org-protocol)
  (setq org-capture-templates
        '(
          ("t" "Todo"
           entry (file+headline (expand-file-name "gtd.org" org-files-directory) "Tasks")
           "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
          ("n" "Note"
           entry (file (expand-file-name "notes.org" org-files-directory))
           "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
          ("r" "Respond"
           entry (file (expand-file-name "gtd.org" org-files-directory))
           "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n"
           :clock-in t :clock-resume t :immediate-finish t)
          ("j" "Journal"
           entry (file+datetree (expand-file-name "journal.org" org-files-directory))
           "* %?\nEntered on %U\n  %i\n  %a" :clock-in t :clock-resume t)
          ("w" "Review"
           entry (file (expand-file-name "gtd.org" org-files-directory))
           "* TODO Review %c\n%U\n"
           :immediate-finish t)
          ("m" "Meeting"
           entry (file (expand-file-name "gtd.org" org-files-directory))
           "* MEETING with %? :MEETING:\n%U"
           :clock-in t :clock-resume t)
          ("p" "Phone call"
           entry (file (expand-file-name "gtd.org" org-files-directory))
           "* PHONE %? :PHONE:\n%U"
           :clock-in t :clock-resume t)
          ("h" "Habit"
           entry (file (expand-file-name "gtd.org" org-files-directory))
           "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")
          ))
#+end_src
** Refile
#+begin_src emacs-lisp :tangle etc/init-org.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Refile settings
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Exclude DONE state tasks from refile targets
      ;;;###autoload
  (defun suk/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets."
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))

  ;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
  (setq org-refile-targets (quote ((nil :maxlevel . 9) (org-agenda-files :maxlevel . 9))))
  ;; Use full outline paths for refile targets
  (setq org-refile-use-outline-path t)
  (setq org-refile-target-verify-function 'suk/verify-refile-target)
  ;; Allow refile to create parent tasks with confirmation
  (setq org-refile-allow-creating-parent-nodes 'confirm)

#+end_src

*** Quick asscess
#+begin_src emacs-lisp :tangle etc/init-org.el
  ;; Registers allow you to jump to a file or other location quickly.
  ;; To jump to a register, use C-x r j followed by the letter of the register.
  ;; Using registers for all these file shortcuts is probably a bit of
  ;; a waste since I can easily define my own keymap, but since I rarely
  ;; go beyond register A anyway. Also, I might as well add shortcuts for refiling.
  (require 'bookmark)
  (defvar my-refile-map (make-sparse-keymap))
  (defmacro my-defshortcut (key file)
  `(progn
     (set-register ,key (cons 'file ,file))
     (bookmark-store ,file (list (cons 'filename ,file)
                                 (cons 'position 1)
                                 (cons 'front-context-string "")) nil)
     (define-key my-refile-map
                 (char-to-string ,key)
                 (lambda (prefix)
                   "Call org-refile to target: FILE"
                   (interactive "p")
                   (let ((org-refile-targets (list (cons (list ,file) '(:maxlevel . 3))))
                         (current-prefix-arg (or current-prefix-arg '(4))))
                     (call-interactively 'org-refile))))))

  (defvar my-org-last-refile-marker nil "Marker for last refile")
  (defun my-org-refile-in-file (&optional prefix)
    "Refile to a target within the current file."
    (interactive)
    (let ((org-refile-targets (list (cons (list (buffer-file-name)) '(:maxlevel . 5)))))
      (call-interactively 'org-refile)
      (setq my-org-last-refile-marker (plist-get org-bookmark-names-plist :last-refile))))

  (defun my-org-refile-to-previous ()
    "Refile subtree to last position from `my-org-refile-in-file'."
    (interactive)
    (save-selected-window
      (when (eq major-mode 'org-agenda-mode)
        (org-agenda-switch-to))
      (org-cut-subtree)
      (save-window-excursion
        (save-excursion
          (bookmark-jump (plist-get org-bookmark-names-plist :last-refile))
          (let ((level (org-current-level)))
            (org-end-of-subtree t t)
            (org-paste-subtree))))))



  (define-key my-refile-map "," 'my-org-refile-to-previous)
  (define-key my-refile-map "." 'my-org-refile-in-file)
  (my-defshortcut ?e "~/.emacs.d/README.org")
  (my-defshortcut ?g (expand-file-name "gtd.org" org-files-directory))
  (my-defshortcut ?w (expand-file-name "work.org" org-files-directory))
  (my-defshortcut ?f (expand-file-name "finished.org" org-files-directory))
  (my-defshortcut ?c (expand-file-name "cancel.org" org-files-directory))
  (my-defshortcut ?t (expand-file-name "trash.org" org-files-directory))
  (my-defshortcut ?n (expand-file-name "notes.org" org-files-directory))
  (my-defshortcut ?j (expand-file-name "journal.org" org-files-directory))
  (my-defshortcut ?N "~/notes")
  ;; 额外定义的位置
  (load-if-exists (expand-file-name "my-defshortcuts.el" suk-emacs-config-dir))

#+end_src
** Exporter
#+begin_src emacs-lisp :tangle etc/init-org.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; EXPORTER
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
  ;; Inline images in HTML instead of producting links to the image
  (setq org-html-inline-images t)
  ;; Use (setq org-manual.css from the norang website for export document stylesheets)
  ;; (setq org-html-head-extra "<link rel=\"stylesheet\" href=\"org-manual.css\" type=\"text/css\" />")
  (setq org-html-head-include-default-style nil)
  ;; Do not generate internal css formatting for HTML exports
  (setq org-export-htmlize-output-type (quote css))
  ;; Increase default number of headings to export
  (setq org-export-headline-levels 6)
  (setq org-export-coding-system 'utf-8)
  (setq org-table-export-default-format "orgtbl-to-csv")
  ;; Do not generate internal css formatting for HTML exports
  (setq org-export-htmlize-output-type 'css)
  (setq org-export-with-timestamps nil)
  ;; _ 不转义，相当于#+OPTIONS: ^:{} ~:{}
  (setq org-export-with-sub-superscripts "{}") ; 处理
  (setq org-use-sub-superscripts '{}) ; 显示

  ;; Embed inline CSS read from a file.
  ;;;###autoload
  (defun null-or-unboundp (var)
    "Return t if VAR is either unbound or nil, otherwise return nil."
    (or (not (boundp var))
        (null (symbol-value var))))

  ;;;###autoload
  (defun my-org-inline-css-hook (exporter)
    "Insert custom inline css"
    (when (eq exporter 'html)
      (let* ((dir (ignore-errors (file-name-directory (buffer-file-name))))
             (path (concat dir "style.css"))
             ;;(path  org-css-file)
             (homestyle (and (or (null dir) (null (file-exists-p path)))
                             (not (null-or-unboundp 'my-org-inline-css-file))))
             (final (if homestyle my-org-inline-css-file path)))
        (if (file-exists-p final)
            (progn
              (setq-local org-html-head-include-default-style nil)
              (setq-local org-html-head
                          (concat
                           "<style type=\"text/css\">\n"
                           "<!--/*--><![CDATA[/*><!--*/\n"
                           (with-temp-buffer
                             (insert-file-contents final)
                             (buffer-string))
                           "/*]]>*/-->\n"
                           "</style>\n")))))))

  (add-hook 'org-export-before-processing-hook #'my-org-inline-css-hook)

  ;; https://github.com/marsmining/ox-twbs
  ;; M-x package-install [RET] ox-twbs [RET]
  ;; If the installation doesn’t work try refreshing the package list:
  ;; M-x package-refresh-contents [RET]
  ;; usage: org-twbs-export-to-html

  (use-package ox-twbs)
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "s-\\") 'my-org-publish-buffer)))

  (defun my-org-publish-buffer ()
    (interactive)
    (save-buffer)
    (org-twbs-export-to-html))
  (add-hook 'org-mode-hook
            (lambda ()
              "Beautify org symbols."
              (when suk-prettify-org-symbols-alist
                (if prettify-symbols-alist
                    (push suk-prettify-org-symbols-alist prettify-symbols-alist)
                  (setq prettify-symbols-alist suk-prettify-org-symbols-alist)))
              (prettify-symbols-mode 1)
              (abbrev-mode 1)
              (setq truncate-lines nil)
              (set-fill-column 70)
              (turn-on-font-lock)
              (load-org-font)
              ))
  (defun my-execute-function-and-shell-command-async ()
    "执行自定义函数逻辑，然后异步调用外部 shell 命令，传递当前文件名的扩展名替换为 .html 的路径作为参数。"
    (interactive)
    ;; 检查当前缓冲区是否关联有文件
    (if (buffer-file-name)
        (let* ((current-file (buffer-file-name))
               ;; 使用 file-name-sans-extension 获取不带扩展名的文件名
               ;;(base-name (file-name-sans-extension current-file))
               ;; 构建新的文件名，替换扩展名为 .html
               ;;(html-file (my-cygpath-convert (concat base-name ".html")))
               ;; 定义要执行的外部命令，这里以 ls -l 为例
               ;; (command (if sys/win32p
               ;;              ;;"echo You may need to cleanup the html file."
               ;;              (format "c:/green/msys64/usr/bin/bash.exe --login /c/green/htm-cleanup.sh %s" html-file)
               ;;            (format "htm-cleanup.sh %s" (shell-quote-argument html-file))))
               ;; 定义输出缓冲区名称
               ;;(output-buffer "*Shell Command Output*")
               )
          (my-org-publish-buffer)
          ;; 执行自定义函数逻辑
          (message "正在处理文件: %s" current-file)

          ;; 异步调用外部 shell 命令
          ;;(async-shell-command command output-buffer)

          ;; 显示提示信息
          ;;(message "已启动异步命令: %s" command)
          )
      (message "当前缓冲区没有关联的文件。")))


  (defun my-cygpath-convert (win-path)
    "Use cygpath to convert WIN-PATH to /cygdrive style."
    (let ((output (shell-command-to-string
                   (format "D:/green/msys64/usr/bin/cygpath -u \"%s\"" win-path))))
      (string-trim output)))

  ;; 绑定快捷键 C-c e 到上述函数
  (global-set-key (kbd "C-S-e") #'my-execute-function-and-shell-command-async)

  ;;(global-set-key (kbd "C-S-e") #'my-org-publish-buffer)

  ;; covert to html
  (use-package htmlize :defer 2)
  ;;(require-package 'ob-sagemath)
#+end_src
** Attachments
#+begin_src emacs-lisp :tangle etc/init-org.el
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   ;;; Attachments
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (setq org-id-method (quote uuidgen))
  ;; Say you want to attach a file x.sql to your current task. Create
  ;; the file data in /tmp/x.sql and save it.
  ;;
  ;; Attach the file with C-c C-a a and enter the filename: x.sql.
  ;; This generates a unique ID for the task and adds the file in the
  ;; attachment directory.
  ;;
  ;; * Attachments                                     :ATTACH:
  ;;   :PROPERTIES:
  ;;   :Attachments: x.sql
  ;;   :ID:       f1d38e9a-ff70-4cc4-ab50-e8b58b2aaa7b
  ;;   :END:
  ;;
  ;; The attached file is saved in
  ;; data/f1/d38e9a-ff70-4cc4-ab50-e8b58b2aaa7b/. Where it goes
  ;; exactly isn't important for me 鈥?as long as it is saved and
  ;; retrievable easily. Org-mode copies the original file /tmp/x.sql
  ;; into the appropriate attachment directory.
  ;;
  ;; Tasks with attachments automatically get an ATTACH tag so you can
  ;; easily find tasks with attachments with a tag search.
  ;;
  ;; To open the attachment for a task use C-c C-a o. This prompts for
  ;; the attachment to open and TAB completion works here.
  
#+end_src
** Use toc-org
#+begin_src emacs-lisp :tangle etc/init-org.el
  ;; org-mode
  (use-package toc-org)
#+end_src
** Use hydra
#+begin_src emacs-lisp :tangle etc/init-org.el

  (with-eval-after-load 'hydra
    (defhydra hydra-global-org (:color blue)
      "
  ^Org^
  -----------------------------------------------------
  _t_ Start Timer  _w_ Clock In
  _s_ Stop Timer   _o_ Clock out
  _r_ Set Timer    _j_ Clock Goto
  _p_ Print Timer  _c_ Clock Cancel
  _C_ Capture      _d_ Clock Display
  _l_ Last Capture _R_ Clock Report
                   _m_ Clock Modeline
  _q_ Quit       
  "
      ("t" org-timer-start "Start Timer")
      ("s" org-timer-stop "Stop Timer")
      ("r" org-timer-set-timer "Set Timer") ; This one requires you be in an orgmode doc, as it sets the timer for the header
      ("p" org-timer "Print Timer")
      ("i" (org-clock-in '(4)) "Clock-In")  ; used with (org-clock-persistence-insinuate) (setq org-clock-persist t) C-c C-x C-i
      ("o" org-clock-out "Clock-Out")       ; you might also want (setq org-log-note-clock-out t) C-c C-x C-o
      ("j" org-clock-goto "Clock Goto")     ; global visit the clocked task C-c C-x C-j
      ("C" org-capture "Capture")           ; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html
      ("l" org-capture-goto-last-stored "Last Capture")
      ("d" org-clock-display) ; C-c C-x C-d
      ("R" org-clock-report) ; C-x C-x C-r
      ;; C-c C-x C-e 手动插入纪录时间
      ("c" org-clock-cancel) ;; C-c C-x C-x 中断任务
      ("m" org-clock-show-current) ;; C-c C-x C-q 在modeline查看当前Clock 状态
      ("q" nil "Quit")                      ; 退出
      ))


#+end_src

** Use org-modern
#+begin_src emacs-lisp :tangle etc/init-org.el
  ;;Prettify UI
  (use-package org-modern
    :custom
    ;;  (org-modern-table nil)
    (prettify-symbols-alist nil)
    :config
    ;; Disable Prettify Symbols mode globally or locally as needed
    ;;(global-prettify-symbols-mode -1)
    :hook ((org-mode . org-modern-mode)
           (org-agenda-finalize . org-modern-agenda)
           ))
  
#+end_src
** Use org-roam
#+begin_src emacs-lisp :tangle etc/init-org.el
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    (setq org-roam-db-location "~/.emacs.d/var/org-roam.db")
    :custom
    ;; (org-roam-directory (file-truename "~/RoadNotes"))
    ;; The file-truename function is only necessary when you use
    ;; symbolic links inside org-roam-directory: Org-roam does not
    ;; resolve symbolic links.
    (make-directory (expand-file-name "daily" org-roam-directory) t)
    (org-roam-completion-everywhere t)
    (org-roam-dailies-capture-templates
     '(("d" "default" entry "* %<%I:%M %p>: %?"
        :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("n" . org-roam-dailies-capture-today)
           ("T" . org-roam-dailies-capture-tomorrow)
           ("v" . org-roam-dailies-capture-date)
           ("d" . org-roam-dailies-goto-today)
           ("t" . org-roam-dailies-goto-tomorrow)
           ("y" . org-roam-dailies-goto-yesterday)
           ("c" . org-roam-dailies-goto-date)
           ("b" . org-roam-dailies-goto-next-note)
           ("f" . org-roam-dailies-goto-previous-note)
           )
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode)

    )
#+end_src
** Add shortcuts
#+begin_src emacs-lisp :tangle etc/init-key.el
  ;;; --- 笔记管理和组织
  (define-prefix-command 'F9-map)
  (global-set-key (kbd "<f9>") 'F9-map)
  (lazy-load-set-keys
   '(("a" . org-agenda)
     ("A" . org-attach)
     ("s" . show-org-agenda)
     ("c" . org-capture)
     ("i" . org-toggle-inline-images)
     ("l" . org-toggle-link-display)
     ("d" . calendar)
     ("r" . my-refile-map)
     ("h" . hydra-global-org/body)
     )
  nil
   "<f9>")
    (define-prefix-command 'my-refile-map)
    (global-set-key (kbd "C-c r") 'my-refile-map)
    ;; I use C-c c to start capture mode
    (global-set-key (kbd "C-c c") #'org-capture)
    ;; ;; (global-set-key (kbd "C-c C") 'org-capture)
    (global-set-key "\C-cl" #'org-store-link)
    (global-set-key "\C-ca" #'org-agenda)
    ;;(global-set-key "\C-cb" #'org-iswitchb)

    ;; C-',  C-, is org-cycle-agenda-files keys
    ;; 新版的org-mode使用C-c C-, 替换了 <sTAB 提供的模板功能。

#+end_src

* Recentf
#+begin_src emacs-lisp :tangle suk.el
  ;; Recentf
  (setq recentf-save-file (concat suk-emacs-var-dir "/recentf"))
  ;;(setq recentf-save-file "~/.emacs.d/var/recentf")
  (use-package recentf
    :ensure nil
    :defer 1
    :init
    (setq recentf-save-file (concat suk-emacs-var-dir "/recentf"))
    ;;(setq recentf-save-file "~/.emacs.d/var/recentf")
    ;;(add-hook 'after-init-hook #'recentf-mode)
    (setq recentf-max-saved-items 500)
    (setq recentf-max-saved-items 17)
    (recentf-mode)
    (recentf-track-opened-file)

    :config
    (add-to-list 'recentf-exclude (expand-file-name package-user-dir))
    (add-to-list 'recentf-exclude ".cache")
    (add-to-list 'recentf-exclude ".cask")
    (add-to-list 'recentf-exclude ".elfeed")
    (add-to-list 'recentf-exclude "bookmarks")
    (add-to-list 'recentf-exclude "cache")
    (add-to-list 'recentf-exclude "persp-confs")
    (add-to-list 'recentf-exclude "recentf")
    (add-to-list 'recentf-exclude "url")
    (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'")
    (defun suk/recentf-exclude-p (file)
      (let ((file-dir (file-truename (file-name-directory file))))
        (-any-p (lamdba (dir)
                        (string-prefix-p dir file-dir))
                (mapcar 'file-truename (list var package-user-dir)))))
    (add-to-list 'recentf-exclude #'suk/recentf-exclude-p)
    )

#+end_src
* Session
加载保存的事务。
#+begin_src emacs-lisp :tangle suk.el
  (use-package session)
  (require 'auto-save)
  ;; todo dont load
  (require 'basic-toolkit)

  (setq desktop-load-locked-desktop t) ; don't popup dialog ask user, load anyway
  (setq desktop-restore-frames nil)    ; don't restore any frame

  (defun emacs-session-restore ()
    "Restore emacs session."
    (interactive)
    (ignore-errors
      ;; Kill other windows.
      (delete-other-windows)
      ;; Kill unused buffers.
      (kill-unused-buffers)
      ;; Restore session.
      (desktop-read "~/.emacs.d/var/")
      ))

  (defun emacs-session-save (&optional arg)
    "Save emacs session."
    (interactive "p")
    (ignore-errors
      (if (equal arg 4)
          ;; Kill all buffers if with prefix argument.
          (mapc 'kill-buffer (buffer-list))
        ;; Kill unused buffers.
        (kill-unused-buffers)
        ;; Save all buffers before exit.
        (auto-save-buffers))
      ;; Save session.
      (make-directory "~/.emacs.d/var/" t)
      (desktop-save "~/.emacs.d/var/")
      ;; Exit emacs.
      (kill-emacs)))

  (global-set-key (kbd "S-<f9>") 'emacs-session-save)
  (global-set-key (kbd "C-<f9>") 'emacs-session-save)

  (emacs-session-restore)
#+end_src
* Completion
** install
#+begin_src emacs-lisp :tangle install.el
  (require-package 'company)
  (require-package 'company-box)
#+end_src
** setup
#+begin_src emacs-lisp :tangle etc/init-completion.el
  (provide 'init-completion)
#+end_src
Add to suk.el
#+begin_src emacs-lisp :tangle suk.el
  (require 'init-completion)
#+end_src
** Vertico
:PROPERTIES:
:CUSTOM_ID: setup-vertico
:END:
<<setup-vertico>>

Vertico 是 Emacs 中的一款用于增强 minibuffer 输入体验的插件，特别是在
逐步改进 completion（自动补全）和选择候选项时的界面表现。

主要特点

   + 垂直选择界面：

       Vertico 提供了一种垂直的候选项显示方式，与默认的 minibuffer 不
     同，它通过在屏幕上垂直列出候选项，并允许你快速浏览、选择候选项。
     它不仅仅是补全，还是一个直观的选择界面。

   * 快速和轻量：

      它的设计理念是简单、轻量并且快速。它不会像其他一些补全框架那样带
     有过多复杂的功能，而是专注于提供流畅的、响应迅速的候选项显示。

   * 兼容性强：

      Vertico 是与 completion 和 minibuffer 的默认系统紧密集成的，并且
     它支持与其他补全框架如 company-mode 和 corfu 一起使用，帮助你在选
     择候选项时提供更好的体验。

   * 适配性：

     它能够与很多流行的插件（如 Consult, Orderless, Embark）无缝配合，
     扩展候选项选择的功能。
        
#+begin_src emacs-lisp :tangle etc/init-completion.el
  (when (display-graphic-p)
    (use-package vertico
      :bind (:map vertico-map
                  ("RET"   . vertico-directory-enter)
                  ("DEL"   . vertico-directory-delete-char)
                  ("M-DEL" . vertico-directory-delete-word))
      :hook ((after-init . vertico-mode)
             (rfn-eshadow-update-overlay . vertico-directory-tidy))
      )
     (use-package vertico-posframe
        :ensure t
        :after (posframe vertico)
        :hook (vertico-mode . vertico-posframe-mode)
        :init (setq vertico-posframe-parameters '((left-fringe  . 8) (right-fringe . 8)))
        )
    )
#+end_src
** corfu
#+begin_src emacs-lisp :tangle etc/init-completion.el
  (use-package corfu
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-auto-prefix 2)
    (corfu-auto-delay 1)
    (corfu-popupinfo-delay '(0.5 . 0.2))
    (corfu-preview-current 'insert)
    (corfu-preselect 'prompt)
    (corfu-on-exeact-match nil)
    :bind (:map corfu-map
                ("TAB" . corfu-next)
                ([tab] . corfu-next)
                ("C-n" . corfu-next)
                ("S-TAB" . corfu-previous)
                ([backtab] . corfu-previous)
                ("C-p" . corfu-previous)
                ("S-<return>" . corfu-insert)
                ("RET" . nil)
                ("<return>" . corfu-mode)
                ("C-y" . corfu-yank)
                ("C-g" . corfu-abort))
    :init
    (global-corfu-mode)
    (corfu-history-mode))

  (use-package nerd-icons-corfu
    :after corfu
    :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

#+end_src
** Company
*** Setup
#+begin_src emacs-lisp :tangle etc/init-completion-company.el
  (use-package company
    :defer 2
    :init
    (setq company-idle-delay nil)  ;; 禁用自动弹出补全
    :defines (company-dabbrev-ignore-case company-dabbrev-downcase)
    :hook (after-init . global-company-mode)
    :init (setq company-tooltip-align-annotations t
                company-minimum-prefix-length 3
                company-require-match nil
                company-dabbrev-ignore-case nil
                company-dabbrev-downcase nil
                company-show-numbers t)
    :config
    ;;(setq switch-window-input-style 'minibuffer)
    (setq company-minimum-prefix-length 3)
    (setq company-show-quick-access t)
    :bind
    (:map company-active-map
          ("C-n" . #'company-select-next)
          ("C-p" . #'company-select-previous)
          ("TAB" . company-complete-selection)
          ("M-h" . company-complete-selection)
          ("M-H" . company-complete-common)
          ("M-s" . company-search-candidates)
          ("M-S" . company-filter-candidates)
          ("M-n" . company-select-next)
          ("M-p" . company-select-previous))
    (:map leader-key
          ("y" . #'company-yasnippet))
    )
  (use-package company-box
    :ensure nil)
  (provide 'init-completion-company)
#+end_src
*** 手动触发
#+begin_src emacs-lisp :tangle  etc/init-completion.el
  ;;据说跟 lsp-bridge 冲突
  (setq company-idle-delay nil) 
  ;; (global-set-key (kbd "M-/") 'company-complete)  ;; 绑定 M-/ 为 company-complete
  ;; (global-set-key (kbd "M-?") 'dabbrev-expand)    ;; 绑定 M-? 为 dabbrev-expand
  (lazy-load-global-keys
   '(
     ("M-/" . company-complete)
     ("M-?" . dabbrev-expand)

     )
   "init-completion-company"
   )
#+end_src
** Use orderless
#+begin_src emacs-lisp :tangle etc/init-completion.el
  ;; Optionally use the `orderless' completion style.
  (require-package 'orderless)
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion))))
    (orderless-component-separator #'orderless-escapable-split-on-space))
  ;; Support Pinyin
  (use-package pinyinlib
    :after orderless
    :autoload pinyinlib-build-regexp-string
    :init
    (defun completion--regex-pinyin (str)
      (orderless-regexp (pinyinlib-build-regexp-string str)))
    (add-to-list 'orderless-matching-styles 'completion--regex-pinyin))
#+end_src
** Use consult
#+begin_src emacs-lisp :tangle etc/init-completion.el
  (use-package consult
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ([remap Info-search]        . consult-info)
           ([remap isearch-forward]    . consult-line)
           ([remap recentf-open-files] . consult-recent-file)

           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b"   . consult-buffer)              ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#"     . consult-register-load)
           ("M-'"     . consult-register-store)      ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#"   . consult-register)
           ;; Other custom bindings
           ("M-y"     . consult-yank-pop)            ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e"   . consult-compile-error)
           ("M-g g"   . consult-goto-line)           ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o"   . consult-outline)             ;; Alternative: consult-org-heading
           ("M-g m"   . consult-mark)
           ("M-g k"   . consult-global-mark)
           ("M-g i"   . consult-imenu)
           ("M-g I"   . consult-imenu-multi)
           ;; ("M-g M"   . consult-man)
           ;; ("M-g I"   . consult-info)
           ("M-g t"   . consult-theme)
           ("M-g h"   . consult-history)
           ;; M-s bindings in `search-map'
           ("M-s d"   . consult-find)
           ("M-s D"   . consult-locate)
           ("M-s g"   . consult-grep)
           ("M-s G"   . consult-git-grep)
           ("M-s r"   . consult-ripgrep)
           ("M-s l"   . consult-line)
           ("M-s L"   . consult-line-multi)
           ("M-s k"   . consult-keep-lines)
           ("M-s u"   . consult-focus-lines)
           ;; Isearch integration
           ("M-s e"   . consult-isearch-history)
           ("C-r" .  consult-line)
           :map isearch-mode-map
           ("M-e"     . consult-isearch-history)
           ("M-s e"   . consult-isearch-history)
           ("M-s l"   . consult-line)
           ("M-s L"   . consult-line-multi)
           ) 

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init
    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)
    :config
    (use-package consult-flyspell
      :bind ("M-g s" . consult-flyspell))

    (use-package consult-yasnippet
      :bind ("M-g y" . consult-yasnippet))
    ;; Use Consult to select xref locations with preview
    (with-eval-after-load 'xref
      (setq xref-show-xrefs-function #'consult-xref
            xref-show-definitions-function #'consult-xref))
    )


#+end_src
** nerd-icons-completion
#+begin_src emacs-lisp :tangle etc/init-completion.el
  
  (use-package nerd-icons-completion
    :when (icons-displayable-p)
    :hook (vertico-mode . nerd-icons-completion-mode))
#+end_src
** Misc
#+begin_src emacs-lisp :tangle  etc/init-completion.el
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Only list the commands of the current modes
    (when (boundp 'read-extended-command-predicate)
      (setq read-extended-command-predicate
            #'command-completion-default-include-p))

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))

  ;; 在 Emacs 中，shackle 是一个专门用于控制弹出窗口（pop-up windows）和
  ;; 缓冲区显示方式的包。它可以帮助你为特定类型的 buffer 制定“在哪个窗口
  ;; 打开”、“打开时如何分割窗口”、“窗口大小”等规则，从而摆脱 Emacs 默认
  ;; 情况下可能随机或难以预测的弹出方式。与较早的 popwin 类似，但
  ;; shackle 提供了更灵活、细粒度的控制。
  (use-package shackle
    :init
    (shackle-mode 1)
    :config
    (setq shackle-rules
          '((compilation-mode :select t :align 'below :size 0.3)
            ("*Help*" :select t :align 'below :size 0.3)
            ("*Messages*" :select nil :align 'below :size 0.3)
            ("^\\*magit.*\\*$" :regexp t :align 'right :size 0.4 :select t))))

  (unless (display-graphic-p)
    ;; only conole packages
    )

#+end_src
* Tools
** setup
#+begin_src emacs-lisp :tangle etc/init-tools.el
  (provide 'init-tools)
#+end_src
Add to suk.el
#+begin_src emacs-lisp :tangle suk.el
  (require 'init-tools)
#+end_src
** Which Keys
:PROPERTIES:
:CUSTOM_ID: setup-which-keys
:END:
<<setup-which-keys>>
*** 安装
#+begin_src emacs-lisp :tangle install.el
    (require-package 'which-key)
#+end_src
*** 设置
#+begin_src emacs-lisp :tangle etc/init-tools.el
  ;; Display available keybindings in popup

  (use-package which-key
    :diminish
    :bind (("C-h M-m" . which-key-show-major-mode)
           (:map help-map ("C-h" . which-key-C-h-dispatch)))

    :hook (after-init . which-key-mode)
    ;;:custom
    ;; 弹出方式，底部弹出
    ;;(which-key-popup-type 'side-window)
    :init (setq which-key-max-description-length 30
                which-key-lighter nil
                which-key-show-remaining-keys t)
    :config
    (which-key-mode))

  (use-package which-key-posframe
    :after (which-key posframe)
    :config
    (which-key-posframe-mode 1))

#+end_src

** 英文助手
#+begin_src emacs-lisp :tangle etc/init-tools.el

  ;;; ### Company en words ###
  ;;; --- 英文助手
  (lazy-load-global-keys
   '(
     ("M-r" . toggle-company-english-helper) ;英文助手
     )
   "company-english-helper")
#+end_src
** Treemacs
A tree view component
#+begin_src emacs-lisp :tangle etc/init-tools.el
  (lazy-load-global-keys
   '(
     ("<f8>" . treemacs)
    )
  "init-treemacs")
#+end_src
** NeoTree
Another tree view component
#+begin_src emacs-lisp :tangle etc/init-tools.el
  ;; 设置打开 NeoTree 树形列表展示
  ;;(require-package 'neotree)
  ;;(use-package neotree
  ;;  :commands (projectile-switch-project neotree-dir)
  ;;  :config
  ;;  (setq neo-theme 'ascii           ; NeoTree 图标的样式
  ;;        neo-window-width 35
  ;;        neo-window-fixed-size nil) ; 设置 NeoTree 窗口的宽度可以使用鼠标调整
  ;;  :bind ("C-c o" . projectile-switch-project))


#+end_src

** Markdown support
#+begin_src emacs-lisp :tangle etc/init-tools.el
  (use-package markdown-mode)
#+end_src
** Regex tool
#+begin_src emacs-lisp :tangle etc/init-tools.el
  (use-package regex-tool)
#+end_src
** command log mode
#+begin_src emacs-lisp :tangle etc/init-tools.el
  ;; (use-package 'command-log-mode) ;; show the command you press the shortcuts. M-x command-log-mode, M-x clm/open-command-log-buffer

#+end_src
** server
#+begin_src emacs-lisp :tangle etc/init-tools.el
  ;;;; The emacsclient call depends on the daemon or `server-mode' (I use the latter)
  (use-package server
    :ensure nil
    :defer 1
    :config
    (unless (server-running-p)
      (server-start)))
#+end_src
** Misc
*** install
#+begin_src emacs-lisp :tangle install.el
  ;; efficiency
  (require-package 'helpful)
  (require-package 'wc-mode)
  (require-package 'ws-butler)
  (require-package 'async)
  (require-package 'popup) ; some old package need it
  (require-package 'htmlize) ; prefer stable version
  (require-package 'diminish)
  (require-package 'unfill)
  (require-package 'rainbow-delimiters)
#+end_src

*** setup plugins
#+begin_src emacs-lisp :tangle etc/init-tools.el
  (use-package keyfreq
    :ensure t
    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
  ;; M-x keyfreq-show
#+end_src
* Coding
其实使用emacs来做工程开发是不太好，用来编写一啲脚本类嘅还好。
** 安装软件
#+begin_src emacs-lisp :tangle install.el
  ;; 在WIndows下效率极低，速度好慢，冇必要使用。
  
  (require-package 'magit)
  (require-package 'fringe-helper)
  (require-package 'git-gutter) ; dependent to fringe-helper
  (require-package 'git-modes)
  (require-package 'web-mode)
  (require-package 'yaml-mode)
  (require-package 'js2-mode)
  (require-package 'rjsx-mode) ; use my package in extensions
  (require-package 'csv-mode)
  (require-package 'graphql-mode)
  (require-package 'typescript-mode)
  (require-package 'nvm)
#+end_src
** Setup
#+begin_src emacs-lisp :tangle etc/init-devtools.el
  (provide 'init-devtools)
  
#+end_src
** Modes
#+begin_src emacs-lisp :tangle etc/init-devtools.el

  ;; programming modes
  (use-package csv-mode)
  (use-package yaml-mode)
  (use-package web-mode)
  (use-package yaml-mode)
  (use-package js2-mode)
  (use-package rjsx-mode)
  (use-package csv-mode)
  (use-package typescript-mode)
  (use-package nvm)

#+end_src
** Formatter
#+begin_src emacs-lisp :tangle etc/init-devtools.el

  ;; format all, formatter for almost languages
  ;; great for programmers
  (require-package 'format-all)
  (use-package format-all
    :ensure t
    :hook (prog-mode . format-all-ensure-formatter)
    :bind ("C-c f" . #'format-all-buffer))

  ;; Format HTML, CSS and JavaScript/JSON
  ;; Install: npm -g install prettier
  (when (executable-find "prettier")
    (use-package prettier
      :diminish
      :hook ((js-mode js2-mode css-mode sgml-mode web-mode) . prettier-mode)
      :init (setq prettier-pre-warm 'none)))

  (use-package prettier-js
    :ensure t
    :defer 3
    :hook ((css-mode web-mode typescript-mode js-mode json-mode js2-mode) . prettier-js-mode))


  (use-package apheleia
    :hook (prog-mode . apheleia-mode)
    :config
    (setf (alist-get 'prettier apheleia-formatters)
          '("prettier" "--stdin-filepath" filepath)))
#+end_src
** Hideshow
#+begin_src emacs-lisp :tangle etc/init-devtools.el
  ;; 折叠和收缩代码
  ;; builtin
  (use-package hideshow
    :diminish hs-minor-mode
    :bind
    (:map hs-minor-mode-map
          ("C-c ." . hs-toggle-hiding)
          ("C-c ," . hs-show-all)
          )
    :hook (prog-mode . hs-minor-mode)
    :config
    (with-eval-after-load 'pretty-hydra
      (pretty-hydra-define+ hideshow-hydra
        (:title (pretty-hydra-title "HideShow" 'octicon "nf-oct-fold")
                :color amaranth :quit-key ("q" "C-g"))
        ("Fold"
         (("t" hs-toggle-all "toggle all")
          ("a" hs-show-all "show all")
          ("i" hs-hide-all "hide all")
          ("g" hs-toggle-hiding "toggle hiding")
          ("c" hs-cycle "cycle block")
          ("s" hs-show-block "show block")
          ("h" hs-hide-block "hide block")
          ("l" hs-hide-level "hide level"))
         "Move"
         (("C-a" mwim-beginning-of-code-or-line "⭰")
          ("C-e" mwim-end-of-code-or-line "⭲")
          ("C-b" backward-char "←")
          ("C-n" next-line "↓")
          ("C-p" previous-line "↑")
          ("C-f" forward-char "→")
          ("C-v" pager-page-down "↘")
          ("M-v" pager-page-up "↖")
          ("M-<" beginning-of-buffer "⭶")
          ("M->" end-of-buffer "⭸"))
         )
        ))
    (keymap-global-set "S-<f6>" #'hideshow-hydra/body)
    ;; Display line counts
    (defun hs-display-code-line-counts (ov)
      "Display line counts when hiding codes."
      (when (eq 'code (overlay-get ov 'hs))
        (overlay-put ov 'display
                     (concat
                      " "
                      (propertize
                       (if (char-displayable-p ?⏷) "⏷" "...")
                       'face 'shadow)
                      (propertize
                       (format " (%d lines)"
                               (count-lines (overlay-start ov)
                                            (overlay-end ov)))
                       'face '(:inherit shadow :height 0.8))
                      " "))))
    (setq hs-set-up-overlay #'hs-display-code-line-counts)
    )

  ;; Jump to definition
  (use-package dumb-jump
    :config
    (with-eval-after-load 'pretty-hydra
      (pretty-hydra-define+ dumb-jump-hydra
        (:title (pretty-hydra-title "Dump Jump" 'faicon "nf-fa-anchor")
                :color blue :quit-key ("q" "C-g"))
        ("Jump"
         (("j" dumb-jump-go "Go")
          ("o" dumb-jump-go-other-window "Go other window")
          ("e" dumb-jump-go-prefer-external "Go external")
          ("x" dumb-jump-go-prefer-external-other-window "Go external other window"))
         "Other"
         (("i" dumb-jump-go-prompt "Prompt")
          ("l" dumb-jump-quick-look "Quick look")
          ("b" dumb-jump-back "Back")))
        )
      (keymap-global-set "C-M-j" #'dumb-jump-hydra/body)
      )
    :init
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
    (setq dumb-jump-selector 'completing-read))

#+end_src
** copilot
#+begin_src emacs-lisp :tangle etc/init-devtools.el

  (when suk-copilot-enable

    (when sys/win32p 
      (setq copilot-node-executable "C:\\green\\node-v20.10.0-win-x64\\node.exe")
      (add-to-list 'load-path "C:\\green\\emacs-suk\\.emacs.d\\extensions\\copilot\\copilot.el")

      )
    (unless sys/win32p
      (setq copilot-node-executable "~/.nvm/versions/node/v22.13.0/bin/node")
      (add-to-list 'load-path "~/.emacs.d/extensions/copilot/copilot.el")
      )


    (use-package copilot)
    (with-eval-after-load 'copilot

      ;; 全局设置 Copilot 的缩进偏移量为 4
      (setq copilot-indent-offset 4)
      ;; 设置 Copilot 缩进偏移量
      (let ((copilot-offsets
             '((python-mode . 4)
               (c-mode . 2)
               (js-mode . 2)
               (bat-mode . 2))))
        (dolist (pair copilot-offsets)
          (let ((mode (car pair))
                (offset (cdr pair)))
            (add-hook mode (lambda () (setq copilot-indent-offset offset))))))
      (add-hook 'prog-mode-hook 'copilot-mode)

      ;; To customize the behavior of copilot-mode, please check copilot-enable-predicates and copilot-disable-predicates.
      ;; You need to bind copilot-complete to some key and call copilot-clear-overlay inside post-command-hook.
      (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
      (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)
      (add-to-list 'copilot-major-mode-alist '("jsonl" . "json"))
      ;; Increase the maximum character limit for Copilot
      (setq copilot-max-char 200000) ;; Adjust the value as needed
      ;; Disable Copilot file size warnings
      (setq copilot-disable-size-check t) ;; Hypothetical variable
      ;;;; 忽略 Copilot 的特定警告
      ;;(add-to-list 'warning-suppress-types '(copilot quail--infer-indentation-offset found no mode-specific indentation offset))
      ;;;; 设置 Emacs 的最低警告级别为 warning`，忽略 `emergency 级别以下的警告
      ;; (setq warning-minimum-level :warning)
      ;; 闭嘴
      (setq copilot-indent-offset-warning-disable t)
      )

    ;; Login to Copilot by M-x copilot-login. You can also check the
    ;; status by M-x copilot-diagnose (NotAuthorized means you don't have
    ;; a valid subscription).
    )
#+end_src
** Web
*** Typescript
#+begin_src emacs-lisp :tangle etc/init-devtools.el


  ;; {{ typescript
  (use-package typescript-mode
    :load-path "~/.emacs.d/extensions/typescript"
    :hook ((typescript-mode . (typescript-mode-hook-setup)))
    :config
    (defun typescript-mode-hook-setup ()
      "Set up `typescript-mode'."
      (when (my-use-tags-as-imenu-function-p)
        ;; use ctags to calculate imenu items
        (setq imenu-create-index-function
              'counsel-etags-imenu-default-create-index-function)))

    (defun my-typescript-beginning-of-defun-hack (orig-func &rest args)
      "Overwrite typescript beginning detection."
      (ignore orig-func)
      (ignore args)
      (when (my-use-tags-as-imenu-function-p)
        (let* ((closest (my-closest-imenu-item)))
          (when closest
            (imenu closest)))))
    (advice-add 'typescript-beginning-of-defun
                :around #'my-typescript-beginning-of-defun-hack)
    )



#+end_src
*** CSS
#+begin_src emacs-lisp :tangle etc/init-devtools.el

  ;; CSS
  (use-package css-mode
    :init (setq css-indent-offset 2))

  ;; SCSS
  (use-package scss-mode
    :init (setq scss-compile-at-save nil))

  ;; LESS
  (unless (fboundp 'less-css-mode)
    (use-package less-css-mode))

#+end_src
*** Javascript
#+begin_src emacs-lisp :tangle etc/init-devtools.el
  ;; JSON
  (unless (fboundp 'js-json-mode)
    (use-package json-mode
      :load-path "~/.emacs.d/extensions/json-mode"))

  ;; JavaScript
  (use-package js
    :init (setq js-indent-level 2))

  (with-eval-after-load 'js-mode
    ;; '$' is part of variable name like '$item'
    (modify-syntax-entry ?$ "w" js-mode-syntax-table))

  (use-package js2-mode
    :mode (("\\.js\\'" . js2-minor-mode)
           ("\\.jsx\\'" . js2-minor-jsx-mode))
    :interpreter (("node" . js2-minor-mode)
                  ("node" . js2-minor-jsx-mode))
    :hook ((js2-minor-mode . (lambda()  (js2-imenu-extras-mode)
                               (js2-highlight-unused-variables-mode)

                               )))
    :config
    (defun my-validate-json-or-js-expression (&optional not-json-p)
      "Validate buffer or select region as JSON.
  If NOT-JSON-P is not nil, validate as Javascript expression instead of JSON."
      (interactive "P")
      (let* ((json-exp (if (region-active-p) (my-selected-str)
                         (my-buffer-str)))
             (jsbuf-offet (if not-json-p 0 (length "var a=")))
             errs
             first-err
             (first-err-pos (if (region-active-p) (region-beginning) 0)))
        (unless not-json-p
          (setq json-exp (format "var a=%s;"  json-exp)))
        (with-temp-buffer
          (insert json-exp)
          (my-ensure 'js2-mode)
          (js2-parse)
          (setq errs (js2-errors))
          (cond
           ((not errs)
            (message "NO error found. Good job!"))
           (t
            ;; yes, first error in buffer is the last element in errs
            (setq first-err (car (last errs)))
            (setq first-err-pos (+ first-err-pos (- (cadr first-err) jsbuf-offet)))
            (message "%d error(s), first at buffer position %d: %s"
                     (length errs)
                     first-err-pos
                     (js2-get-msg (caar first-err))))))
        (if first-err (goto-char first-err-pos))))

    (defun my-print-json-path (&optional hardcoded-array-index)
      "Print the path to the JSON value under point, and save it in the kill ring.
  If HARDCODED-ARRAY-INDEX provided, array index in JSON path is replaced with it."
      (interactive "P")
      (cond
       ((memq major-mode '(js2-mode))
        (js2-print-json-path hardcoded-array-index))
       (t
        (let* ((cur-pos (point))
               (str (my-buffer-str)))
          (when (string= "json" (file-name-extension buffer-file-name))
            (setq str (format "var a=%s;" str))
            (setq cur-pos (+ cur-pos (length "var a="))))
          (my-ensure 'js2-mode)
          (with-temp-buffer
            (insert str)
            (js2-init-scanner)
            (js2-do-parse)
            (goto-char cur-pos)
            (js2-print-json-path))))))
    (defun my-print-json-path (&optional hardcoded-array-index)
      "Print the path to the JSON value under point, and save it in the kill ring.
  If HARDCODED-ARRAY-INDEX provided, array index in JSON path is replaced with it."
      (interactive "P")
      (cond
       ((memq major-mode '(js2-mode))
        (js2-print-json-path hardcoded-array-index))
       (t
        (let* ((cur-pos (point))
               (str (my-buffer-str)))
          (when (string= "json" (file-name-extension buffer-file-name))
            (setq str (format "var a=%s;" str))
            (setq cur-pos (+ cur-pos (length "var a="))))
          (my-ensure 'js2-mode)
          (with-temp-buffer
            (insert str)
            (js2-init-scanner)
            (js2-do-parse)
            (goto-char cur-pos)
            (js2-print-json-path))))))


    ;;Latest rjsx-mode does not have indentation issue
    ;;@see https://emacs.stackexchange.com/questions/33536/how-to-edit-jsx-react-files-in-emacs
    (setq-default js2-additional-externs
                  '("$"
                    "$A" ; salesforce lightning component
                    "$LightningApp" ; salesforce
                    "AccessifyHTML5"
                    "Blob"
                    "FormData"
                    "KeyEvent"
                    "Raphael"
                    "React"
                    "URLSearchParams"
                    "__dirname" ; Node
                    "_content" ; Keysnail
                    "after"
                    "afterEach"
                    "angular"
                    "app"
                    "assert"
                    "assign"
                    "before"
                    "beforeEach"
                    "browser"
                    "by"
                    "clearInterval"
                    "clearTimeout"
                    "command" ; Keysnail
                    "content" ; Keysnail
                    "decodeURI"
                    "define"
                    "describe"
                    "display" ; Keysnail
                    "documentRef"
                    "element"
                    "encodeURI"
                    "expect"
                    "ext" ; Keysnail
                    "fetch"
                    "gBrowser" ; Keysnail
                    "global"
                    "goDoCommand" ; Keysnail
                    "hook" ; Keysnail
                    "inject"
                    "isDev"
                    "it"
                    "jest"
                    "jQuery"
                    "jasmine"
                    "key" ; Keysnail
                    "ko"
                    "log"
                    "mockStore"
                    "module"
                    "mountWithTheme"
                    "plugins" ; Keysnail
                    "process"
                    "require"
                    "setInterval"
                    "setTimeout"
                    "shell" ; Keysnail
                    "tileTabs" ; Firefox addon
                    "util" ; Keysnail
                    "utag") )
    )

  (use-package rjsx-mode
    :load-path "~/.emacs.d/extensions/rjsx-mode"
    :mode ("\\.js\\'")
    :hook ((rjsx-mode .  (lambda()
                           (flycheck-add-mode 'javascript-eslint 'rjsx-mode)
                           (flycheck-select-checker 'javascript-eslint))))
    ;;:config
    ;;(add-hook 'rjsx-mode-hook 'setup)

    )

  ;; @see https://github.com/felipeochoa/rjsx-mode/issues/33
  (with-eval-after-load 'rjsx-mode
    (define-key rjsx-mode-map "<" nil))


  (require-package 'emmet-mode)
  (use-package emmet-mode
    :defer 3
    :init (setq emmet-expand-jsx-className? t)
    :hook (web-mode typescript-mode js-mode js2-mode rjsx-mode css-mode scss-mode sgml-mode))


  ;; Major mode for editing web templates
  (use-package web-mode
    :mode "\\.\\(phtml\\|php\\|[gj]sp\\|as[cp]x\\|erb\\|djhtml\\|html?\\|hbs\\|ejs\\|jade\\|swig\\|tm?pl\\|vue\\)$"
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-enable-auto-closing t) ; enable auto close tag in text-mode
    (setq web-mode-enable-auto-pairing t)
    (setq web-mode-auto-close-style 2)
    (setq web-mode-enable-css-colorization t)
    (setq web-mode-imenu-regexp-list
          '(("<\\(h[1-9]\\)\\([^>]*\\)>\\([^<]*\\)" 1 3 ">" nil)
            ("^[ \t]*<\\([@a-z]+\\)[^>]*>? *$" 1 " id=\"\\([a-zA-Z0-9_]+\\)\"" "#" ">")
            ("^[ \t]*<\\(@[a-z.]+\\)[^>]*>? *$" 1 " contentId=\"\\([a-zA-Z0-9_]+\\)\"" "=" ">")
            ;; angular imenu
            (" \\(ng-[a-z]*\\)=\"\\([^\"]+\\)" 1 2 "="))))


  ;; Adds node_modules/.bin directory to `exec_path'
  (use-package add-node-modules-path
     :hook ((web-mode js-mode js2-mode) . add-node-modules-path))

  (setq-default js2-use-font-lock-faces t
                js2-mode-must-byte-compile nil
                ;; {{ comment indention in modern frontend development
                javascript-indent-level 2
                js-indent-level 2
                css-indent-offset 2
                typescript-indent-level 2
                ;; }}
                js2-strict-trailing-comma-warning nil ; it's encouraged to use trailing comma in ES6
                js2-idle-timer-delay 0.5 ; NOT too big for real time syntax check
                js2-auto-indent-p nil
                js2-indent-on-enter-key nil ; annoying instead useful
                js2-skip-preprocessor-directives t
                js2-strict-inconsistent-return-warning nil ; return <=> return null
                js2-enter-indents-newline nil
                js2-bounce-indent-p t)

  (with-eval-after-load 'js-mode
    ;; '$' is part of variable name like '$item'
    (modify-syntax-entry ?$ "w" js-mode-syntax-table))

  (defun my-validate-json-or-js-expression (&optional not-json-p)
    "Validate buffer or select region as JSON.
  If NOT-JSON-P is not nil, validate as Javascript expression instead of JSON."
    (interactive "P")
    (let* ((json-exp (if (region-active-p) (my-selected-str)
                       (my-buffer-str)))
           (jsbuf-offet (if not-json-p 0 (length "var a=")))
           errs
           first-err
           (first-err-pos (if (region-active-p) (region-beginning) 0)))
      (unless not-json-p
        (setq json-exp (format "var a=%s;"  json-exp)))
      (with-temp-buffer
        (insert json-exp)
        (my-ensure 'js2-mode)
        (js2-parse)
        (setq errs (js2-errors))
        (cond
         ((not errs)
          (message "NO error found. Good job!"))
         (t
          ;; yes, first error in buffer is the last element in errs
          (setq first-err (car (last errs)))
          (setq first-err-pos (+ first-err-pos (- (cadr first-err) jsbuf-offet)))
          (message "%d error(s), first at buffer position %d: %s"
                   (length errs)
                   first-err-pos
                   (js2-get-msg (caar first-err))))))
      (if first-err (goto-char first-err-pos))))

  (defun my-print-json-path (&optional hardcoded-array-index)
    "Print the path to the JSON value under point, and save it in the kill ring.
  If HARDCODED-ARRAY-INDEX provided, array index in JSON path is replaced with it."
    (interactive "P")
    (cond
     ((memq major-mode '(js2-mode))
      (js2-print-json-path hardcoded-array-index))
     (t
      (let* ((cur-pos (point))
             (str (my-buffer-str)))
        (when (string= "json" (file-name-extension buffer-file-name))
          (setq str (format "var a=%s;" str))
          (setq cur-pos (+ cur-pos (length "var a="))))
        (my-ensure 'js2-mode)
        (with-temp-buffer
          (insert str)
          (js2-init-scanner)
          (js2-do-parse)
          (goto-char cur-pos)
          (js2-print-json-path))))))

  (with-eval-after-load 'js2-mode
    ;; I hate the hotkeys to hide things
    (define-key js2-mode-map (kbd "C-c C-e") nil)
    (define-key js2-mode-map (kbd "C-c C-s") nil)
    (define-key js2-mode-map (kbd "C-c C-f") nil)
    (define-key js2-mode-map (kbd "C-c C-t") nil)
    (define-key js2-mode-map (kbd "C-c C-o") nil)
    (define-key js2-mode-map (kbd "C-c C-w") nil))
  ;; }}

  (defun my-js2-mode-setup()
    "Set up javascript."
    ;; if use node.js we need nice output
    (js2-imenu-extras-mode)
    (setq mode-name "JS2")
    ;; counsel/ivy is more generic and powerful for refactoring
    ;; js2-mode has its own syntax linter

    ;; call js-doc commands through `counsel-M-x'!

    ;; @see https://github.com/mooz/js2-mode/issues/350
    (setq forward-sexp-function nil))

  (add-hook 'js2-mode-hook 'my-js2-mode-setup)

  ;; @see https://github.com/felipeochoa/rjsx-mode/issues/33
  (with-eval-after-load 'rjsx-mode
    (define-key rjsx-mode-map "<" nil))


  ;; Latest rjsx-mode does not have indentation issue
  ;; @see https://emacs.stackexchange.com/questions/33536/how-to-edit-jsx-react-files-in-emacs
  (setq-default js2-additional-externs
                '("$"
                  "$A" ; salesforce lightning component
                  "$LightningApp" ; salesforce
                  "AccessifyHTML5"
                  "Blob"
                  "FormData"
                  "KeyEvent"
                  "Raphael"
                  "React"
                  "URLSearchParams"
                  "__dirname" ; Node
                  "_content" ; Keysnail
                  "after"
                  "afterEach"
                  "angular"
                  "app"
                  "assert"
                  "assign"
                  "before"
                  "beforeEach"
                  "browser"
                  "by"
                  "clearInterval"
                  "clearTimeout"
                  "command" ; Keysnail
                  "content" ; Keysnail
                  "decodeURI"
                  "define"
                  "describe"
                  "display" ; Keysnail
                  "documentRef"
                  "element"
                  "encodeURI"
                  "expect"
                  "ext" ; Keysnail
                  "fetch"
                  "gBrowser" ; Keysnail
                  "global"
                  "goDoCommand" ; Keysnail
                  "hook" ; Keysnail
                  "inject"
                  "isDev"
                  "it"
                  "jest"
                  "jQuery"
                  "jasmine"
                  "key" ; Keysnail
                  "ko"
                  "log"
                  "mockStore"
                  "module"
                  "mountWithTheme"
                  "plugins" ; Keysnail
                  "process"
                  "require"
                  "setInterval"
                  "setTimeout"
                  "shell" ; Keysnail
                  "tileTabs" ; Firefox addon
                  "util" ; Keysnail
                  "utag"))

#+end_src
** Minor mode to aggressively keep your code always indented
#+begin_src emacs-lisp :tangle etc/init-devtools.el

  ;; Minor mode to aggressively keep your code always indented
  (use-package aggressive-indent
    :diminish
    :defer 2
    :hook ((after-init . global-aggressive-indent-mode)
           ;; NOTE: Disable in large files due to the performance issues
           ;; https://github.com/Malabarba/aggressive-indent-mode/issues/73
           (find-file . (lambda ()
                          (when (too-long-file-p)
                            (aggressive-indent-mode -1)))))
    :config
    ;; Disable in some modes
    (dolist (mode '(gitconfig-mode
                    asm-mode web-mode html-mode css-mode go-mode
                    scala-mode shell-mode term-mode vterm-mode
                    prolog-inferior-mode))
      (add-to-list 'aggressive-indent-excluded-modes mode))

    ;; Disable in some commands
    (add-to-list 'aggressive-indent-protected-commands
                 #'delete-trailing-whitespace t)

    ;; Be slightly less aggressive in C/C++/C#/Java/Go/Swift
    (add-to-list 'aggressive-indent-dont-indent-if
                 '(and (derived-mode-p
                        'c-mode 'c++-mode 'csharp-mode
                        'java-mode 'go-mode 'swift-mode)
                       (null (string-match "\\([;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)"
                                           )))))


#+end_src
* 杂项
#+begin_src emacs-lisp :tangle suk.el
  ;; 空闲时加载
  (run-with-idle-timer
   1
   nil
   #'(lambda()
       (require 'load-abbrev)
       ;; chmod +x
       ;; ref. http://th.nao.ac.jp/MEMBER/zenitani/elisp-j.html#chmod
       (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
       (autoload 'calendar "init-calendar" "Config Chinese calendar " t)
       ))


#+end_src
* 操作系统相关
#+begin_src emacs-lisp :tangle suk.el
  
  ;; Hanlde minified code
  (if emacs/>=27p (add-hook 'after-init-hook #'global-so-long-mode))
  (when sys/linuxp
    (load-if-exists (expand-file-name "linux.el" suk-emacs-root-dir)))
  (when sys/win32p
    (load-if-exists (expand-file-name "windows.el" suk-emacs-root-dir)))
  (when sys/macp
    (load-if-exists (expand-file-name "mac.el" suk-emacs-root-dir)))
#+end_src
** Linux
*** install
#+begin_src emacs-lisp :tangle install.el
  (require-package 'sudo-edit)
  (require-package 'pdf-tools) ;; use the package in extension
   
#+end_src
*** 设定
#+begin_src emacs-lisp :tangle linux.el
  ;; Your Linux specific settings

  ;; (setenv "JAVA_HOME" "/usr/lib/jvm/java-14-openjdk-amd64")

  ;; 开发工具
  (run-with-idle-timer
   1 nil
   #'(lambda()
       (require 'init-devtools)
       ))

  ;; Open files as another user
  (run-with-idle-timer
   2
   nil
   #'(lambda()
       (require 'my-sudo)
       ;; (use-package sudo-edit)
       (lazy-load-global-keys
        '(("C-z C-s" . suk/sudo/body))
        "my-sudo"
        )
       ))

  ;; On-the-fly spell checker
  (run-with-idle-timer
   2
   nil
   #'(lambda()
       (use-package flyspell
         :ensure t
         :defer 2
         :diminish flyspell-mode
         :if (executable-find "aspell")
         :hook (((text-mode outline-mode) . flyspell-mode)
                (prog-mode . flyspell-prog-mode)
                (flyspell-mode . (lambda ()
                                   (unbind-key "C-;" flyspell-mode-map)
                                   (unbind-key "C-," flyspell-mode-map)
                                   (unbind-key "C-." flyspell-mode-map))))
         :init
         (setq flyspell-issue-message-flag nil)
         (setq ispell-program-name "aspell")
         (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US" "--run-together")))))

  ;; 特有工具
  (run-with-idle-timer
   2
   nil
   #'(lambda()
       ;; run "M-x pdf-tools-install" at debian and open pdf in GUI Emacs
       (use-package pdf-tools
         :ensure t
         :config (pdf-tools-install))
       ))

  ;; 加载输入法
  (run-with-idle-timer
   1
   nil
   #'(lambda()
       (if suk-rime
           (require 'init-rime)
         ;;(require 'rain)
         (progn
           (require 'pyim-hyly)
           (pyim-hyly-enable))
         )
       ))

  ;; 其他
  (run-with-idle-timer
   1
   nil
   #'(lambda()
       (when (display-graphic-p)
         ;; only graphic packages
         )
       (unless (display-graphic-p)
         ;; only conole packages
         )
       ))
#+end_src

*** 终端
vterm是一个现代化、高性能且功能丰富的终端模拟器。它结合了高性能的
libvterm 后端和 Emacs 的强大功能，提供了接近原生终端的体验。

对于需要管理多个终端实例的用户，multi-vterm 是一个很好的扩展，能够方便
地在多个 vterm 实例之间切换，类似于 Terminator 的分屏和多标签功能。
#+begin_src emacs-lisp :tangle etc/init-vterm.el
  (provide 'init-vterm)
  ;; 配置 vterm
  (use-package vterm
    :ensure t
    :commands vterm
    :config
    (setq vterm-shell "/bin/bash"))  ;; 根据需要设置默认 shell


  ;; 定义 toggle-vterm 函数
  (defun toggle-vterm ()
    "Toggle a vterm window at the bottom of the current window.
  If the vterm window is already open, it will be hidden.
  Otherwise, a new vterm will be opened in a split below, with the current directory set to the buffer's directory."
    (interactive)
    (let* ((vterm-buffer-name "*vterm*")
           (existing-window (get-buffer-window vterm-buffer-name))
           (target-dir (if (and (buffer-file-name)
                                (file-directory-p (file-name-directory (buffer-file-name))))
                           (file-name-directory (buffer-file-name))
                         default-directory)))
      (if existing-window
          ;; 如果 vterm 窗口已经存在，则关闭它
          (delete-window existing-window)
        ;; 否则，创建一个新的 vterm 窗口
        (let ((default-directory target-dir))
          ;;(split-window-below)
          ;;(other-window 1)
          (vterm)
          ;;(vterm-other-window)
          ;; 切换到目标目录
          (vterm-send-string (concat "cd " (shell-quote-argument target-dir)))
          (vterm-send-return)
          ))
      ;; 保持原窗口焦点
      ;;(other-window 1)
      ))

  ;; 绑定快捷键
  (global-set-key (kbd "C-x C-t") 'toggle-vterm)
#+end_src
#+begin_src emacs-lisp :tangle linux.el
  (when (display-graphic-p)
    ;; only graphic packages
    (lazy-load-global-keys
     '(
       ("C-x C-t" . toggle-vterm))
     "init-vterm"
     )

    )
#+end_src
** Windows
#+begin_src emacs-lisp :tangle windows.el
  ;; Your windows specific settings

  ;; For example, (w32-register-hot-key [M-tab]) lets you use M-TAB normally in Emacs;
  
  ;; make PC keyboard's Win key or other to type Super or Hyper, for emacs running on Windows.
  (setq w32-pass-lwindow-to-system nil)
  (setq w32-lwindow-modifier 'super) ; Left Windows key

  (setq w32-pass-rwindow-to-system nil)
  (setq w32-rwindow-modifier 'super) ; Right Windows key

  (setq w32-pass-apps-to-system nil)
  (setq w32-apps-modifier 'hyper) ; Menu key


  ;; on windows, make pwsh the default shell
  ;; 2023-09-09
  (setq
   explicit-shell-file-name
   (cond
    ((eq system-type 'windows-nt)
     (let ((xlist
            (list
             "~/AppData/Local/Microsoft/WindowsApps/pwsh.exe"
             "C:/Windows/System32/WindowsPowerShell/v1.0/powershell.exe"
             )))
       (seq-some (lambda (x) (if (file-exists-p x) x nil)) xlist)))
    (t nil)))

  (run-with-idle-timer
   2
   nil
   #'(lambda()
       ;; Optimization
       (setq w32-get-true-file-attributes nil   ; decrease file IO workload
             w32-use-native-image-API t         ; use native w32 API
             w32-pipe-read-delay 0              ; faster IPC
             w32-pipe-buffer-size 65536)        ; read more at a time (64K, was 4K)
      ;;; Windows
       ;; spcial coding settings for Windows
       (unless (memq system-type '(cygwin windows-nt ms-dos))
         (setq selection-coding-system 'utf-8))
       )


   )


#+end_src
** MacOs
#+begin_src emacs-lisp :tangle mac.el
  ;; Your mac specific setting

  ;; set keys for Apple keyboard, for emacs in OS X
  (setq mac-command-modifier 'meta) ; make cmd key do Meta
  (setq mac-option-modifier 'super) ; make opt key do Super
  (setq mac-control-modifier 'control) ; make Control key do Control
  (setq ns-function-modifier 'hyper)  ; make Fn key do Hyper

  ;;(setenv "JAVA_HOME"  "path_to_java_folder/Contents/Home/")
  ;;(setq lsp-java-java-path "path_to_java_folder/Contents/Home/bin/java")

#+end_src
* 归档和例子
:PROPERTIES:
:CUSTOM_ID: achrives-and-examples
:END:
#+begin_src emacs-lisp :tangle achrives-and-examples.el
  ;; =========================================================
  ;; 通过编辑配置文件使其可以调用外部程序，来为其添加功能。
  ;; 增加命令
  ;;(defun lxr (names)
  ;;  (interactive "s查找联系人，请输入条件：")
  ;;  (call-process-shell-command "lxr" nil t t "-s" names))
  ;;执行命令
  ;;首先按功能键，Alt+x，然后输入命令 lxr 。
  ;;系统提示：“查找联系人，请输入条件："。
  ;;输入完成后，emacs 会执行命令lxr -s names，并输出执行的结果。
  ;; =========================================================
  ;; async-shell-command
#+end_src


