;;; load-set-font.el --- load my fonts.
;;
;; Copyright (C) 2018 Suk
;;
;; Author: Suk
;;
;; This file is not part of GNU Emacs.
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 2, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;; Commentary:
;; Fonts Setting
;;
;;; Code:
;;; --------------------fonts--------------------------------
;;; we using cnfonts
;;; ---------------------------------------------------------

;; Auto generated by cnfonts
;; <https://github.com/tumashu/cnfonts>
;; (set-face-attribute
;;  'default nil
;;  :font (font-spec :name "-outline-Victor Mono-bold-italic-normal-mono-*-*-*-*-c-*-iso10646-1"
;;                   :weight 'normal
;;                   :slant 'normal
;;                   :size 12.5))
;; (dolist (charset '(kana han symbol cjk-misc bopomofo))
;;   (set-fontset-font
;;    (frame-parameter nil 'font)
;;    charset
;;    (font-spec :name "-outline-宋体-normal-normal-normal-*-*-*-*-*-p-*-iso10646-1"
;;               :weight 'normal
;;               :slant 'normal
;;               :size 16.5)))

;; 默认用宋体
;; (dolist (charset '(kana han symbol cjk-misc bopomofo))
;;   (set-fontset-font (frame-parameter nil 'font)
;;                     charset
;;                     (font-spec :family "Simsun" :size 12)))

;; 设置不同字符集使用不同的字体
                                        ;(set-face-attribute 'default' nil :font "Migu 1M Less:pixelsize=16")
;; (set-frame-font "Migu 1M Less-12")
;; (set-fontset-font (frame-parameter nil 'font) 'han '("Simsun" . "unicode-bmp"))
;; (set-fontset-font (frame-parameter nil 'font) 'symbol '("Console" . "unicode-bmp"))
;; (set-fontset-font (frame-parameter nil 'font) 'japanese-jisx0208 '("Meiryo" ."unicode-bmp"))

(eval-when-compile
  (require '+const)
  (require '+custom))

(defvar loaded-font-type 0)
(defvar loaded-font-type-num 3)
;; 解决卡顿
(setq inhibit-compacting-font-caches t)
;;只渲染当前屏幕语法高亮，加快显示速度
(setq font-lock-maximum-decoration t)
(global-font-lock-mode t)
(setq font-lock-maximum-size 15000000); set 5mb file size limit for fontification
;; Fonts
(when (or sys/mac-x-p sys/linux-x-p)
  (set-frame-font "Noto Sans CJK SC-12"))

(when sys/win32p
  (set-frame-font "Simsun 12"))


(when (and suk-cnfonts (display-graphic-p))
  ;; cnfonts doesn't support terminal
  (use-package cnfonts
    :hook (after-init . cnfonts-enable)
    :config
    ;; NOTE: on macOS, the frame size is changed during the startup without below.
    ;; Keep frame size
    (setq cnfonts-keep-frame-size nil)
    (add-hook 'window-setup-hook
              (lambda ()
                (setq cnfonts-keep-frame-size t)))

    ;; Set profiles
    (setq cnfonts-use-cache t)
    (setq cnfonts-profiles
          '("program" "org-mode" "read-book"))
    (setq cnfonts--profiles-steps '(("program-normal" . 4)
                                    ("org-mode" . 6)
                                    ("read-book" . 9)))))

;; (when (and (not suk-cnfonts) (display-graphic-p))
;;   ;; Set a default font
;;   (cond
;;    ((member "Source Code Pro" (font-family-list))
;;     (set-face-attribute 'default nil :font "Source Code Pro"))
;;    ((member "Menlo" (font-family-list))
;;     (set-face-attribute 'default nil :font "Menlo"))
;;    ((member "Monaco" (font-family-list))
;;     (set-face-attribute 'default nil :font "Monaco"))
;;    ((member "DejaVu Sans Mono" (font-family-list))
;;     (set-face-attribute 'default nil :font "DejaVu Sans Mono"))
;;    ((member "Consolas" (font-family-list))
;;     (set-face-attribute 'default nil :font "Consolas")))

;;   (cond
;;    (sys/mac-x-p
;;     (set-face-attribute 'default nil :height 130))
;;    (sys/win32p
;;     (set-face-attribute 'default nil :height 110)))

;;   ;; Specify font for all unicode characters
;;   (when (member "Symbola" (font-family-list))
;;     (set-fontset-font t 'unicode "Symbola" nil 'prepend))

;;   ;; Specify font for chinese characters
;;   (cond
;;    ((member "WenQuanYi Micro Hei" (font-family-list))
;;     (set-fontset-font t '(#x4e00 . #x9fff) "WenQuanYi Micro Hei"))
;;    ((member "Microsoft Yahei" (font-family-list))
;;     (set-fontset-font t '(#x4e00 . #x9fff) "Microsoft Yahei")))
;;   )

 ;;----------------------------------------------------------
(defun load-program-font ()
  "Load Program font."
  (interactive)
  (when sys/linuxp
    ;; Set a default font
    (cond
      ;; linnux 下不支持
      ((member "Victor Mono" (font-family-list))
       (set-face-attribute 'default nil :font "Victor Mono"))
	  ((member "JetBrains Mono" (font-family-list))
       (set-face-attribute 'default nil :font "JetBrains Mono"))
	  ;; 这个字体偏小
      ;;((member "monofur" (font-family-list))
      ;; (set-face-attribute 'default nil :font "monofur"))
      ((member "Migu 1M Less" (font-family-list))
       (set-face-attribute 'default nil :font "Migu 1M Less"))
	  ((member "Source Code Pro" (font-family-list))
       (set-face-attribute 'default nil :font "Source Code Pro"))
      ((member "Monaco" (font-family-list))
       (set-face-attribute 'default nil :font "Monaco"))
      ((member "DejaVu Sans Mono" (font-family-list))
       (set-face-attribute 'default nil :font "DejaVu Sans Mono"))
      ((member "Consolas" (font-family-list))
       (set-face-attribute 'default nil :font "Consolas")))
    ;;(set-face-attribute 'default nil :font "Victor Mono Light 12")
    ;;(set-face-attribute 'default nil :font "Victor Mono") ;; linux
    ;;(set-face-attribute 'default nil :font "Source Code Pro"))
    ;;(set-face-attribute 'default nil :font "Menlo"))
    ;;(set-face-attribute 'default nil :font "Monaco"))
    ;;(set-face-attribute 'default nil :font "DejaVu Sans Mono"))
    ;;(set-face-attribute 'default nil :font "Consolas")))
    (set-face-attribute 'default nil :height 120)

    ;; Specify font for chinese characters
;;	(set-fontset-font t '(#x4e00 . #x9fff) "Microsoft Yahei")

    (set-fontset-font (frame-parameter nil 'font)
                      ;;'han  '("Simsun" . "unicode-bmp"))
                      ;;'han  '("PMingliU" . "unicode-bmp"))
                      ;;'han  '("AR PL UKai CN" . "unicode-bmp"))
                      ;;'han  '("AR PL UMing CN" . "unicode-bmp"))
                      ;;'han  '("WenQuanYi Micro Hei" . "unicode-bmp"))
                      ;;'han  '("Microsoft Yahei" . "unicode-bmp"))
                      'han  '("Noto Sans Mono CJK SC" . "unicode-bmp")
                      ;; linnux 下不支持
                      ;;'han '("TsangerJinKai01-27533 W03". "unicode-bmp")
					  ;;'han '("仓耳今楷01-27533" . "unicode-bmp")
					  )
	)
    (when (string-equal system-type "windows-nt")
      ;; 下面是用于Windows的配置。
      (progn
        ;; 设置英文字体并指定字号。
        ;; 因为不同操作系统下字体显示的大小不一样(DPI的问题)，所以分开设置。
        ;;(set-face-attribute 'default nil :font "Migu 1M Less 11")
        ;;(set-face-attribute 'default nil :font "Victor Mono Medium 12")
		(set-face-attribute 'default nil :font "Consolas 12")
		(cond
		 ;; linnux 下不支持
		 ((member "Victor Mono" (font-family-list))
		  (set-face-attribute 'default nil :font "Victor Mono 12"))
		 ((member "JetBrains Mono" (font-family-list))
		  (set-face-attribute 'default nil :font "JetBrains Mono 12"))
		 ;; 这个字体偏小
		 ;;((member "monofur" (font-family-list))
		 ;; (set-face-attribute 'default nil :font "monofur"))
		 ((member "Migu 1M Less" (font-family-list))
		  (set-face-attribute 'default nil :font "Migu 1M Less 12"))
		 ((member "Source Code Pro" (font-family-list))
		  (set-face-attribute 'default nil :font "Source Code Pro 12"))
		 ((member "Monaco" (font-family-list))
		  (set-face-attribute 'default nil :font "Monaco 12"))
		 ((member "DejaVu Sans Mono" (font-family-list))
		  (set-face-attribute 'default nil :font "Consolas 12"))
		 ((member "Consolas" (font-family-list))
		  (set-face-attribute 'default nil :font "Courier New 12")))
        ;; 给相应的字符集设置中文字体。
        (dolist (charset '(han cjk-misc chinese-gbk))
		  (cond
		   ((member "仓耳今楷01-27533 W04" (font-family-list))
			(set-fontset-font "fontset-default" charset (font-spec :family "仓耳今楷01-27533 W04")))
		   ((member "等距更纱黑体 SC" (font-family-list))
			(set-fontset-font "fontset-default" charset (font-spec :family "等距更纱黑体 SC")))
		   ((member "Simsun" (font-family-list))
			(set-fontset-font "fontset-default" charset (font-spec :family "Simsun")))

		   ))
        (setq face-font-rescale-alist
              '(("宋体" . 1.0)
                ("微软雅黑" . 1.0)))))

    (setq loaded-font-type 1)
    (message "Set program font"))

;;----------------------------------------------------------
(defun load-article-font ()
    "Load article font."
    (interactive)
    (when sys/win32p
      (set-frame-font "Times New Roman 12")
      (set-fontset-font (frame-parameter nil 'font)
                        'han '("仓耳今楷01-27533 W04" . "unicode-bmp")))

    (when sys/linuxp
      (set-face-attribute 'default nil :font "Noto Serif 12")
      ;; Specify font for chinese characters
      (set-fontset-font (frame-parameter nil 'font)
                        'han '("仓耳今楷01\-27533" . "unicode-bmp")
                        ;;'han  '("Noto Serif CJK SC" . "unicode-bmp")
                        )
      )

    (setq loaded-font-type 2)
    (setq-default line-spacing 5)
    (message "Set article fonts"))


;;----------------------------------------------------------
  (defun load-default-font ()
    "Load default font setting."
    (interactive)
    (load-program-font)
    (setq loaded-font-type 0)
    (setq-default line-spacing 1)
    (message "set default fonts")
    )

;;; ----------------------------------------------------------
;; (dolist (hook (list
;;                  'c-mode-common-hook
;;                  'c-mode-hook
;;                  'c++-mode-hook
;;                  'java-mode-hook
;;                  'haskell-mode-hook
;;                  'emacs-lisp-mode-hook
;;                  'lisp-interaction-mode-hook
;;                  'lisp-mode-hook
;;                  'maxima-mode-hook
;;                  'ielm-mode-hook
;;                  'sh-mode-hook
;;                  'makefile-gmake-mode-hook
;;                  'php-mode-hook
;;                  'python-mode-hook
;;                  'js-mode-hook
;;                  'go-mode-hook
;;                  'qml-mode-hook
;;                  'jade-mode-hook
;;                  'css-mode-hook
;;                  'ruby-mode-hook
;;                  'coffee-mode-hook
;;                  'rust-mode-hook
;;                  'qmake-mode-hook
;;                  'lua-mode-hook
;;                  'swift-mode-hook
;;                  'minibuffer-inactive-mode-hook
;;                  'prog-mode-hook
;;                  ))
;;     (add-hook hook '(lambda() (load-program-font))))


  (with-eval-after-load 'org
    (defun load-org-font ()
      "Load org-mode font."
      (interactive)
      (make-face 'width-font-face)
      (set-face-attribute 'width-font-face nil :font "等距更纱黑体 SC-12")
      ;; (set-face-attribute 'width-font-face nil :font "等距更纱黑体 SC" :size 12) ;; linux
      (setq buffer-face-mode-face 'width-font-face)
      (buffer-face-mode)
      (setq loaded-font-type 3)
      (setq-default line-spacing 5)
      (message "Set org-mode font")
      )
    (add-hook 'org-mode-hook 'load-org-font))

  (defun toggle-font ()
    "toggle font between program envirement and article envirement."
    (interactive)
    (setq loaded-font-type
          (%  (1+  loaded-font-type)  loaded-font-type-num ))
    (let ((foo (buffer-name))
          (bar (buffer-size)))
      (message
       "This buffer is %s and has %d characters."
       foo bar))
    (cond ((eq loaded-font-type 0)
           (load-default-font))
          ((eq loaded-font-type 1)
           (load-program-font))
          ((eq loaded-font-type 2)
           (load-article-font))
          )
    )


;;; ----------------------------------------------------------
;;; (global-set-key (kbd "<f6>") 'toggle-font)
;;; ----------------------------------------------------------


;;; ----------------------------------------------------------

  ;; 解决 daemon 时， 字体无效。
  (when (and (fboundp 'daemonp) (daemonp))
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (with-selected-frame frame
                  (load-default-font))))
    )

  (load-default-font)

  ;; ------------------------------------------------------
  ;; 设置不同操作系统使用不同的字体
  ;; (defun my-set-font (&optional frame)
  ;;     ;; (load-default-font)
  ;;     (with-selected-frame (or frame (selected-frame))
  ;;         (if (string-equal system-type "windows-nt")
  ;;         ;; 下面是用于Windows的配置。
  ;;         (progn
  ;;             ;; 设置英文字体并指定字号。
  ;;             ;; 因为不同操作系统下字体显示的大小不一样(DPI的问题)，所以分开设置。
  ;;             (set-face-attribute 'default nil :font "Migu 1M Less 12")
  ;;             ;; 给相应的字符集设置中文字体。
  ;;             (dolist (charset '(han cjk-misc chinese-gbk))
  ;;                 (set-fontset-font "fontset-default"
  ;;                     charset (font-spec :family "Simsun")
  ;;                 )
  ;;             )
  ;;         )
  ;;
  ;;         ;; 下面是Linux的配置，道理类似。
  ;;         (set-face-attribute 'default nil :font "Migu 1M Less-12")
  ;;         (dolist (charset '(kana han cjk-misc bopomofo))
  ;;            (set-fontset-font "fontset-default"
  ;;               charset (font-spec :name "等距更纱黑体 SC")))
  ;;         )
  ;;     )
  ;; )

  ;; 运行一下立即设置字体。
  ;; (my-set-font)
  ;; (load-default-font)


  ;; For Linux
  (global-set-key (kbd "<C-mouse-4>") 'text-scale-increase)
  (global-set-key (kbd "<C-mouse-5>") 'text-scale-decrease)

  ;; For Windows
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)

  (provide 'load-set-font)
;;; load-set-font.el ends here.

  ;;   (cond
  ;;    ((member "Source Code Pro" (font-family-list))
  ;;     (set-face-attribute 'default nil :font "Source Code Pro"))
  ;;    ((member "Menlo" (font-family-list))
  ;;     (set-face-attribute 'default nil :font "Menlo"))
  ;;    ((member "Monaco" (font-family-list))
  ;;     (set-face-attribute 'default nil :font "Monaco"))
  ;;    ((member "DejaVu Sans Mono" (font-family-list))
  ;;     (set-face-attribute 'default nil :font "DejaVu Sans Mono"))
  ;;    ((member "Consolas" (font-family-list))
  ;;     (set-face-attribute 'default nil :font "Consolas")))

  ;;   (cond
  ;;    (sys/mac-x-p
  ;;     (set-face-attribute 'default nil :height 130))
  ;;    (sys/win32p
  ;;     (set-face-attribute 'default nil :height 110)))

  ;;   ;; Specify font for all unicode characters
  ;;   (when (member "Symbola" (font-family-list))
  ;;     (set-fontset-font t 'unicode "Symbola" nil 'prepend))

  ;;   ;; Specify font for chinese characters
  ;;   (cond
  ;;    ((member "WenQuanYi Micro Hei" (font-family-list))
  ;;     (set-fontset-font t '(#x4e00 . #x9fff) "WenQuanYi Micro Hei"))
  ;;    ((member "Microsoft Yahei" (font-family-list))
  ;;     (set-fontset-font t '(#x4e00 . #x9fff) "Microsoft Yahei")))
